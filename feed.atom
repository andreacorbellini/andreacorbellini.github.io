<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Andrea Corbellini</title><link href="https://andrea.corbellini.name/" rel="alternate"></link><link href="https://andrea.corbellini.name/feed.atom" rel="self"></link><id>https://andrea.corbellini.name/</id><updated>2023-09-05T08:30:00+00:00</updated><entry><title>My journey from Disqus to Remark42</title><link href="https://andrea.corbellini.name/2023/09/05/disqus-to-remark42/" rel="alternate"></link><published>2023-09-05T08:30:00+00:00</published><updated>2023-09-05T08:30:00+00:00</updated><author><name>andreacorbellini</name></author><id>tag:andrea.corbellini.name,2023-09-05:/2023/09/05/disqus-to-remark42/</id><summary type="html">&lt;p&gt;Readers of this blog might have noticed a few changes recently. For example,
I’ve been working on improving the look of the blog (maybe with questionable
results), as well as improving the experience on mobile. But one of the biggest
changes that perhaps some have noticed is that all of the comments on all of my
articles have suddenly disappeared since February 2023 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Readers of this blog might have noticed a few changes recently. For example,
I’ve been working on improving the look of the blog (maybe with questionable
results), as well as improving the experience on mobile. But one of the biggest
changes that perhaps some have noticed is that all of the comments on all of my
articles have suddenly disappeared since February 2023. Now, almost 7 months
later, all comments have finally been restored.&lt;/p&gt;
&lt;p&gt;The reason for this 7 months blackout of comments is that I decided to change
the platform that hosts comments: I got rid of &lt;a href="https://disqus.com/"&gt;Disqus&lt;/a&gt;,
and eventually replaced it with &lt;a href="https://remark42.com/"&gt;Remark42&lt;/a&gt;. Here I will
describe why I did it. There will be another (more technical) blog post about
my new setup.&lt;/p&gt;
&lt;h1 id="premise"&gt;Premise&lt;/h1&gt;
&lt;p&gt;My blog is a static website that has been using Disqus as a commenting platform
for a long time: since at least 2015 (8 years ago), or maybe even more (back
when my blog was on WordPress). Disqus at that time was gaining a lot of
popularity, it was free, and it was very attractive to me because easy to set
up. I might be wrong, but at that time, Disqus did not look to me like the
data-savvy, privacy-invading, revenue-oriented company that it is today. Maybe
I just naive, but so I kept using Disqus all these years without paying too
much attention to it: after all, it worked, so why would I spend any time
thinking about it?&lt;/p&gt;
&lt;h1 id="advertisements-on-my-blog"&gt;Advertisements on my blog!?&lt;/h1&gt;
&lt;p&gt;Fast-forward to February 2023: one day, a person very close to me, with the
utmost kindness that characterizes her, came to me and said: “the ads on your
blog suck! They’re the worst kind of ads!”&lt;/p&gt;
&lt;p&gt;At the beginning I had no idea what she was talking about. I have never
intentionally run any sort of advertisements on my blog. I hate advertisements!&lt;/p&gt;
&lt;p&gt;Then I realized what was going on: precisely because I hate advertisements, I
run ad-blockers on all my devices. Maybe &lt;em&gt;there were&lt;/em&gt; ads on my blog, but I
never noticed because I block those ads. The only third-party service that I
used to run on my blog was Disqus, so I immediately turned my attention to it.
I disabled my ad-blockers, refreshed my blog, scrolled down to the comments
section, and… the sad truth was revealed: Disqus was showing ads to my
readers. And yes, those ads were some of the worst kind of ads.&lt;/p&gt;
&lt;p&gt;And I knew that, together with those ads, there was massive tracking,
collection of data, and maybe even data sharing with third-parties. People who
know me, know that I deeply care about privacy, and having Disqus on my blog
tracking my readers was the complete opposite of what I wanted.&lt;/p&gt;
&lt;p&gt;I was extremely disappointed.&lt;/p&gt;
&lt;h1 id="leaving-disqus"&gt;Leaving Disqus&lt;/h1&gt;
&lt;p&gt;I did some quick research and I discovered that (1) I could not disable Disqus
ads without paying, and (2) Disqus was no longer that nice commenting platform
that I met in 2015. It had mutated into something obsessed about revenue, and
it was clear that their business model was completely based on ads. My fears
about tracking were &lt;a href="https://techcrunch.com/2021/05/05/disqus-facing-3m-fine-in-norway-for-tracking-users-without-consent/"&gt;quickly
confirmed&lt;/a&gt;.
Let’s just say that Disqus turned out to something that does not really align
with my values.&lt;/p&gt;
&lt;p&gt;I made the difficult decision to completely &lt;a href="https://github.com/andreacorbellini/andreacorbellini.github.io/commit/4f0e450d31441cab387a0e70f884fb65f19693fd"&gt;remove
Disqus&lt;/a&gt;
from my blog on the same day. But I firmly believe that &lt;strong&gt;&lt;a href="https://blog.codinghorror.com/a-blog-without-comments-is-not-a-blog/"&gt;a blog without
comments is not a
blog&lt;/a&gt;&lt;/strong&gt;,
and so I &lt;em&gt;had&lt;/em&gt; to find an alternative.&lt;/p&gt;
&lt;h1 id="looking-for-a-new-platform"&gt;Looking for a new platform&lt;/h1&gt;
&lt;p&gt;I quickly started to look for new commenting platforms that could replace
Disqus. The basic criteria that this new platform had to meet were (in no
particular order):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;be free of charge&lt;/li&gt;
&lt;li&gt;display only comments, no ads&lt;/li&gt;
&lt;li&gt;respect the privacy of users&lt;/li&gt;
&lt;li&gt;allow users to comment anonymously (at least to some extent)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last time that I searched for a commenting platform was in 2015. Back in
those days, there were not many solutions, and that’s one reason why I ended up
with Disqus. I thought: 8 years have passed since then, surely the space must
have improved, and alternatives must be proliferating, right? Well, no, not
really. I struggled to find a managed platform that met those criteria.&lt;/p&gt;
&lt;p&gt;I did find some solutions that were using Mastodon or GitHub as a backend to
store comments, but I did not like at all the idea of forcing my readers to
have a Mastodon or GitHub account to comment on my blog.&lt;/p&gt;
&lt;h1 id="trying-cactus-comments"&gt;Trying Cactus Comments&lt;/h1&gt;
&lt;p&gt;One platform that came up multiple times during my search was &lt;a href="https://cactus.chat/"&gt;Cactus
Comments&lt;/a&gt;. Quoting the homepage of the project:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cactus Comments is a federated comment system built on Matrix. It respects
your privacy, and puts you in control. The entire thing is completely free
and open source.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That sounded interesting, although I did not really know what
&lt;a href="https://matrix.org/"&gt;Matrix&lt;/a&gt; was to begin with (if you, like me earlier this
year, do not know what Matrix is: it is a team communication platform, somewhat
similar to &lt;a href="https://slack.com/"&gt;Slack&lt;/a&gt;). I thought that I could give Cactus a
try. So, a few days after removing Disqus, I onboarded on Cactus Comments.&lt;/p&gt;
&lt;p&gt;Onboarding was not hard, but it was not trivial either, mostly because I was
not familiar with Matrix. The frontend shown to readers was a bit
disappointing: even though Matrix supports threads, Cactus Comments does not.
Overall, the number of features that commenters could use was scarce: people
could only post a comment, and not much else; they had no ability to edit their
comments, or delete them. But it did allow people to post even without creating
a Matrix account, and that was great for me.&lt;/p&gt;
&lt;p&gt;The “administrative interface” (if we can call it this way) was also
disappointing. All the administration and moderation had to be done through
Matrix, sometimes by communicating with a bot, and could not be done by
clicking buttons on my blog. Every blog post had to have its own Matrix channel
and I (the author) had to manually join each channel in order to get some sort
of notification for new comments.&lt;/p&gt;
&lt;p&gt;I needed a Matrix client to spot new comments, and to perform moderation
actions, and I chose &lt;a href="https://element.io/"&gt;Element&lt;/a&gt; for that purpose. Sadly,
Element was totally unreadable on small displays like my phone. And apparently
there’s no web-based Matrix client that works well on mobile. I could have
installed an app for my phone, but I &lt;em&gt;hate&lt;/em&gt; installing apps, especially for
activities that can in theory be done through a web browser.&lt;/p&gt;
&lt;p&gt;Cactus Comments also did not support importing comments from Disqus, so moving
to this platform meant that all the conversations that happened over the years
on my blog were lost. But because Cactus Comments is free &amp;amp; open source
software, I thought that I could add support for importing comments from Disqus
if I decided to settle with Cactus Comments, so this was not a deal breaker.&lt;/p&gt;
&lt;p&gt;Overall my experience with Cactus Comments was not great, but I was willing to
accept that in exchange for a platform that was free, managed by someone else,
and respecting the privacy of my readers.&lt;/p&gt;
&lt;p&gt;There was however one big problem that eventually led me to remove Cactus
Comments from my blog: Cactus did not support sending email notifications. This
meant that if you left a comment on this blog, I would not get notified. And if
I responded to your comment, you would not get notified. In order to spot new
comments, I had to check the Matrix channels periodically, and readers and to
check my blog periodically. Maybe if I installed a Matrix app I could have
received push notifications on my phone, but that’s not what I wanted, and this
wouldn’t have solved the problem for my commenters anyway.&lt;/p&gt;
&lt;p&gt;I was pretty bad at checking for new comments on Cactus. What happened multiple
times is that people would leave comments or questions on my blog, but I
wouldn’t notice until 2 weeks later. At that point, it was pointless for me to
respond because so much time had passed that those commenters surely wouldn’t
be checking my blog for a response…&lt;/p&gt;
&lt;p&gt;I would say that with Cactus I had a blog that allowed &lt;em&gt;comments&lt;/em&gt;, but did not
allow &lt;em&gt;conversations&lt;/em&gt;. Not allowing conversations made the comments pointless
in my opinion. I might as well have had no comments at all: at least people
would stop leaving questions there that were destined to be unanswered, and
instead they would have emailed me directly.&lt;/p&gt;
&lt;h1 id="meet-remark42"&gt;Meet Remark42&lt;/h1&gt;
&lt;p&gt;Between August and September 2023, I decided that I had to restart my quest for
a commenting platform. This time I knew that I had to look for a solution that
I had to install and manage myself. I was not super-excited about it, but from
my first search for a Disqus alternative, I couldn’t find any managed solution
that I really liked.&lt;/p&gt;
&lt;p&gt;Initially I thought about writing my own commenting platform in Rust with a
key-value store, but then I figured that if I looked for a software to install
instead of a managed platform, maybe I could find something I liked.&lt;/p&gt;
&lt;p&gt;After some research, I decided to go with &lt;a href="https://remark42.com/"&gt;Remark42&lt;/a&gt;.
There were a few contenders, but Remark42 won because it looked like it had
all of the features I needed, and more:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it supports sending of email notifications, both to me, and to my readers;&lt;/li&gt;
&lt;li&gt;it supports various authentication mechanisms, including: email, GitHub,
  Google, Facebook, etc (it’s nice to give commenters a choice);&lt;/li&gt;
&lt;li&gt;it supports leaving comments anonymously, without logging in or leaving an
  email address;&lt;/li&gt;
&lt;li&gt;commenters can edit and delete comments;&lt;/li&gt;
&lt;li&gt;it supports importing comments from Disqus;&lt;/li&gt;
&lt;li&gt;in fact, it supports importing comments from any platform: the format it uses
  for restoring backups is JSON-based and very easy to replicate (in theory I
  could import the comments from Cactus, even though I have not done that yet);&lt;/li&gt;
&lt;li&gt;it’s privacy-focused, and it looks like it’s implemented with security in
  mind.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I decided to host it on &lt;a href="https://fly.io/"&gt;Fly.io&lt;/a&gt;, which offers some compute
and storage capacity for free. I was introduced to Fly.io on Mastodon, but I
had never used it before.&lt;/p&gt;
&lt;p&gt;For sending emails, I chose &lt;a href="https://elasticemail.com/"&gt;Elastic Email&lt;/a&gt;, which
also offers the features I needed for free. I also had never used this service
before, and did not know much about it: it showed up while searching for a free
SMTP provider. Elastic Email describes itself as a marketing service, which
does not sound great from the point of view of privacy, but I figured that all
the emails being sent here contain only public information (all comments are
public after all), so there’s not much to protect besides email addresses.  And
people are free to use temporary email providers like
&lt;a href="https://www.mailinator.com/"&gt;Mailinator&lt;/a&gt; if they don’t want to leave their
real email, or even leave no email address at all. (Should I be concerned about
Elastic Email, like I should have been concerned about Disqus? Let me know…
in the &lt;a href="#comments"&gt;comments&lt;/a&gt; below.)&lt;/p&gt;
&lt;p&gt;Setting up Remark42 on Fly.io was relatively easy, but it took me way longer
than I had expected, mostly because the Fly.io documentation was quite
inconsistent and confusing, and also the Remark42 documentation was not fully
clear. In the end I managed to make everything work and I’m pretty happy with
the setup I ended up with. I’m going to publish details about my setup in a
future blog post, in case you’re interested.&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;That’s all I have to say for now! Remark42 has been running on my blog for a
few days, so it’s too early for me to say whether I’ll stick with it or I will
look for a new solution, but so far it looks very promising, and I’m very happy
with it. I hope this is the beginning of a long journey!&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>On ignoring mistakes, resilience, and the hidden dangers therein</title><link href="https://andrea.corbellini.name/2023/03/18/mistakes/" rel="alternate"></link><published>2023-03-18T08:20:00+00:00</published><updated>2023-03-18T08:20:00+00:00</updated><author><name>andreacorbellini</name></author><id>tag:andrea.corbellini.name,2023-03-18:/2023/03/18/mistakes/</id><summary type="html">&lt;p&gt;As a scuba diver who often explores new places, I can say that I have found
myself in some dangerous situations, but I always made it back to the surface
without facing any negative consequences. Does this mean that I never made any
mistakes? Absolutely not: mistakes were made, and lessons were learned.&lt;/p&gt;
&lt;p&gt;We can all agree that learning from mistakes is good, but …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As a scuba diver who often explores new places, I can say that I have found
myself in some dangerous situations, but I always made it back to the surface
without facing any negative consequences. Does this mean that I never made any
mistakes? Absolutely not: mistakes were made, and lessons were learned.&lt;/p&gt;
&lt;p&gt;We can all agree that learning from mistakes is good, but sometimes, when
mistakes happen and consequences don’t manifest themselves immediately, we run
the risk of not noticing them, not learning from them, repeating them, and over
time developing a false sense of confidence, which can drive us to believe that
our repeated mistakes are actually good practices.&lt;/p&gt;
&lt;p&gt;Why do we ignore mistakes? Because sometimes outcomes are positive even if we
make mistakes. “I made it out of water even this time, this means that my dive
was executed perfectly.” This is a common way of reasoning, but in reality,
things are much more complex than that. There is a difference between &lt;em&gt;correct
execution&lt;/em&gt; and &lt;em&gt;successful outcome&lt;/em&gt;, and the two should not be confused. In
fact, everyone should know from experience that goals can be achieved even if
the execution was sloppy and full of mistakes. Catastrophic consequences may
happen if we fail to see that.&lt;/p&gt;
&lt;p&gt;An example of the consequences of ignoring mistakes is given by the two space
shuttle disasters: the &lt;a href="https://en.wikipedia.org/wiki/Space_Shuttle_Challenger_disaster"&gt;Challenger disaster of
1986&lt;/a&gt;, and the
&lt;a href="https://en.wikipedia.org/wiki/Space_Shuttle_Columbia_disaster"&gt;Columbia disaster of
2003&lt;/a&gt;. Both
these instances were caused by NASA leadership ignoring the concerns from the
engineering teams. Problems that occurred in previous shuttle launches should
have been a wake-up call for NASA leadership. Instead, all the previous
successful launches and re-entries &lt;em&gt;despite&lt;/em&gt; the problems were seen as
accomplishments, and nourished the leadership’s overconfidence. “We have made
it this time too, this means that all those concerns that engineers raised were
excessive.”&lt;/p&gt;
&lt;p&gt;The tendency of diverting from proper procedures, dismissing valid concerns,
and ignoring problems, has a name: it’s called &lt;a href="https://en.wikipedia.org/wiki/Normalization_of_deviance"&gt;normalization of
deviance&lt;/a&gt;. The driving
force of normalization of deviance is overconfidence and the false belief that
positive outcomes are inherently caused by correct executions.&lt;/p&gt;
&lt;p&gt;Overconfidence and normalization of deviance can spread like a virus in an
organization. It is important to be vigilant for signs of overconfidence in
individuals, before it infects other people. I once had to deal with a manager
who was a self-declared micromanager (and proud to be) but lacked technical
foundations and knowledge of the product. He would consistently and quickly
dismiss anything that he did not understand, and focus on short-term goals of
questionable usefulness. Whenever his team would accomplish a goal, he would
send a pumped-up announcement, often containing inaccuracies, and carefully
skipping over the shortcomings of the solutions implemented. Given the apparent
success of this management style, other managers started to follow his example.
Soon after (in less than a year), the entire organization became a toxic
environment where raising even the minimal concern was seen as an attack on the
“great new vision”.&lt;/p&gt;
&lt;p&gt;I see many parallels between this manager story and what is happening with
‘Twitter 2.0’ right now (although, I must say, in my case engineers did not get
fired on the spot for speaking the truth). And with that manager, just like
with ‘Twitter 2.0’, whenever problems occurred, those problems would either be
ignored or blamed on the preexisting components built before the manager
joined, never on the new, careless developments.&lt;/p&gt;
&lt;p&gt;The truth however was that problems that occurred had been preannounced weeks,
or months before, but concerns around them had been promptly dismissed due to
being too challenging to address, and because “everything works right now, so
that’s not a concern”.&lt;/p&gt;
&lt;p&gt;The idea that everything must be correct because everything works, goals are
achieved, and outcomes are successful, is a dangerous idea that can potentially
have catastrophic consequences. It’s important to be critical and analytical,
regardless of the outcome. This does not mean that success shouldn’t be
celebrated, but that mistakes should be captured so that lessons can be learned
from them, &lt;em&gt;even if&lt;/em&gt; the final outcome was successful. Not learning from
mistakes does not allow us to advance, and on the contrary can only lead us to
repeat them. And if we keep repeating the same mistakes, sooner or later, those
will have some negative consequences.&lt;/p&gt;
&lt;p&gt;A common practice in the aviation industry is to write reports on incidents,
close calls, and near misses, whenever they occur, even if the flight was
concluded successfully and no injuries or damages occurred. These reports are
collected in databases like the &lt;a href="https://asrs.arc.nasa.gov/"&gt;Aviation Safety Reporting
System&lt;/a&gt; (which can be freely consulted online), so
that flight safety experts and regulators can identify common failure scenarios
and eventually introduce mechanisms to improve safety in the aviation industry.
A key element of these reports is that they are not meant to put the blame on
certain people, but rather focus on what chain of events led to a certain
mistake. “Human mistake” is generally not a valid root cause: if a human was
able to make a mistake, it means that a mechanism is missing that can either
prevent the mistake or detect it before it causes any negative consequences.&lt;/p&gt;
&lt;p&gt;Some companies in other industries have similar processes for writing reports
or retrospectives when a mistake happens (regardless of the outcome), with the
goal of finding proper root causes and preventing future mistakes. Amazon with
its &lt;a href="https://aws.amazon.com/blogs/mt/why-you-should-develop-a-correction-of-error-coe/"&gt;Correction of
Error&lt;/a&gt;
practice is a famous example.&lt;/p&gt;
&lt;p&gt;I think introducing these practices in an organization can help to establish a
healthy culture where finding mistakes and raising concerns is encouraged,
rather than being oppressed. However these practices, by themselves, may not be
enough to ensure that such a culture can be maintained over time, because
people can always disagree on what is considered a ‘mistake’. Empathy is
probably the key to a truly healthy culture that allows people to learn and
advance.&lt;/p&gt;
&lt;p&gt;There are also cases where we are aware of problems, and we see them as such,
but we deliberately choose not to do anything about them. This is where
resilience comes into play.&lt;/p&gt;
&lt;p&gt;Resilience is generally a good quality to have. Resilience can give us the
strength to go through long-term hardships, and can have positive effects on
our tenancy and determination. But even resilience, when taken to the extreme,
can be dangerous. Resilience can lead us to ignore problems, and not react to
them. Resilience can make us tolerate a negative situation, without finding a
proper strategy to cope with it.&lt;/p&gt;
&lt;p&gt;Poor planning forces you to consistently work extra hours? Resist and keep
going, until you burn out. The relationship with your partner doesn’t satisfy
you? Resist and think that things will get better, while the relationship
slowly deteriorates. Feel pain in your knee every time you run for more than 30
minutes? Resist and don’t go to see a doctor, the pain will go away, sooner or
later… until you cannot run anymore.&lt;/p&gt;
&lt;p&gt;When we let resilience become an excuse to avoid solving problems, we can end
up in situations from which it’s difficult to recover.&lt;/p&gt;
&lt;p&gt;It’s important to make a distinction between what is under our control and what
is not. We can fix problems that are under our control, but in situations where
we cannot directly change the course of things, finding an alternative strategy
is the only way. Resisting and hoping that things will get better often does
not give the expected outcome–on the contrary, it can be detrimental.&lt;/p&gt;
&lt;p&gt;In the end, I think that the ‘practice’ of ignoring mistakes (because of the
overconfidence built from successful outcomes) or ignoring problems (because of
resilience taken to the extreme) are hidden time bombs, silently ticking,
waiting for the right conditions before exploding. We need to be aware that
just because things seem to work today, it doesn’t mean that we’re making the
right decisions, and this can have consequences in the future. Being critical,
analytical, empathetic, and honest is important to avoid these behaviors and
the dangers that come with them.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Authenticated encryption: why you need it and how it works</title><link href="https://andrea.corbellini.name/2023/03/09/authenticated-encryption/" rel="alternate"></link><published>2023-03-09T18:35:00+00:00</published><updated>2023-03-09T18:35:00+00:00</updated><author><name>andreacorbellini</name></author><id>tag:andrea.corbellini.name,2023-03-09:/2023/03/09/authenticated-encryption/</id><summary type="html">&lt;p&gt;In this article I want to explore a common problem of modern cryptographic
ciphers: malleability. I will explain that problem with some hands-on examples,
and then look in detail at how that problem is solved through the use of
authenticated encryption. I will describe in particular two algorithms that
provide authenticated encryption: ChaCha20-Poly1305 and AES-GCM, and briefly
mention some of their variants.&lt;/p&gt;
&lt;h1 id="the-problem"&gt;The problem …&lt;/h1&gt;</summary><content type="html">&lt;p&gt;In this article I want to explore a common problem of modern cryptographic
ciphers: malleability. I will explain that problem with some hands-on examples,
and then look in detail at how that problem is solved through the use of
authenticated encryption. I will describe in particular two algorithms that
provide authenticated encryption: ChaCha20-Poly1305 and AES-GCM, and briefly
mention some of their variants.&lt;/p&gt;
&lt;h1 id="the-problem"&gt;The problem&lt;/h1&gt;
&lt;p&gt;If we want to encrypt some data, a very common approach is to use a symmetric
cipher. When we use a symmetric cipher, we hold a &lt;strong&gt;secret key&lt;/strong&gt;, which is
generally a sequence of bits chosen at random of some fixed length (nowadays
ranging from 128 to 256 bits). The symmetric cipher takes two inputs: the
secret key, and the message that we want to encrypt, and produces a single
output: a ciphertext. Decryption is the inverse process: it takes the secret
key and the ciphertext as the input and yields back the original message as an
output. With symmetric ciphers, we use the same secret key both to encrypt and
decrypt messages, and this is why they are called symmetric (this is in
contrast with public key cryptography, or asymmetric cryptography, where
encryption and decryption are performed using two different keys: a public key
and a private key).&lt;/p&gt;
&lt;p&gt;Generally speaking, symmetric ciphers can be divided into two big families:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;stream ciphers&lt;/strong&gt;, which can encrypt data bit-by-bit;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;block ciphers&lt;/strong&gt;, which can encrypt data block-by-block, where a block has a
  fixed size (usually 128 bits).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As we will discover soon, both these two families exhibit the same fundamental
problem, although they slightly differ in the way this problem manifests
itself. To understand this problem, let’s take a close look at how these two
families of algorithms work and how we can manipulate the ciphertexts they
produce.&lt;/p&gt;
&lt;h2 id="stream-ciphers"&gt;Stream ciphers&lt;/h2&gt;
&lt;p&gt;A good way to think of a stream cipher is as a deterministic random number
generator that yields a sequence of random bits. The &lt;strong&gt;secret key&lt;/strong&gt; can be
thought of as the &lt;em&gt;seed&lt;/em&gt; for the random number generator. Every time we
initialize the random number generator with the same secret key, we will get
exactly the same sequence of random bits out of it.&lt;/p&gt;
&lt;p&gt;The bits coming out of the random number generator can then be XOR-ed together
with the data that we want to encrypt: &lt;code&gt;&lt;span
style="color:#204a87"&gt;ciphertext&lt;/span&gt; = &lt;span style="color:#a40000"&gt;random
sequence&lt;/span&gt; XOR &lt;span style="color:#4e9a06"&gt;message&lt;/span&gt;&lt;/code&gt;, like in
the following example:&lt;/p&gt;
&lt;pre&gt;
&lt;span style="color:#a40000"&gt;random sequence: 3bAWC5ThFSPXX1W8P94q3XV35TG6CRVTNAPW27Q69F&lt;/span&gt;
                                     ⊕
        &lt;span style="color:#4e9a06"&gt;message: I would really like an ice cream right now&lt;/span&gt;
                                     =
     &lt;span style="color:#204a87"&gt;ciphertext: zB686Y0H46144HwT9RQQR6vZV1gU1779n390ZCqXV1&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;The XOR operator acts as a toggle that can either flip bits or keep them
unchanged. Let me explain with an example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a XOR 0 = a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a XOR 1 = NOT a&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we XOR “something” with a 0 bit, we get “something” out; if we XOR
“something” with a 1 bit, we get the opposite of “something”. And if we use the
same toggle twice, we return to the initial state:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a XOR b XOR b = a&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This works for any &lt;code&gt;a&lt;/code&gt; and any &lt;code&gt;b&lt;/code&gt; and it’s due to the fact that &lt;code&gt;b XOR b&lt;/code&gt; is
always equal to 0. In more technical terms, each input is its own self-inverse
under the XOR operator.&lt;/p&gt;
&lt;p&gt;The self-inverse property gives us a way to decrypt the message that we
encrypted above: all we have to do is to replay the random sequence and XOR it
together with the ciphertext:&lt;/p&gt;
&lt;pre&gt;
&lt;span style="color:#a40000"&gt;random sequence: 3bAWC5ThFSPXX1W8P94q3XV35TG6CRVTNAPW27Q69F&lt;/span&gt;
                                     ⊕
     &lt;span style="color:#204a87"&gt;ciphertext: zB686Y0H46144HwT9RQQR6vZV1gU1779n390ZCqXV1&lt;/span&gt;
                                     =
        &lt;span style="color:#4e9a06"&gt;message: I would really like an ice cream right now&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;This works because &lt;code&gt;&lt;span style="color:#204a87"&gt;ciphertext&lt;/span&gt; = &lt;span
style="color:#a40000"&gt;random sequence&lt;/span&gt; XOR &lt;span
style="color:#4e9a06"&gt;message&lt;/span&gt;&lt;/code&gt;, therefore &lt;code&gt;&lt;span
style="color:#a40000"&gt;random sequence&lt;/span&gt; XOR &lt;span
style="color:#204a87"&gt;ciphertext&lt;/span&gt; = &lt;span style="color:#a40000"&gt;random
sequence&lt;/span&gt; XOR &lt;span style="color:#a40000"&gt;random sequence&lt;/span&gt; XOR
&lt;span style="color:#4e9a06"&gt;message&lt;/span&gt;&lt;/code&gt;. The two &lt;code&gt;&lt;span
style="color:#a40000"&gt;random sequence&lt;/span&gt;&lt;/code&gt; are the same, so they
cancel each other (self-inverse), leaving only &lt;code&gt;&lt;span
style="color:#4e9a06"&gt;message&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;span style="color:#a40000"&gt;random sequence: 3bAWC5ThFSPXX1W8P94q3XV35TG6CRVTNAPW27Q69F&lt;/span&gt;
                                     ⊕
&lt;span style="color:#a40000"&gt;random sequence: 3bAWC5ThFSPXX1W8P94q3XV35TG6CRVTNAPW27Q69F&lt;/span&gt;
                                     ⊕
        &lt;span style="color:#4e9a06"&gt;message: I would really like an ice cream right now&lt;/span&gt;
                                     =
        &lt;span style="color:#4e9a06"&gt;message: I would really like an ice cream right now&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Only the owner of the secret key will be able to generate the random sequence,
therefore only the owner of the secret key should, in theory, be able to
recover the message using this method.&lt;/p&gt;
&lt;h3 id="playing-with-stream-ciphers"&gt;Playing with stream ciphers&lt;/h3&gt;
&lt;p&gt;The self-inverse property not only allows us to recover the message from the
random sequence and the ciphertext, but it also allows us to recover the random
sequence if can correctly guess the message:&lt;/p&gt;
&lt;pre&gt;
        &lt;span style="color:#4e9a06"&gt;message: I would really like an ice cream right now&lt;/span&gt;
                                     ⊕
     &lt;span style="color:#204a87"&gt;ciphertext: zB686Y0H46144HwT9RQQR6vZV1gU1779n390ZCqXV1&lt;/span&gt;
                                     =
&lt;span style="color:#a40000"&gt;random sequence: 3bAWC5ThFSPXX1W8P94q3XV35TG6CRVTNAPW27Q69F&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;This “feature” opens the door to at least two serious problems. If we are able
to correctly guess the message or a portion of it, then we can:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;decrypt&lt;/strong&gt; other ciphertexts produced by the same secret key (or at least
   portions of them, depending on what portions of the random sequence we were
   able to recover);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;modify&lt;/strong&gt; ciphertexts.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And we can do all of this without any knowledge of the secret key.&lt;/p&gt;
&lt;p&gt;The first problem implies that key reuse is forbidden with stream ciphers.
Every time we want to encrypt something with a stream cipher, we need a new
key. This problem is easily solved by the use of a &lt;em&gt;nonce&lt;/em&gt; (also known as
&lt;em&gt;initialization vector&lt;/em&gt;, &lt;em&gt;IV&lt;/em&gt;, or &lt;em&gt;starting variable&lt;/em&gt;, &lt;em&gt;SV&lt;/em&gt;): a random value
that is generated before every encryption, and that is combined in some way
with the secret key to produce a new value to initialize the random number
generator. If the nonce is unique per encryption, then we can be sufficiently
confident that the random sequence generated will also be unique. The nonce
value does not necessarily need to be kept secret, and needs to be known at
decryption time. Nonces are usually generated at random at encryption time and
stored alongside the ciphertext.&lt;/p&gt;
&lt;p&gt;The second problem is a bit more subtle: if we have a ciphertext and we can
correctly guess the original message that produced it, we can modify it using
the XOR operator to “cancel” the original message and “insert” a new message,
like in this example:&lt;/p&gt;
&lt;pre&gt;
         &lt;span style="color:#3465a4"&gt;ciphertext: zB686Y0H46144HwT9RQQ&lt;strong style="color:#204a87"&gt;R6vZV1gU1779&lt;/strong&gt;n390ZCqXV1&lt;/span&gt;
                                         ⊕
            &lt;span style="color:#73d216"&gt;message: I would really like &lt;strong style="color:#4e9a06"&gt;an ice cream&lt;/strong&gt; right now&lt;/span&gt;
                                         ⊕
    &lt;span style="color:#73d216"&gt;altered message: I would really like &lt;strong style="color:#4e9a06"&gt;to go to bed&lt;/strong&gt; right now&lt;/span&gt;
                                         =
&lt;span style="color:#3465a4"&gt;tampered ciphertext: zB686Y0H46144HwT9RQQ&lt;strong style="color:#204a87"&gt;G7vTZt3Yc030&lt;/strong&gt;n390ZCqXV1&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;This message, when correctly decrypted with the secret key, will return the
tampered ciphertext &lt;em&gt;without detection!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Note that I do not need to know the full message to carry out this technique,
in fact, the following example (where unknown parts have been replaced by
hyphens) produces the same result as the above one:&lt;/p&gt;
&lt;pre&gt;
         &lt;span style="color:#3465a4"&gt;ciphertext: zB686Y0H46144HwT9RQQ&lt;strong style="color:#204a87"&gt;R6vZV1gU1779&lt;/strong&gt;n390ZCqXV1&lt;/span&gt;
                                         ⊕
            &lt;span style="color:#73d216"&gt;message: --------------------&lt;strong style="color:#4e9a06"&gt;an ice cream&lt;/strong&gt;----------&lt;/span&gt;
                                         ⊕
    &lt;span style="color:#73d216"&gt;altered message: --------------------&lt;strong style="color:#4e9a06"&gt;to go to bed&lt;/strong&gt;----------&lt;/span&gt;
                                         =
&lt;span style="color:#3465a4"&gt;tampered ciphertext: zB686Y0H46144HwT9RQQ&lt;strong style="color:#204a87"&gt;G7vTZt3Yc030&lt;/strong&gt;n390ZCqXV1&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;This problem is known as
&lt;a href="https://en.wikipedia.org/wiki/Malleability_(cryptography)"&gt;&lt;strong&gt;malleability&lt;/strong&gt;&lt;/a&gt;,
and it’s a serious issue in the real world because most of the messages that we
exchange are in practice relatively easy to guess.&lt;/p&gt;
&lt;p&gt;Suppose for example that I have control over a WiFi network, and I can inspect
and alter the internet traffic that passes through it. Suppose that I know that
a person connected to my WiFi network is visiting an e-commerce website and
that they’re interested in a particular item. The traffic that your browser
exchanges with the e-commerce website may be encrypted, and therefore I won’t
be able to decrypt its contents, but I might be able to guess certain parts of
it, like the HTTP headers sent by the website, or some parts of the HTML that
are common to all pages on that website, or even the name and the price of the
item you want to buy. If I can guess that information (which is public
information, not a secret, and it’s generally easy to guess), then I might be
able to alter some parts of the web page, showing you false information, and
altering the price that you see in an attempt to trick you into buying that
item.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;An example of malleability using ChaCha20 with OpenSSL&lt;/summary&gt;
&lt;p&gt;Here’s a practical example of how we can take the output of a stream cipher,
and alter it as we wish without knowledge of the secret key. I’m going to use
the OpenSSL command line interface to encrypt a message with a stream cipher:
&lt;a href="https://en.wikipedia.org/wiki/ChaCha20"&gt;ChaCha20&lt;/a&gt;. This is a modern, fast,
stream cipher with a good reputation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;openssl&lt;span class="w"&gt; &lt;/span&gt;enc&lt;span class="w"&gt; &lt;/span&gt;-chacha20&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-K&lt;span class="w"&gt; &lt;/span&gt;0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-iv&lt;span class="w"&gt; &lt;/span&gt;0123456789abcdef0123456789abcdef&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-in&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I would really like an ice cream right now&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-out&lt;span class="w"&gt; &lt;/span&gt;ciphertext.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;-K&lt;/code&gt; option specifies the key in hexadecimal format (256 bits, or 32 bytes,
or 64 hex characters), the &lt;code&gt;-iv&lt;/code&gt; is the nonce, also known as &lt;em&gt;initialization
vector&lt;/em&gt; (128 bits, or 16 bytes, or 32 hex characters).&lt;/p&gt;
&lt;p&gt;This trivial Python script can tamper with the ciphertext:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ciphertext.bin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ciphertext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;guessed_message&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--------------------an ice cream----------&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;replacement_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--------------------to go to bed----------&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;tampered_ciphertext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt;
                            &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guessed_message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replacement_message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tampered-ciphertext.bin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tampered_ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This script is using partial knowledge of the message. It knows (thanks to an
educated guess) that the original message contained the words “an ice cream” at
a specific offset, and uses that knowledge to replace those words with new ones
(“to go to bed”) which add up to the same length. Note that this technique
cannot be used to remove or add parts from the message, only to modify them
without changing their length.&lt;/p&gt;
&lt;p&gt;Now if we run this script and we decrypt the &lt;code&gt;tampered-ciphertext.bin&lt;/code&gt; file
with the same key and nonce as before, we get “to go to bed” instead of “an ice
cream”, without any error indicating that tampering occurred:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;openssl&lt;span class="w"&gt; &lt;/span&gt;enc&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;-chacha20&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-K&lt;span class="w"&gt; &lt;/span&gt;0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-iv&lt;span class="w"&gt; &lt;/span&gt;0123456789abcdef0123456789abcdef&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-in&lt;span class="w"&gt; &lt;/span&gt;tampered-ciphertext.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/details&gt;
&lt;h2 id="block-ciphers"&gt;Block ciphers&lt;/h2&gt;
&lt;p&gt;We have seen that stream ciphers alone have a serious problem (malleability)
that allows anyone to modify arbitrary portions of ciphertexts without
detection. Let’s take a look at the alternative: block ciphers. Will they have
the same problem?&lt;/p&gt;
&lt;p&gt;While a stream cipher can encrypt variable amounts of data, a block cipher can
only take as input a block of data of a fixed size, and produce as output
another block of data. A good block cipher produces an output that is
indistinguishable from random.&lt;/p&gt;
&lt;p&gt;The block size is generally small, usually 128 bits (16 bytes), so if we want
to encrypt larger amounts of data, we have to split the data into multiple
blocks, and encrypt each block individually. If the data is too short to fit in
a block, the data will also need to be padded.&lt;/p&gt;
&lt;pre&gt;
   message: &lt;span style="color:#4e9a06"&gt;The cat is on th&lt;/span&gt; &lt;span style="color:#204a87"&gt;e table.........&lt;/span&gt;
            |______________| |______________|
                &lt;span style="color:#4e9a06"&gt;block #1&lt;/span&gt;         &lt;span style="color:#204a87"&gt;block #2&lt;/span&gt;
                                 &lt;span style="color:#204a87"&gt;(padded)&lt;/span&gt;

ciphertext: &lt;span style="color:#73d216"&gt;c2TNPW3r09hZ6f1P&lt;/span&gt; &lt;span style="color:#3465a4"&gt;Vc32VX41XSy579Y9&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;This approach however has a problem: if we encrypt multiple blocks with the
same secret key, then portions of messages that are the repeated will produce
the same output. This gives the ability to analyze a ciphertext and find
patterns in it without knowledge of the secret key. This problem is famously
evident when encrypting pictures:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/lack-of-diffusion.webp" alt="Ubuntu logo before and after encryption with a block cipher"&gt;
  &lt;figcaption&gt;Example of applying a block cipher to an uncompressed image. The original colors are lost, but the overall layout of the image is still understandable. That's because multiple blocks of the image (containing the RGB values of each pixel), for example from the white background, are repeated multiple times, yielding the same exact encrypted blocks. The inspiration for making this image came from &lt;a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation"&gt;Wikipedia&lt;/a&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;details&gt;
&lt;summary&gt;How this image was generated&lt;/summary&gt;
&lt;p&gt;Before jumping into how I encrypted the image, let me spend a few words on how
I did NOT encrypt the image: I did not use a modern image format. Modern image
formats are very sophisticated, they’re not a simple sequence of RGB values.
Instead, they have some control structures mixed in the image, they implement
compression to reduce the image size, etc. This complexity means that if I
simply take an image in any format and encrypt it, the result won’t be
visualizable by an image viewer: the image viewer would just throw an error
because it would find invalid data structures.&lt;/p&gt;
&lt;p&gt;Note that this does not imply that encrypting modern image formats is more
secure: people can still analyze patterns in them, but it simply means that a
modern image format, once encrypted, would not produce the sensational
visualization that I showed above.&lt;/p&gt;
&lt;p&gt;In order to produce this visualization I had to find an uncompressed image
format without too much metadata in it. Thankfully the Wikipedia article on
&lt;a href="https://en.wikipedia.org/wiki/Image_file_format"&gt;image file formats&lt;/a&gt; provided
a list, which included the &lt;a href="https://en.wikipedia.org/wiki/Netpbm"&gt;Netpbm&lt;/a&gt;
family of formats (something I never heard of before). Among the formats in
this family, I chose PPM, because it’s the one that supports colors.&lt;/p&gt;
&lt;p&gt;The PPM file format is very simple: it has 3 lines of metadata, followed by the
RGB values for each pixel. No compression. Definitely the right format for this
kind of experiment!&lt;/p&gt;
&lt;p&gt;So here’s what I did: first of all I downloaded an image (the Ubuntu “Circle of
Friends” logo, obtained from Wikipedia) and converted it to PPM with
&lt;a href="https://imagemagick.org/script/convert.php"&gt;ImageMagick&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;convert&lt;span class="w"&gt; &lt;/span&gt;UbuntuCoF.png&lt;span class="w"&gt; &lt;/span&gt;img.ppm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I separated the header from the RGB values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;head&lt;span class="w"&gt; &lt;/span&gt;-n3&lt;span class="w"&gt; &lt;/span&gt;img.ppm&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;ppm-header
tail&lt;span class="w"&gt; &lt;/span&gt;-n+4&lt;span class="w"&gt; &lt;/span&gt;img.ppm&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;ppm-image
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The reason why I separated the header from RGB values is that I won’t encrypt
the header. If I did, then the image won’t be visualizable by an image viewer,
just like if I used a modern image format.  In a real-world scenario, a person
would be able to easily guess the header if it was encrypted.&lt;/p&gt;
&lt;p&gt;I encrypted the RGB values with
&lt;a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard"&gt;AES-256&lt;/a&gt;, a
modern, strong block cipher with a good reputation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;openssl enc -aes-256-ecb \
    -K 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef \
    -in ppm-image \
    -out ppm-image-encrypted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then I joined the header and the encrypted RGB values in a PPM file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cat ppm-header ppm-image-encrypted &amp;gt; img-encrypted.ppm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This results in a randomized image that can be viewed without problems on an
image viewer. It’s interesting to see that, if you change the encryption key,
you will get a different randomized image!&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;The problem we have just seen is known as &lt;strong&gt;lack of diffusion&lt;/strong&gt;. This is kinda
analogous to the first problem we identified with stream ciphers: at the root
of both problems there is key reuse. We solved this problem for stream ciphers
by combining a key with a random nonce. We could use the same strategy here,
would be an expensive approach, as initializing a block cipher with a new key
is a relatively expensive operation. It’s much cheaper to initialize the block
cipher once, and reuse it for every block encryption. We need a way to “link”
blocks to each other, so that if two linked blocks contain the same plaintext,
their encryption will give different results.&lt;/p&gt;
&lt;p&gt;There are various strategies do that. These strategies are known as &lt;a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation"&gt;&lt;em&gt;mode of
operation&lt;/em&gt;&lt;/a&gt; of
block ciphers. Let’s take a look at two of them: &lt;strong&gt;Cipher Block Chaining
(CBC)&lt;/strong&gt; and &lt;strong&gt;Counter Mode (CTR)&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id="cipher-block-chaining-cbc"&gt;Cipher Block Chaining (CBC)&lt;/h3&gt;
&lt;p&gt;This mode of operation, as the name suggests, ‘chains’ each block to the next
one. The way it works is by using the XOR operator in the following way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First of all, a random nonce is generated. The purpose of the nonce is the
    same as before (with stream ciphers): ensuring that using the same secret
    key to perform multiple encryptions yields different results each time, so
    that secret information or patterns are not revealed.&lt;/p&gt;
&lt;p&gt;The nonce does not need to be kept secret and is normally stored alongside
the ciphertext so that it can be easily used during decryption. It is
however important that the nonce is unique.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The first block of message &lt;code&gt;m[0]&lt;/code&gt; is XOR-ed with the nonce, and then
    encrypted the block cipher, producing the first block of ciphertext &lt;code&gt;c[0] =
    block_encrypt(m[0] XOR nonce)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The second block of message &lt;code&gt;m[1]&lt;/code&gt; is XOR-ed with &lt;code&gt;c[0]&lt;/code&gt;, and then
    encrypted with the block cipher: &lt;code&gt;c[1] = block_encrypt(m2 XOR c[0])&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The last block of message &lt;code&gt;m[n]&lt;/code&gt; is XOR-ed together with &lt;code&gt;c[n-1]&lt;/code&gt;, and then
    encrypted with the block cipher: &lt;code&gt;c[n] = block_encrypt(m[n] XOR c[n-1])&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/cipher-block-chaining.svg" alt="Visualization of the Cipher Block Chaining (CBC) mode of operation"&gt;
&lt;/figure&gt;

&lt;p&gt;The XOR operator is back! With stream ciphers, the XOR operator was allowing us
to tamper with ciphertexts. Can we do the same thing here? Yes of course! The
approach is slightly different though: instead of acting directly on the block
that we want to change, we will act on the block that precedes it.&lt;/p&gt;
&lt;p&gt;For example, if we want to change the sentence “I came home in the afternoon
and the cat was on the table” so that it reads ‘dog’ instead of ‘cat’, we would
need to change the block right before the one that contains the word ‘cat’. If
we want to change the very first block, for example to change the word ‘came’
to ‘left’, we would need to change the nonce instead.&lt;/p&gt;
&lt;pre&gt;
                             &lt;span style="color:#75507b"&gt;nonce&lt;/span&gt;+&lt;span style="color:#3465a4"&gt;ciphertext&lt;/span&gt;: &lt;span style="color:#75507b"&gt;yz&lt;strong style="color:#5c3566"&gt;URZR&lt;/strong&gt;bP6X1w3ZRL&lt;/span&gt; &lt;span style="color:#3465a4"&gt;XRDnPbEkx3JUP2Fv C2ZWt&lt;strong style="color:#204a87"&gt;19E&lt;/strong&gt;dAXDi76H pkbk8qTgaSdzerbF 8CWYqscBqE6cSLmx&lt;/span&gt;
                                                                ⊕
        &lt;span style="color:#73d216"&gt;message&lt;/span&gt; (shifted 1 block to the left): &lt;span style="color:#73d216"&gt;I &lt;strong style="color:#4e9a06"&gt;came&lt;/strong&gt; home in t he afternoon and  the &lt;strong&gt;cat&lt;/strong&gt; was on  the table.......&lt;/span&gt;
                                                                ⊕
&lt;span style="color:#73d216"&gt;altered message&lt;/span&gt; (shifted 1 block to the left): &lt;span style="color:#73d216"&gt;I &lt;strong style="color:#4e9a06"&gt;left&lt;/strong&gt; home in t he afternoon and  the &lt;strong&gt;dog&lt;/strong&gt; was on  the table.......&lt;/span&gt;
                                                                =
                    tampered &lt;span style="color:#75507b"&gt;nonce&lt;/span&gt;+&lt;span style="color:#3465a4"&gt;ciphertext&lt;/span&gt;: &lt;span style="color:#75507b"&gt;yz&lt;strong style="color:#5c3566"&gt;ZVQC&lt;/strong&gt;bP6X1w3ZRL&lt;/span&gt; &lt;span style="color:#3465a4"&gt;XRDnPbEkx3JUP2Fv C2ZWt&lt;strong style="color:#204a87"&gt;67V&lt;/strong&gt;dAXDi76H pkbk8qTgaSdzerbF 8CWYqscBqE6cSLmx&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;If we do the above, and then decrypt the tampered ciphertext, we will get
something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;I left home in t���������������the dog was on the table
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;details&gt;
&lt;summary&gt;How to get this result using AES-CBC with OpenSSL&lt;/summary&gt;
&lt;p&gt;Here’s a step-by-step guide on how to tamper with a ciphertext encrypted with
AES-256 in CBC mode.&lt;/p&gt;
&lt;p&gt;First, generate a valid ciphertext:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;openssl&lt;span class="w"&gt; &lt;/span&gt;enc&lt;span class="w"&gt; &lt;/span&gt;-aes-256-cbc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-K&lt;span class="w"&gt; &lt;/span&gt;0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-iv&lt;span class="w"&gt; &lt;/span&gt;0123456789abcdef0123456789abcdef&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-in&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I came home in the afternoon and the cat was on the table&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-out&lt;span class="w"&gt; &lt;/span&gt;ciphertext.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Like in the stream cipher example, &lt;code&gt;-K&lt;/code&gt; is the key in hexadecimal format (256
bits), while &lt;code&gt;-iv&lt;/code&gt; is the nonce (128 bits).&lt;/p&gt;
&lt;p&gt;We can perform the tampering with this Python script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ciphertext.bin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ciphertext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;guessed_message&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;---------------------cat----------------------------------------&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;replacement_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;---------------------dog----------------------------------------&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;tampered_ciphertext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt;
                            &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guessed_message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replacement_message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tampered-ciphertext.bin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tampered_ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that OpenSSL does not store the nonce along with the ciphertext, but
instead expects it to be passed as a command line argument. We need to modify
it separately, so here’s another Python script just for the nonce:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;nonce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromhex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0123456789abcdef0123456789abcdef&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;guessed_message&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--came----------&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;replacement_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--left----------&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;tampered_nonce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt;
                       &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guessed_message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replacement_message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tampered_nonce&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we run that script, we get: &lt;code&gt;01234a6382bacdef0123456789abcdef&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now to decrypt the tampered ciphertext with the tampered nonce:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;openssl&lt;span class="w"&gt; &lt;/span&gt;enc&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;-aes-256-cbc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-K&lt;span class="w"&gt; &lt;/span&gt;0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-iv&lt;span class="w"&gt; &lt;/span&gt;01234a6382bacdef0123456789abcdef&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-in&lt;span class="w"&gt; &lt;/span&gt;tampered-ciphertext.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/details&gt;
&lt;p&gt;It’s interesting to see that we were successful in changing the word ‘cat’ to
‘dog’ but in doing so we had to sacrifice a block, which, when decrypted,
resulted in random bytes.&lt;/p&gt;
&lt;p&gt;In a real world scenario, seeing some random bytes could raise some suspicion,
and maybe generate some errors in applications, however that’s not always the
case (how many times have we seen garbled text on our monitors, and we never
worried that somebody was tampering with our communications). Also, when
dealing with formats like HTML, one could conceal tampering attempts using
comment blocks, or using JavaScript. One example of what I’m describing is the
&lt;a href="https://efail.de/"&gt;EFAIL vulnerability&lt;/a&gt;: discovered in 2017, it affected some
popular email clients including Gmail, it targeted the use of AES in CBC mode
(as well as another mode very similar to it: Cipher Feedback, CFB), and allowed
the injection of malicious content in HTML emails.&lt;/p&gt;
&lt;p&gt;We can conclude that block ciphers in CBC mode, just like stream ciphers, are
also malleable.&lt;/p&gt;
&lt;h3 id="counter-mode-ctr"&gt;Counter Mode (CTR)&lt;/h3&gt;
&lt;p&gt;Are other modes of operation all malleable like CBC, or will they be different?
Let’s take a look at another, very common, mode of operation: Counter Mode
(CTR), so that we can get a better sense of how the problem of malleability can
affect the world of block ciphers.&lt;/p&gt;
&lt;p&gt;The mechanism behind Counter Mode is very simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A random nonce is generated. The purpose of the nonce is the usual one:
    make sure that repeated encryptions using the same key produce different
    results.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A counter (usually an integer) is initialized to 1 (or any other starting
    value of your choice).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The nonce is concatenated with the counter, and encrypted using the block
    cipher: &lt;code&gt;r[0] = block_encrypt(nonce || counter)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Because the block cipher can only accept as input a block of a fixed size,
it follows that the length of the nonce plus the length of the counter must
be equal to the block size. For example, for a 128-bit block cipher, a
common choice is to have a 96-bit nonce and a 32-bit counter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The counter is incremented: &lt;code&gt;counter = counter + 1&lt;/code&gt; (the increment does not
    necessarily need to be by 1, but that’s a common choice). The nonce and the
    new counter are concatenated again, and encrypted using the block cipher:
    &lt;code&gt;r[1] = block_encrypt(nonce || counter)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The counter is incremented again (&lt;code&gt;counter = counter + 1&lt;/code&gt;), and a new block
    is encrypted, just like before: &lt;code&gt;r[2] = block_encrypt(nonce || counter)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This mechanism produces a sequence of blocks &lt;code&gt;r[0]&lt;/code&gt;, &lt;code&gt;r[1]&lt;/code&gt;, &lt;code&gt;r[2]&lt;/code&gt;, … which
are indistinguishable from random. This sequence of random blocks can be XOR-ed
with the message to produce the ciphertext.&lt;/p&gt;
&lt;p&gt;It’s important that the values for the counter never repeat. If, for example,
we’re using a 32-bit counter, the counter will “reset” (go back to the starting
value) after 2&lt;sup&gt;32&lt;/sup&gt; iterations, and will start repeating the same
sequence of random blocks as it did at the beginning. This introduces the
problem of lack of diffusion that we have seen before, just at a larger scale.
If we’re using a 32-bit counter with a 128-bit block cipher, we cannot encrypt
more than 128·2&lt;sup&gt;32&lt;/sup&gt; bits = 64 GiB of data at once. This is a very
important detail: exceeding these limits may allow the decryption of portions
of ciphertext without knowledge of the secret key.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/counter-mode.svg" alt="Visualization of the Counter Mode (CTR) mode of operation"&gt;
&lt;/figure&gt;

&lt;p&gt;What Counter Mode is doing is effectively &lt;strong&gt;turning a block cipher into a
stream cipher&lt;/strong&gt;. As such, a block cipher in Counter Mode has the exact same
malleability problems of stream ciphers that we have seen before.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;An example of malleability using AES-CTR with OpenSSL&lt;/summary&gt;
&lt;p&gt;This example is going to be very similar (almost identical) to the example with
ChaCha20 that I showed in the stream cipher section, just that this time I’m
going to use AES-256 in CTR mode.&lt;/p&gt;
&lt;p&gt;Let’s produce a valid ciphertext:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;openssl&lt;span class="w"&gt; &lt;/span&gt;enc&lt;span class="w"&gt; &lt;/span&gt;-aes-256-ctr&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-K&lt;span class="w"&gt; &lt;/span&gt;0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-iv&lt;span class="w"&gt; &lt;/span&gt;0123456789abcdef0123456700000001&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-in&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Can you give me a ride to the party?&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-in&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Do not  give me a ride to the party!&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-out&lt;span class="w"&gt; &lt;/span&gt;ciphertext.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Tamper it with Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ciphertext.bin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ciphertext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;guessed_message&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--------------------an ice cream----------&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;replacement_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--------------------to go to bed----------&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;tampered_ciphertext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt;
                            &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guessed_message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replacement_message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tampered-ciphertext.bin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tampered_ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And now we can decrypt it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;openssl&lt;span class="w"&gt; &lt;/span&gt;enc&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;-aes-256-ctr&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-K&lt;span class="w"&gt; &lt;/span&gt;0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-iv&lt;span class="w"&gt; &lt;/span&gt;0123456789abcdef0123456700000001&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-in&lt;span class="w"&gt; &lt;/span&gt;tampered-ciphertext.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/details&gt;
&lt;h1 id="the-solution-authenticated-encryption-ae"&gt;The solution: Authenticated Encryption (AE)&lt;/h1&gt;
&lt;p&gt;We have seen that stream ciphers and block ciphers (in their mode of operation)
both exhibit the same problem (in different flavors): malleability. I’ve shown
some examples of how this problem can be exploited with modern ciphers like
ChaCha20 and AES. These ciphers, alone, &lt;strong&gt;cannot guarantee the integrity or
authenticity of encrypted data&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In this context, &lt;a href="https://en.wikipedia.org/wiki/Data_integrity"&gt;&lt;em&gt;integrity&lt;/em&gt;&lt;/a&gt; is
the assurance that data is not corrupted or modified in any way.
&lt;a href="https://en.wikipedia.org/wiki/Message_authentication"&gt;&lt;em&gt;Authenticity&lt;/em&gt;&lt;/a&gt; can be
thought of as a stronger version of integrity, and it’s the assurance that a
given ciphertext was produced only with knowledge of the secret key.&lt;/p&gt;
&lt;p&gt;Does this mean that modern ciphers, like ChaCha20 and AES, should be considered
insecure and avoided? Absolutely not! The correct answer is that those ciphers
cannot be used alone. You should think of them as basic building blocks, and
you need some additional building blocks in order to construct a complete and
secure cryptosystem. One of these additional building block, that we are going
to explore in this article, is an algorithm that provides integrity and
authentication: welcome &lt;strong&gt;Authenticated Encryption (AE)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When using authenticated encryption, an adversary may be able to modify a
ciphertext using the techniques described above, but such modification would be
detected by the authentication algorithm, and decryption will fail with an
error. The decrypted message at that point should be discarded, preventing the
use of tampered data.&lt;/p&gt;
&lt;p&gt;There are many different methods to implement authenticated encryption. The
most common approach is to use an authentication algorithm to authenticate the
ciphertext produced by a cipher. Here I will describe two very popular
authentication algorithms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Poly1305&lt;/strong&gt;, which is often used in conjunction with the stream cipher
  ChaCha20 to form &lt;strong&gt;ChaCha20-Poly1305&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;and &lt;strong&gt;Galois/Counter Mode (GCM)&lt;/strong&gt;, which is often used with the block cipher
  AES to form &lt;strong&gt;AES-GCM&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These authentication algorithms work by computing a hash of the ciphertext,
which is then stored alongside the ciphertext. This hash is not a regular hash,
but it’s a &lt;strong&gt;keyed hash&lt;/strong&gt;. A regular hash is a function that takes as input
some data and returns a fixed-size bit string:&lt;/p&gt;
&lt;p&gt;$$\operatorname{hash}: data \rightarrow bits$$&lt;/p&gt;
&lt;p&gt;A keyed hash instead takes two inputs: a secret key and some data, and produces
a fixed-size bit string:&lt;/p&gt;
&lt;p&gt;$$\operatorname{keyed-hash}: (key, data) \rightarrow bits$$&lt;/p&gt;
&lt;p&gt;The output of the keyed hash is more often called &lt;em&gt;Message Authentication Code
(MAC)&lt;/em&gt;, or &lt;em&gt;authentication tag&lt;/em&gt;, or even just &lt;em&gt;tag&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;During decryption, the same authentication algorithm is run again on the
ciphertext, and a new tag is produced. If the new tag matches the original tag
(that was stored alongside the ciphertext), then decryption succeeds. Else, if
the tags don’t match, it means that the ciphertext was modified (or the tag was
modified), and decryption fails. This gives us a way to detect tampering and
gives us the opportunity to reject ciphertexts that were not produced by the
secret key.&lt;/p&gt;
&lt;p&gt;The secret key passed to the keyed hash function is not necessarily the same
secret key used for the encryption. In fact, both ChaCha20-Poly1305 and AES-GCM
operate on a &lt;strong&gt;subkey&lt;/strong&gt; derived from the key used for encryption.&lt;/p&gt;
&lt;h2 id="poly1305"&gt;Poly1305&lt;/h2&gt;
&lt;p&gt;Poly1305 is a keyed hash function proposed by &lt;a href="https://en.wikipedia.org/wiki/Daniel_J._Bernstein"&gt;Daniel J.
Bernstein&lt;/a&gt; in 2004. It works
by using &lt;strong&gt;polynomials evaluated modulo the prime 2&lt;sup&gt;130&lt;/sup&gt; - 5&lt;/strong&gt;, hence
the name.&lt;/p&gt;
&lt;p&gt;The key to Poly1305 is a 256-bit string, and it’s split into two halves:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the first half (128 bits) is called $r$;&lt;/li&gt;
&lt;li&gt;the second half (128 bits) is called $s$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ll see later how this key is generated when Poly1305 is used to implement
authenticated encryption. For now, let’s assume that the key is a random
(unpredictable) bit string provided as an input.&lt;/p&gt;
&lt;p&gt;The first half $r$ is also &lt;em&gt;clamped&lt;/em&gt; by setting some of its bits to 0. This is
a performance-related optimization that some Poly1305 implementations can take
advantage of when doing multiplication using 64-bit registers. Clamping is
performed by applying the following hexadecimal bitmask:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;0ffffffc0ffffffc0ffffffc0fffffff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The message to authenticate is split into chunks of 128 bits each: $m_1$,
$m_2$, $m_3$, … $m_n$. If the length of the message is not a multiple of 128
bits, then the last block may be shorter. The authentication tag is then
calculated as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Interpret $r$ and $s$ as two 128-bit little-endian integers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Initialize the Poly1305 state $a_0$ to the integer 0. As we shall see
    later, this state will need to hold at most 131 bits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For each block $m_i$:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Interpret the block $m_i$ as a little-endian integer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compute $\overline{m}_i$ by appending a 1-bit to the end of the block
    $m_i$.  If $m_i$ is 128 bits long, then this is equivalent to computing
    $\overline{m}_i = 2^{128} + m_i$. In general, if the length of the
    block $m_i$ in bits is $\operatorname{len}(m_i)$, then this is
    equivalent to $\overline{m}_i = 2^{\operatorname{len}(m_i)} + m_i$.&lt;/p&gt;
&lt;p&gt;This step ensures that the resulting block $\overline{m}_i$ is always
non-zero, even if the original block $\overline{m}_i$ is zero. This is
important for the security of the algorithm, as explained later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compute the new state $a_i = (a_{i-1} + \overline{m}_i) \cdot r
    \pmod{2^{130} - 5}$. Note that, because the operation is modulo
    $2^{130} - 5$, the result will always fit in 130 bits.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once each block has been processed, compute the final state
    $a_{n+1} = a_n + s$. Note that the state $a_n$ is at most 130 bits long,
    and $s$ is at most 128 bits long, hence the result will be at most 131 bits
    long.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Truncate the final state $a_{n+1}$ to 128 bits by removing the most
    significant bits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Return the truncated final state $a_{n+1}$ as a little-endian byte string.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What this method is doing is computing the following polynomial in $r$ and $s$:&lt;/p&gt;
&lt;p&gt;$$\begin{align*}
  tag
  &amp;amp; = ((((((\overline{m}_1 \cdot r) + \overline{m}_2) \cdot r) + \cdots + \overline{m}_n) \cdot r) \bmod{(2^{130} - 5)}) + s \\
  &amp;amp; = (\overline{m}_1 r^n + \overline{m}_2 r^{n-1} + \cdots + \overline{m}_n r) \bmod{(2^{130} - 5)} + s
\end{align*}$$&lt;/p&gt;
&lt;p&gt;$r$ and $s$ are secrets, and they come from the Poly1305 key. Note that if we
didn’t add $s$ at the end, then the resulting polynomial would be a polynomial
in $r$, and one could use polynomial root-finding methods to figure out $r$
from the authentication tag, without knowledge of the key. Therefore it’s
important that $s$ is non-zero.&lt;/p&gt;
&lt;p&gt;In Python, this is what a Poly1305 implementation could look like (disclaimer:
this is for learning purposes, and not necessarily secure or optimized for
performance):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;iter_blocks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Splits a message in blocks of 16 bytes (128 bits) each, except for the last&lt;/span&gt;
&lt;span class="sd"&gt;    block, which may be shorter.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;poly1305&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;  &lt;span class="c1"&gt;# 256 bits&lt;/span&gt;

    &lt;span class="c1"&gt;# Prime for the evaluation of the polynomial&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

    &lt;span class="c1"&gt;# Split the key into two parts r and s&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;little&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 128 bits&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;little&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 128 bits&lt;/span&gt;
    &lt;span class="c1"&gt;# Clamp r&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x0ffffffc0ffffffc0ffffffc0fffffff&lt;/span&gt;

    &lt;span class="c1"&gt;# Initialize the state&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="c1"&gt;# Update the state with every block&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iter_blocks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Append a 1-bit to the end of each block&lt;/span&gt;
        &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\1&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="c1"&gt;# Convert the block to an integer&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;little&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Update the state&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;

    &lt;span class="c1"&gt;# Add s to the state and truncate it to 128 bits, removing the most&lt;/span&gt;
    &lt;span class="c1"&gt;# significant bits and keeping only the least significant 128 bits&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Convert the state from an integer to a 16-byte string (128 bits)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;little&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And here is an example of how that code could be used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;key = bytes.fromhex(&amp;#39;0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef&amp;#39;)
msg = b&amp;#39;I had a very nice day today at the beach&amp;#39;
print(poly1305(key, msg).hex())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This returns &lt;code&gt;b0c4cb74b3089e9a982e3baa90c1bb5f&lt;/code&gt;, which is the same result that
we would get using OpenSSL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;openssl&lt;span class="w"&gt; &lt;/span&gt;mac&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-macopt&lt;span class="w"&gt; &lt;/span&gt;hexkey:0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-in&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I had a very nice day today at the beach&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;poly1305
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A few things to note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The same key cannot be reused to construct two distinct tags. In fact,
    suppose that we use the same hash key to compute &lt;code&gt;tag1 = Poly1305(key,
    msg1)&lt;/code&gt; and &lt;code&gt;tag2 = Poly1305(key, msg2)&lt;/code&gt;. Then, because $s$ is the same for
    both, we could subtract the two tags (&lt;code&gt;tag1 - tag2&lt;/code&gt;) to remove the $s$ part
    and obtain a polynomial in $r$. From there, we could use algebraic methods
    to figure out $r$. Once we have $r$, we can use either one of the tags and
    compute $s$, therefore recovering the full secret key.&lt;/p&gt;
&lt;p&gt;Similarly, if the keys were generated using a predictable algorithm (for
example, incrementally: &lt;code&gt;key[i+1] = key[i] + 1&lt;/code&gt;), it would still be
possible to use a similar approach to figure out the secret key.&lt;/p&gt;
&lt;p&gt;For this reason, &lt;strong&gt;Poly1305 keys must be unique and unpredictable&lt;/strong&gt;.
Generating Poly1305 keys randomly or pseudo-randomly is an acceptable
approach. Authentication functions like Poly1305 are called &lt;strong&gt;one-time
authenticators&lt;/strong&gt; because they can be used only one time with the same key.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we didn’t add the 1-bits at the end of each block (in other words, if we
    used the $m_i$ blocks instead of $\overline{m}_i$), then encrypting a
    message full of zero bits would be the equivalent of encrypting an empty
    message.  Adding the 1-bits is a way to ensure that the length of the
    message always has an effect on the output.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="use-of-poly1305-with-chacha20-chacha20-poly1305"&gt;Use of Poly1305 with ChaCha20 (ChaCha20-Poly1305)&lt;/h3&gt;
&lt;p&gt;Let’s see how we can combine ChaCha20 and Poly1305 to construct an authenticated cipher. To recap:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ChaCha20 is a stream cipher;&lt;/li&gt;
&lt;li&gt;Poly1305 is a one-time authenticator;&lt;/li&gt;
&lt;li&gt;ChaCha20, like most ciphers, requires the use of a unique nonce to allow key
  reuse.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Putting the two together gives birth to ChaCha20-Poly1305. Here I’m going to
describe how to implement it as standardized in &lt;a href="https://www.rfc-editor.org/rfc/rfc8439"&gt;RFC
8439&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;inputs to the ChaCha20-Poly1305 encryption function&lt;/strong&gt; are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a 256-bit secret key;&lt;/li&gt;
&lt;li&gt;a 96-bit nonce;&lt;/li&gt;
&lt;li&gt;a variable-length plaintext message.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;outputs from the ChaCha20-Poly1305 encryption function&lt;/strong&gt; are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a variable-length ciphertext (same length as the input plaintext);&lt;/li&gt;
&lt;li&gt;a 128-bit authentication tag.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;ChaCha20-Poly1305 decryption function&lt;/strong&gt; will accept the same secret key,
nonce, ciphertext, and authentication tag as the input, and produce either the
plaintext or an error as the output. The error is returned in case the
authentication fails.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/chacha20-poly1305-encryption.svg" alt="Diagram of data flow during encryption with ChaCha20-Poly1305"&gt;
  &lt;figcaption&gt;Data flow during a ChaCha20-Poly1305 encryption. This shows the inputs in &lt;span style="color:#3465a4;font-weight:bold"&gt;blue&lt;/span&gt;, the outputs in &lt;span style="color:#73d216;font-weight:bold"&gt;green&lt;/span&gt;, and the intermediate objects in &lt;span style="color:#cc0000;font-weight:bold"&gt;red&lt;/span&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ChaCha20-Poly1305 works in the following way:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;ChaCha20&lt;/strong&gt; stream cipher is &lt;strong&gt;initialized&lt;/strong&gt; with the 256-bit secret key and
    the 96-bit nonce.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The stream cipher is used to encrypt a 256-bit string of all zeros. The
    result is the &lt;strong&gt;Poly1305 subkey&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you recall how a stream cipher works, you should know that encrypting
using a stream cipher is equivalent to performing the XOR of a random bit
stream with the plaintext. Here the plaintext is all zeros, so the process
of generating the Poly1305 subkey is equivalent to grabbing the first 256
bits from the ChaCha20 bit stream.&lt;/p&gt;
&lt;p&gt;We previously saw that the Poly1305 subkey must be unpredictable and unique
in order for Poly1305 to be secure. The use of ChaCha20 with a unique nonce
ensures that: because ChaCha20 is a stream cipher, its output will be
random and unpredictable. Therefore, with this construction, the subkey
will be unpredictable even if the nonce is predictable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The stream cipher is used to encrypt another 256-bit string. The result is
    discarded. This is equivalent to advancing the stream cipher state by 256
    bits.&lt;/p&gt;
&lt;p&gt;This step may seem weird, and in fact is not needed for security purposes,
but it’s a mere implementation detail. This step is here because ChaCha20
has an internal state of 512 bits. In the previous step we obtained the
first 256 bits of the state, and this next step is to discard the rest of
the state to start with a fresh state. There is no particular reason for
requiring a fresh state. The reason why RFC 8439 does that is because…
spoiler alert: ChaCha20 is a block cipher under the hood. Its block size is
512 bits. If you read the RFC, you’ll see that it asks to call the ChaCha20
block encryption function once, grab the first 256 bits, and discard the
rest. Here I’m using ChaCha20 as a stream cipher, so I have to include this
extra step to discard the bits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;plaintext&lt;/strong&gt; is &lt;strong&gt;encrypted&lt;/strong&gt; using the stream cipher.&lt;/p&gt;
&lt;p&gt;Note that this is done without resetting the state of the cipher. We are
continuing to use the same stream cipher instance that was used to generate
the Poly1305 subkey.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;ciphertext&lt;/strong&gt; is &lt;strong&gt;padded&lt;/strong&gt; with zeros to make its length a multiple
    of 16 bytes (128 bits) and is &lt;strong&gt;authenticated using Poly1305&lt;/strong&gt;, via the
    subkey generated in step 2.&lt;/p&gt;
&lt;p&gt;This step may be done in parallel to the previous one, that is: every time
we generate a chunk of ciphertext, we feed it to the Poly1305
authentication function.&lt;/p&gt;
&lt;p&gt;Why pad the ciphertext before passing it to Poly1305? After all, ChaCha20
is a stream cipher, and Poly1305 can accept arbitrary-sized messages.
Again, this is an detail of RFC 8439 and padding does not serve any
specific purpose.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;length&lt;/strong&gt; of the &lt;strong&gt;ciphertext&lt;/strong&gt; (in bytes) is fed into the &lt;strong&gt;Poly1305
    authenticator&lt;/strong&gt;. This length is represented as a 64-bit little-endian
    integer padded with 64 zero bits.&lt;/p&gt;
&lt;p&gt;The reason why the length is represented as 64 bits and padded (instead of
representing it as 128 bits) will be clearer later: what I have given you
so far is a simplified view of ChaCha20-Poly1305 and authenticated
encryption in general. I will give you the full picture when talking about
&lt;a href="#authenticated-encryption-with-associated-data-aead"&gt;associated data&lt;/a&gt;
later on, and at that point this step will be slightly modified.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The ciphertext from ChaCha20 and the authentication tag from Poly1305 are
    returned.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The decryption algorithm works in a very similar way: ChaCha20 is initialized
in the same way, the subkey is generated in the same way, the Poly1305
authentication tag is calculated from the ciphertext in the same way. The only
difference is that ChaCha20 is used to decrypt the ciphertext (instead of
encrypting the plaintext) and that the input authentication tag is compared to
the calculated authentication tag before returning.&lt;/p&gt;
&lt;p&gt;Here is a Python implementation of ChaCha20-Poly1305, based on the
implementations of ChaCha20 and Poly1305 from
&lt;a href="https://pypi.org/project/pycryptodome/"&gt;pycryptodome&lt;/a&gt; (usual disclaimer: this
code is for educational purposes, and is not necessarily secure or optimized
for performance):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Crypto.Cipher&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ChaCha20&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Crypto.Hash&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Poly1305&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;chacha20poly1305_encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;  &lt;span class="c1"&gt;# 256 bits&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;  &lt;span class="c1"&gt;# 96 bits&lt;/span&gt;

    &lt;span class="c1"&gt;# Initialize the ChaCha20 cipher with the key and nonce&lt;/span&gt;
    &lt;span class="n"&gt;cipher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ChaCha20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Derive the Poly1305 subkey using the ChaCha20 cipher&lt;/span&gt;
    &lt;span class="n"&gt;subkey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 256 bits&lt;/span&gt;
    &lt;span class="n"&gt;subkey_r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subkey&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;subkey_s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subkey&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;

    &lt;span class="c1"&gt;# Initialize the Poly1305 authenticator with the subkey&lt;/span&gt;
    &lt;span class="n"&gt;authenticator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Poly1305&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Poly1305_MAC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subkey_r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subkey_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Discard the rest of the internal ChaCha20 state&lt;/span&gt;
    &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 256 bits&lt;/span&gt;

    &lt;span class="c1"&gt;# Encrypt the message&lt;/span&gt;
    &lt;span class="n"&gt;ciphertext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Authenticate the ciphertext&lt;/span&gt;
    &lt;span class="n"&gt;authenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Pad the ciphertext with zeros (to make it a multiple of 16 bytes)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;authenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="c1"&gt;# Authenticate the length of the associated data (0 for simplicity)&lt;/span&gt;
    &lt;span class="n"&gt;authenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;little&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# 64 bits&lt;/span&gt;
    &lt;span class="c1"&gt;# Authenticate the length of the ciphertext&lt;/span&gt;
    &lt;span class="n"&gt;authenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;little&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# 64 bits&lt;/span&gt;
    &lt;span class="c1"&gt;# Generate the authentication tag&lt;/span&gt;
    &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;authenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;chacha20poly1305_decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;  &lt;span class="c1"&gt;# 256 bits&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;  &lt;span class="c1"&gt;# 96 bits&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;  &lt;span class="c1"&gt;# 128 bits&lt;/span&gt;

    &lt;span class="c1"&gt;# Initialize the ChaCha20 cipher and the Poly1305 authenticator, in the&lt;/span&gt;
    &lt;span class="c1"&gt;# same exact way as it was done during encryption&lt;/span&gt;
    &lt;span class="n"&gt;cipher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ChaCha20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;subkey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;subkey_r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subkey&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;subkey_s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subkey&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="n"&gt;authenticator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Poly1305&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Poly1305_MAC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subkey_r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subkey_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Generate the authentication tag, like during encryption&lt;/span&gt;
    &lt;span class="n"&gt;authenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;authenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;authenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;little&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;authenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;little&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;expected_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;authenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Compare the input tag with the generated tag. If they&amp;#39;re different, the&lt;/span&gt;
    &lt;span class="c1"&gt;# plaintext must not be returned to the caller&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;expected_tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;authentication failed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# The two tags match; decrypt the plaintext and return it to the caller&lt;/span&gt;
    &lt;span class="c1"&gt;# Note that, because ChaCha20 is a symmetric cipher, there is no difference&lt;/span&gt;
    &lt;span class="c1"&gt;# between the encrypt and decrypt method: here we are reusing the same&lt;/span&gt;
    &lt;span class="c1"&gt;# exact code used during decryption&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And here is how it can be used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromhex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;nonce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromhex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0123456789abcdef01234567&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I wanted to go to the beach, but now I changed my mind&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chacha20poly1305_encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;decrypted_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chacha20poly1305_decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;decrypted_message&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ciphertext: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;       tag: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; plaintext: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;decrypted_message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Running it produces the following output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ciphertext: 5d9b09cc5d90ca9ddff2d3470cfd6b563c5158e952bfae6acf1ebf9a3b968a488a41969567ef5ccfe05dcf9e548567028ff374a754af
       tag: dac3c05d261920e278ceb22e2800aa95
 plaintext: b&amp;#39;I wanted to go to the beach, but now I changed my mind&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the same output we would obtain by using the ChaCha20-Poly1305
implementation from pycryptodome directly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Crypto.Cipher&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ChaCha20_Poly1305&lt;/span&gt;

&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromhex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;nonce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromhex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0123456789abcdef01234567&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I wanted to go to the beach, but now I changed my mind&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;cipher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ChaCha20_Poly1305&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encrypt_and_digest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ciphertext: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;       tag: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As already stated, it is extremely important that the nonce passed to
ChaCha20-Poly1305 is unique. It may be predictable, but it must be unique. If
the same nonce is reused twice or more, we can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Decrypt arbitrary messages without using the secret key, if we can guess at
    least one message from its ciphertext.&lt;/p&gt;
&lt;p&gt;This can be done using the techniques described at the beginning of this
article: by recovering the random bit string from the XOR of the ciphertext
with the guessed message.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recover the Poly1305 subkey, and, at that point, tamper with ciphertexts
    and forge new, valid authentication tags.&lt;/p&gt;
&lt;p&gt;This can be done by using algebraic methods on the polynomial of the
authentication tag.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is also a variant of ChaCha20-Poly1305, called XChaCha20-Poly1305, that
features an extended 192-bit nonce (the X stands for ‘extended’). This is
described in an &lt;a href="https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha"&gt;RFC
draft&lt;/a&gt; but so
far it hasn’t been accepted as a standard yet. I won’t cover XChaCha20 in
detail here, because it’s slightly more complex and does not add much to the
topic of this article, but XChaCha20-Poly1305 has better security properties
than ChaCha20-Poly1305, so you should prefer it in your applications if you can
use it. The reason why XChaCha20-Poly1305 has better properties than
ChaCha20-Poly1305 is that, having a longer nonce, the probability of generating
two random nonces with the same value are much lower.&lt;/p&gt;
&lt;h2 id="galoiscounter-mode-gcm"&gt;Galois/Counter Mode (GCM)&lt;/h2&gt;
&lt;p&gt;Let’s now take a look at Galois/Counter Mode (GCM). This is commonly used with
the Advanced Encryption Standard (AES), to construct the authenticated cipher
AES-GCM. One main difference between Poly1305 and GCM is that Poly1305 can work
with any stream or block cipher, while GCM is designed to work with block
ciphers with a block size of 128 bits.&lt;/p&gt;
&lt;p&gt;GCM was proposed by David McGrew and John Viega in 2004 and is standardized in
&lt;a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf"&gt;NIST Special Publication
800-38D&lt;/a&gt;
as well as &lt;a href="https://www.rfc-editor.org/rfc/rfc5288"&gt;RFC 5288&lt;/a&gt;. It takes its
name from Galois fields, also known as &lt;a href="https://en.wikipedia.org/wiki/Finite_field"&gt;finite
fields&lt;/a&gt;, which in turn get their
name from the French mathematician &lt;a href="https://en.wikipedia.org/wiki/%C3%89variste_Galois"&gt;Évariste
Galois&lt;/a&gt;, who introduced the
concept of finite fields as we know them today.&lt;/p&gt;
&lt;p&gt;As we did before with Poly1305, we are going to first see how the keyed hash
function used by GCM works, and then we will see how to use it to construct an
authenticated cipher like AES-GCM on top of it. Before we can do that though,
we need to understand what are finite fields, and what specific type of finite
fields are used in GCM.&lt;/p&gt;
&lt;h3 id="finite-fields-galois-fields"&gt;Finite Fields (Galois Fields)&lt;/h3&gt;
&lt;p&gt;What is a field? A field is a mathematical structure that contains a bunch of
elements, and those elements can interact with each other using addition and
multiplication. For both these operations there’s an identity element and an
inverse element. Addition and multiplication in a field must obey the usual
properties that we’re used to: commutativity, associativity, and
distributivity.&lt;/p&gt;
&lt;p&gt;A well-known example of a field is the field of fractions.  Here is why
fractions form a field:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;strong&gt;elements&lt;/strong&gt; of the field are the fractions;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;addition&lt;/strong&gt; is well-defined: if we add two fractions, we get a fraction out
  (example: $5/3 + 3/2 = 19/6$);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;multiplication&lt;/strong&gt; is also well-defined: if we multiply two fractions, we get
  a fraction out (example: $1/2 \cdot 8/3 = 4/3$);&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;additive identity element&lt;/strong&gt; is 0: if we add 0 to any fraction, we get
  the same fraction back;&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;additive inverse element&lt;/strong&gt; is the negated fraction (example: $5/1$ is
  the additive inverse of $-5/1$ because $5/1 + (-5/1) = 0$);&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;multiplicative identity element&lt;/strong&gt; is 1: multiplying any fraction by 1
  yields the same fraction back;&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;multiplicative inverse element&lt;/strong&gt; is what we get if we swap the
  numerator with the denominator (example: $3/2$ is the multiplicative inverse
  of $2/3$ because $3/2 \cdot 2/3 = 1$)—except for 0, which does not have a
  multiplicative inverse.&lt;/li&gt;
&lt;li&gt;and so on…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On top of addition, multiplication, and inverse elements, we can define derived
operations like subtraction and division. Subtracting $a$ from $b$ is
equivalent to adding $a$ to the additive inverse of $b$: $a - b = a + (-b)$.
Similarly, division can be defined in terms of multiplication with
multiplicative inverses ($a / b = a b^{-1}$).&lt;/p&gt;
&lt;p&gt;Fields are a generalization of structures where addition, multiplication,
subtraction, and division behave according to the rules that we’re used to.
Field elements do not necessarily need to be numbers.&lt;/p&gt;
&lt;p&gt;An example of something that is &lt;em&gt;not&lt;/em&gt; a field is the integers. That’s because
integers don’t have multiplicative inverses (for example, there’s no integer
that multiplied by 5 makes the result equal to 1). However, there is a way to
turn the integers into a field: if we take the integers and a prime number &lt;em&gt;p&lt;/em&gt;,
then we can construct the &lt;strong&gt;field of integers modulo &lt;em&gt;p&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When we work in the integers modulo a prime &lt;em&gt;p&lt;/em&gt;, whenever we see &lt;em&gt;p&lt;/em&gt; appear in
any of our expressions, we can replace it with 0. In other words, in such a
field, &lt;em&gt;p&lt;/em&gt; and 0 are two different ways to write the same element–they are two
different &lt;em&gt;representations&lt;/em&gt; of the same element.&lt;/p&gt;
&lt;p&gt;Here is an example: in the field of integers modulo 7, the expression 5 + 3
equals 1 because&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5 + 3 evaluates to 8;&lt;/li&gt;
&lt;li&gt;8, by definition, is 7 + 1;&lt;/li&gt;
&lt;li&gt;if 7 and 0 are the same element, then 7 + 1 is equal to 0 + 1&lt;/li&gt;
&lt;li&gt;0 + 1 evaluates to 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What we have just seen is that 8 is just a different representation of 1, just
like 7 is a different representation of 0. Different symbols, same object.
Just like, in programming languages, we can have multiple variables point to
the same memory location: here the numbers are like variables, and what they
point to is what really matters.&lt;/p&gt;
&lt;p&gt;In the field of integers modulo 7, the additive inverse for 5 is 2, because 5
+ 2 = 7 = 0. If we manipulate the equation, we get that 5 = −2. In other words,
5 and −2 are two different representations of the same element, and for the
same reason 2 and −5 are also two different representations of the same
element. A similar story holds for multiplication: the multiplicative inverse
for 5 is 3 because: 5 · 3 = 15 = 7 + 7 + 1 = 1, so we can write 5 =
3&lt;sup&gt;−1&lt;/sup&gt; as well as 3 = 5&lt;sup&gt;−1&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;What we have just seen is an example of a &lt;strong&gt;finite field&lt;/strong&gt;. It’s different from
a general field because it contains a finite number of elements (unlike
fractions, which do not have a limit). In the case of the integers modulo 7,
the number of elements is 7, and the list of elements is: {0, 1, 2, 3, 4, 5,
6}, or {−3, −2, −1, 0, 1, 2, 3}, or {0, 1, 2, 3, 2&lt;sup&gt;−1&lt;/sup&gt;,
3&lt;sup&gt;−1&lt;/sup&gt;, 6}, depending on what representation we like the most.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;A few words about terminology, notation, and equivalences of finite fields&lt;/summary&gt;
&lt;p&gt;There can be many ways to construct a finite field (or even a general field). I
have given an example using numbers, but a field does not necessarily need to
be formed from numbers. We can also use vectors, matrices, polynomials, and
anything you would like. As long as addition, multiplication, identity
elements, and inverse elements are well-defined, you can get a field. Using
programming terms, you can think of a field as an interface or a trait that can
have arbitrary implementations.&lt;/p&gt;
&lt;p&gt;An important result in algebra is that finite fields with the same number of
elements are unique up to isomorphism. This means that if two finite fields the
same number of elements, then there is an equivalence relation between the two.
The number of elements of a field is therefore enough to define a field. It’s
not enough to tell us what the elements of the field look like, or how they can
be represented, but it’s enough to know how it behaves. To denote a field with
$n$ elements, there are two major notations: $GF(n)$ and $\mathbb{F}_{n}$.&lt;/p&gt;
&lt;p&gt;Another important result in algebra is that $n$ may be either a prime number,
or a power of a prime. For example, we can have finite fields with 2 elements,
or with 9 (= 3&lt;sup&gt;2&lt;/sup&gt;) elements, but we cannot have a field with 6 (= 2·3)
elements. For this reason, you will often find finite fields denoted as
$GF(p^k)$ or $\mathbb{F}_{p^k}$, where $p$ is a prime and $k$ is an integer
greater than 0. The prime $p$ is called &lt;em&gt;characteristic&lt;/em&gt; of the field, while $n
= p^k$ is called &lt;em&gt;order&lt;/em&gt; of the field.&lt;/p&gt;
&lt;p&gt;Some common fields also have their own notation: in particular, the field of
integers modulo a prime $p$ is denoted as $Z/pZ$. This notation encodes the
“building instructions” to construct the field, in fact:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$Z$ denotes the integers: $Z = \{\dots, -2, -1, 0, 1, 2, \dots\}$;&lt;/li&gt;
&lt;li&gt;$pZ$ denotes the integers multiplied by $p$: $pZ = \{\dots, -2p, -p, 0, p,
  2p\}$ (example: $2Z = \{\dots, -4, -2, 0, 2, 4, \dots\}$);&lt;/li&gt;
&lt;li&gt;$A/B$ is a &lt;em&gt;quotient&lt;/em&gt;. This is a way to define an equivalence relation
  between elements, and its meaning is: within $A/B$, all the elements of $B$
  are equivalent to 0. In the case of $Z/pZ$, all the multiples of $p$ are
  equivalent to 0, which is indeed what happens with the integers modulo $p$.
  The way I described this equivalence relation earlier is by saying that
  multiples of $p$ are different representations for 0.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the integers modulo a power of a prime ($Z/p^kZ$, with $k$ greater
than 1) do not form a field. The problem is that elements in $Z/p^kZ$ sometimes
do not have a multiplicative inverse. For example, in $Z/4Z$, the number 2 does
not have a multiplicative inverse (there is no element that multiplied by 2
gives 1). A field $GF(p^k)$ with $k$ greater than 1 needs to be constructed in
a different way. One such way is to use polynomials, as described in the next
section.&lt;/p&gt;
&lt;/details&gt;
&lt;h4 id="polynomial-fields"&gt;Polynomial fields&lt;/h4&gt;
&lt;p&gt;Let’s now move our attention from integers to polynomials, like this one:&lt;/p&gt;
&lt;p&gt;$$x^7 + 5x^3 - 9x^2 + 2x + 1$$&lt;/p&gt;
&lt;p&gt;Polynomials are a sum of coefficients multiplied by a variable (usually denoted
by the letter &lt;em&gt;x&lt;/em&gt;) raised to an integral power.&lt;/p&gt;
&lt;p&gt;Let’s restrict our view to polynomials that have integer coefficients, like the
one shown above. Something that is &lt;em&gt;not&lt;/em&gt; a polynomial with integer coefficients
is $1/2 x^2 + x$, because it has a fraction in it.&lt;/p&gt;
&lt;p&gt;Integers and polynomials with integer coefficients are somewhat similar to each
other. They kinda behave the same in many aspects. One important property of
integers is the &lt;a href="https://en.wikipedia.org/wiki/Fundamental_theorem_of_arithmetic"&gt;unique factorization
theorem&lt;/a&gt;: if
we have an integer, there’s a way to write it as a multiplication of some
primary factors. For example, the integer 350 can be factored as the
multiplication of 2, 5, 5, and 7.&lt;/p&gt;
&lt;p&gt;$$350 = 7 \cdot 5 \cdot 5 \cdot 2$$&lt;/p&gt;
&lt;p&gt;This factorization is &lt;em&gt;unique&lt;/em&gt;: we can change the order of the factors, but
it’s not possible to obtain a different set of factors (there’s no way to make
the number 3 appear in the factorization of 350, or to make the number 7
disappear).&lt;/p&gt;
&lt;p&gt;Polynomials with integer coefficients also have a unique factorization. In the
case of integers, We call the unique factors “prime numbers”; in the case of
polynomials we have “irreducible polynomials”. And just like we can have a
field of integers modulo a prime, we can have a &lt;strong&gt;field of polynomials modulo
an irreducible polynomial&lt;/strong&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Integers&lt;/th&gt;
&lt;th&gt;Polynomials (with integer coefficients)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Unique factorization: $42 = 7 \cdot 3 \cdot 2$&lt;/td&gt;
&lt;td&gt;Unique factorization: $x^3 - 1 = (x^2 + x + 1)(x - 1)$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Prime numbers: 2, 3, 5, 7, 11, …&lt;/td&gt;
&lt;td&gt;Irreducible polynomials: $x + 1$, $x^2 - 2$, $x^2 + x + 1$, …&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Integers modulo a prime number&lt;/td&gt;
&lt;td&gt;Polynomials modulo an irreducible polynomial&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Let’s take a look at how arithmetic in polynomial fields work.  Let’s take, for
example, the field of polynomials with integer coefficients modulo $x^3 + x +
1$, and try to compute the result of $(x^2 + 1)(x^2 + 2)$. If we expand the
expression, we get:&lt;/p&gt;
&lt;p&gt;$$(x^2 + 1)(x^2 + 2) = x^4 + 3x^2 + 2$$&lt;/p&gt;
&lt;p&gt;This expression can be &lt;em&gt;reduced&lt;/em&gt;. Reducing a polynomial expression is the
equivalent of what we were doing with integers modulo a prime, when we were
saying that 8 = 7 + 1 = 1 (mod 7). That “conversion” from 8 to 1 is the
equivalent of the reduction that we’re talking about here.&lt;/p&gt;
&lt;p&gt;To reduce $x^4 + 3x^2 + 2$, first note that $x^4 = x \cdot x^3$. Also note that
$x^3 = x^3 + x + 1 - x - 1$. Here we have just added and removed the term $x +
1$: the result hasn’t changed, but now the irreducible polynomial $x^3 + x + 1$
appears in the expression, and so we can substitute it with 0. Putting
everything together, we get:&lt;/p&gt;
&lt;p&gt;$$\begin{align*}
(x^2 + 1)(x^2 + 2) &amp;amp; = x^4 + 3x^2 + 2 \\
                   &amp;amp; = x \cdot x^3 + 3x^2 + 2 \\
                   &amp;amp; = x \cdot (x^3 + x + 1 - x - 1) + 3x^2 + 2 \\
                   &amp;amp; = x \cdot (0 - x - 1) + 3x^2 + 2 \\
                   &amp;amp; = -x^2 - x + 3x^2 + 2 \\
                   &amp;amp; = 2x^2 - x + 2
\end{align*}$$&lt;/p&gt;
&lt;p&gt;It’s interesting to note that, if the polynomial field is formed by an
irreducible polynomial with degree $n$, then all the polynomials in that field
will all have degree less than $n$. That’s because if any $x^n$ (or higher)
appears in a polynomial expression, then we can use the substitution trick I
just showed to reduce its degree.&lt;/p&gt;
&lt;h4 id="binary-fields"&gt;Binary fields&lt;/h4&gt;
&lt;p&gt;Let’s now look at polynomials where &lt;strong&gt;coefficients are from the field of
integers modulo 2&lt;/strong&gt;, meaning that they can be either 0 or 1. This is an example
of such a polynomial:&lt;/p&gt;
&lt;p&gt;$$x^7 + x^4 + x^2 + 1$$&lt;/p&gt;
&lt;p&gt;or, in a more explicit form, where we can clearly see all the coefficients:&lt;/p&gt;
&lt;p&gt;$$1 x^7 + 0 x^6 + 0 x^5 + 1 x^4 + 0 x^3 + 1 x^2 + 0 x^1 + 1 x^0$$&lt;/p&gt;
&lt;p&gt;These are called &lt;strong&gt;binary polynomials&lt;/strong&gt;. It’s interesting to note that if we
ignore the variables and the powers, and keep only the coefficients, then what
we get is a &lt;strong&gt;bit string&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;$$(1 0 0 1 0 1 0 1)$$&lt;/p&gt;
&lt;p&gt;This suggests that there’s an interesting duality between binary polynomials
and bit strings. This means, in particular, that binary polynomials can be
represented in a very compact and natural way on computers.&lt;/p&gt;
&lt;p&gt;The duality between binary polynomials and bit strings also suggests that
perhaps we can use bitwise operations to perform arithmetic on binary
polynomials. And this turns out to be true, in fact:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;binary polynomial addition can be computed using the XOR on the two
  corresponding bit strings;&lt;/li&gt;
&lt;li&gt;binary polynomial multiplication can be computed using XOR, AND and
  bit-shifting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Computers are pretty fast at performing these bitwise operations, and this
makes binary polynomials quite attractive for use in computer algorithms and
cryptography.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Arithmetic with binary polynomials&lt;/summary&gt;
&lt;p&gt;The arithmetic of such polynomials is quite interesting: in fact, because $1 +
1 = 0$ (modulo 2), then also $x^k + x^k = 0$, in fact:&lt;/p&gt;
&lt;p&gt;$$1 \cdot x^k + 1 \cdot x^k = (1 + 1) x^k = 0 \cdot x^k = 0$$&lt;/p&gt;
&lt;p&gt;It’s easy to see that addition modulo 2 is equivalent to the XOR binary
operator. And addition of two binary polynomials is equivalent to the bitwise
XOR of their corresponding bit strings:&lt;/p&gt;
&lt;p&gt;$$\begin{array}{ccccc}
(x^3 + x^2 + 1) &amp;amp; +      &amp;amp; (x^2 + x)    &amp;amp; = &amp;amp; x^3 + x + 1 \\
\updownarrow    &amp;amp;        &amp;amp; \updownarrow &amp;amp;   &amp;amp; \updownarrow \\
(1101)          &amp;amp; \oplus &amp;amp; (0110)       &amp;amp; = &amp;amp; (1011)
\end{array}$$&lt;/p&gt;
&lt;p&gt;Multiplication of binary polynomials can also be implemented as a bitwise
operation on bit strings. First, note that multiplying a polynomial by a
monomial is equivalent to bit-shifting:&lt;/p&gt;
&lt;p&gt;$$\begin{array}{ccccc}
(x^3 + x + 1) &amp;amp; \cdot  &amp;amp; x^2          &amp;amp; = &amp;amp; x^5 + x^3 + x^2 \\
\updownarrow  &amp;amp;        &amp;amp; \updownarrow &amp;amp;   &amp;amp; \updownarrow \\
(1011)        &amp;amp; \ll    &amp;amp; 2            &amp;amp; = &amp;amp; (101100)
\end{array}$$&lt;/p&gt;
&lt;p&gt;Then note that multiplication of two polynomials can be expressed as the sum of
multiplications by monomials:&lt;/p&gt;
&lt;p&gt;$$(x^3 + 1)(x^2 + x + 1) = (x^3 + 1) \cdot x^2 + (x^3 + 1) \cdot x^1 + (x^3 + 1) \cdot x^0$$&lt;/p&gt;
&lt;p&gt;Putting everything together, we have multiplications by monomials (equivalent
to bit-shifts) and sums (equivalent to bitwise XOR). This suggests that
multiplication can be implemented on top of bitwise XOR and bit-shifting.&lt;/p&gt;
&lt;p&gt;Here is some Python code to implement binary polynomial multiplication, where
each polynomial is represented compactly as an &lt;code&gt;int&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Compute a*b, where a and b are two integers representing binary&lt;/span&gt;
&lt;span class="sd"&gt;    polynomials.&lt;/span&gt;

&lt;span class="sd"&gt;    a and b are expected to have their most significant bit set to&lt;/span&gt;
&lt;span class="sd"&gt;    the monomial with the highest power. For example, the polynomial&lt;/span&gt;
&lt;span class="sd"&gt;    x^8 is represented as the integer 0b10000.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;^=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Other than XOR and bit-shifting, this code also uses AND to “query” whether a
certain monomial is present or not.&lt;/p&gt;
&lt;p&gt;Here is an example of how to use the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mb"&gt;0b0101_0111&lt;/span&gt;              &lt;span class="c1"&gt;# x^6 + x^4 + x^2 + x + 1&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mb"&gt;0b0001_1010&lt;/span&gt;              &lt;span class="c1"&gt;# x^4 + x^3 + x&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mb"&gt;0b0111_0110_0110&lt;/span&gt; &lt;span class="c1"&gt;# x^10 + x^9 + x^8 + x^6 + x^5 + x^2 + x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/details&gt;
&lt;p&gt;Now that we have introduced binary polynomials, we can of course form &lt;strong&gt;binary
polynomials modulo a binary irreducible polynomial&lt;/strong&gt;. These form a finite
field, which is more concisely called: &lt;strong&gt;binary field&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Note that in a binary field where the modulo is an irreducible polynomial of
degree $n$, all polynomials in the field can be represented as $n$-bit strings,
and all $n$-bit strings have a corresponding binary polynomial in the field.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Arithmetic in binary fields&lt;/summary&gt;
&lt;p&gt;If we have three integers $a$, $b$, and $p$, we can compute $(a + b) \bmod{p}$
or $a \cdot b \bmod{p}$ by performing the binary operation (addition or
multiplication) and then taking the remainder of the division by $p$. This is a
method that returns the results of addition or multiplication using a
representation with the lowest number of digits possible.&lt;/p&gt;
&lt;p&gt;What if instead of having 3 integers we have three binary polynomials $A$, $B$,
and $P$ and we want to compute $(A + B) \bmod{P}$ or $A \cdot B \bmod{P}$? It
turns out that these operations can be implemented with code that is even
easier than the integer counterpart: no division needs to be involved!&lt;/p&gt;
&lt;p&gt;Let’s start with addition: we have already seen that addition with binary
polynomials can be implemented with a simple XOR operation. This means that if
the degree of $A$ and $B$ is lower than the degree of $P$, then the result of
$A + B$ is also going to have degree less than $P$, hence no reduction is
needed. We can use the result as-is, without any transformation: &lt;strong&gt;adding two
binary field elements can be implemented with a single XOR operation&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;With multiplication the story is different: the product $A \cdot B$ may have
degree equal to or higher than $P$. For example, if $A = B = x$ and $P = x^2 +
1$, the product $A \cdot B$ is equal to $x^2$, which has the same degree as
$P$. We need to find a way to efficiently reduce the higher-degree terms of
this product. To see one way to do that, note that we can write $P$ like this:&lt;/p&gt;
&lt;p&gt;$$P = x^n + Q$$&lt;/p&gt;
&lt;p&gt;where $n$ is the degree of $P$ (the maximum power of $P$) and $Q$ is another
binary polynomial, with degree strictly lower than $n$. Rearranging the
equation, we get:&lt;/p&gt;
&lt;p&gt;$$x^n = P + Q$$&lt;/p&gt;
&lt;p&gt;Note that subtraction and addition are the same operations in a binary field.
Because $P$ equals 0, we can write:&lt;/p&gt;
&lt;p&gt;$$x^n = Q$$&lt;/p&gt;
&lt;p&gt;This equivalence gives us a way to eliminate higher-level terms that appear
during multiplication: whenever we see an $x^n$ appearing in the result, we can
remove that term and add $Q$ instead. One way to do that, using binary strings,
is to discard the highest bit (the one corresponding to $x^n$) and XOR with
the binary string corresponding to $Q$.&lt;/p&gt;
&lt;p&gt;Another way to do it is to just add $P$ (XOR by the binary string corresponding
to $P$). This is equivalent to adding 0, results in the more compact
representation that we’re interested in.&lt;/p&gt;
&lt;p&gt;We could use similar tricks to eliminate terms like $x^{n+1}$, but these tricks
are not necessary if we eliminate $x^n$ terms as soon as they appear in an
iterative way.&lt;/p&gt;
&lt;p&gt;Here is some Python code for multiplication in binary fields that uses the “add
$P$” trick just described:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Compute a*b modulo p, where a, b and c are three integers representing&lt;/span&gt;
&lt;span class="sd"&gt;    binary polynomials.&lt;/span&gt;

&lt;span class="sd"&gt;    a, b and p are expected to have their most significant bit set to the&lt;/span&gt;
&lt;span class="sd"&gt;    highest power monomial. For example, the polynomial x^8 is represented as&lt;/span&gt;
&lt;span class="sd"&gt;    0b10000.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;bit_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bit_length&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bit_length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bit_length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bit_length&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;^=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;^=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bit_length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code is essentially the same as the binary polynomial multiplication code we had before, except for this line in the &lt;code&gt;for&lt;/code&gt; loop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;^=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bit_length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This line is what “adds $P$” whenever adding the shifted $A$ would result in a
$x^n$ term to appear.&lt;/p&gt;
&lt;p&gt;Again, we achieved implementing &lt;strong&gt;multiplication using only XOR, AND and
bit-shifting&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Note that the binary polynomial $P$ here does not necessarily need to be an
irreducible polynomial for this algorithm to work. However, the resulting
algebraic structure won’t be a field unless $P$ is irreducible. A similar story
holds for integers: we can have integers modulo a non-prime number, but that’s
not a field.&lt;/p&gt;
&lt;/details&gt;
&lt;h3 id="the-ghash-keyed-hash-function"&gt;The GHASH keyed hash function&lt;/h3&gt;
&lt;p&gt;GCM uses a binary field. The irreducible binary polynomial that defines the
binary field used by GCM is:&lt;/p&gt;
&lt;p&gt;$$P = x^{128} + x^7 + x^2 + x + 1$$&lt;/p&gt;
&lt;p&gt;We will call this field the &lt;em&gt;GCM field&lt;/em&gt;. Note that this polynomial has degree
128, hence the GCM field elements can be represented as 128-bit strings, and
each 128-bit string has a corresponding element in the GCM field.&lt;/p&gt;
&lt;p&gt;The keyed hash function used by GCM is called GHASH and takes as input a
128-bit key. We will call this key $H$. This key is interpreted as an element
of the GCM field.&lt;/p&gt;
&lt;p&gt;The message to authenticate is split into blocks of 128 bits each: $M_1$,
$M_2$, $M_3$, … $M_n$. If the length of the message is not a multiple of 128
bits, then the last block is padded with zeros. Each block of message is also
interpreted as an element of the GCM field.&lt;/p&gt;
&lt;p&gt;Here is how the authentication tag is computed from $H$ and the padded message
blocks $M_1$, …, $M_n$:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The initial state (a GCM field element) is initialized to 0: $A_0 = 0$.&lt;/li&gt;
&lt;li&gt;For every block of message $M_i$, the next state $A_i$ is computed as $A_i =
  (A_{i-1} + M_i) \cdot H \bmod{P}$.&lt;/li&gt;
&lt;li&gt;The final state $A_n$ is returned as a 128-bit string.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What this function is doing is computing the following polynomial in $H$:&lt;/p&gt;
&lt;p&gt;$$\begin{align*}
  Tag
  &amp;amp; = (((M_1 \cdot H + M_2) \cdot H + \cdots M_n) \cdot H) \bmod{P} \\
  &amp;amp; = (M_1 H^n + M_2 H^{n-1} + \cdots M_n H) \bmod{P}
\end{align*}$$&lt;/p&gt;
&lt;p&gt;This construction is somewhat similar to the one from Poly1305, although there
are important differences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Poly1305, the elements of the tag polynomial are integers modulo a prime,
  in GHASH they are elements of a binary field.&lt;/li&gt;
&lt;li&gt;GHASH does not perform any step to encode the length of the message, hence
  the tag for an empty message will be the same as the tag for a sequence of
  zero blocks. We will see later that GCM fixes this problem by appending the
  length of the message to the end of the input passed to GHASH.&lt;/li&gt;
&lt;li&gt;Most importantly, the final $Tag$ polynomial is a polynomial in one unknown,
  and as such $H$ may be easily recoverable using algebraic methods. For this
  reason, &lt;strong&gt;GHASH is not suitable as a secure one-time authenticator&lt;/strong&gt;. We will
  see that GCM fixes this problem by encrypting the output of GHASH.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="use-of-gcm-with-aes-aes-gcm"&gt;Use of GCM with AES (AES-GCM)&lt;/h3&gt;
&lt;p&gt;GCM is the combination of a block cipher, Counter Mode (CTR), and the GHASH
function that we have just seen. The block cipher is often AES. When we combine
AES with GCM, the what we get is AES-GCM, which is described below. However the
block cipher does not necessarily need to be AES: what is important is that the
block size of the cipher is 128 bits, and that’s because GHASH only works on
128-bit blocks.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;inputs to the AES-GCM encryption function&lt;/strong&gt; are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a secret key (the length of the key depends on the variant of AES used: if
  AES-128, this will be 128 bits);&lt;/li&gt;
&lt;li&gt;a 96-bit nonce;&lt;/li&gt;
&lt;li&gt;a variable-length plaintext message.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;outputs of the AES-GCM encryption function&lt;/strong&gt; are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a variable-length ciphertext (same length as the input plaintext);&lt;/li&gt;
&lt;li&gt;a 128-bit authentication tag.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;AES-GCM decryption function&lt;/strong&gt; will accept the same secret key, nonce,
ciphertext, and authentication tag as the input, and produce either the
plaintext or an error as the output. The error is returned in case the
authentication fails.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/aes-gcm-encryption.svg" alt="Diagram of data flow during encryption with AES-GCM"&gt;
  &lt;figcaption&gt;Data flow during an AES-GCM encryption. This shows the inputs in &lt;span style="color:#3465a4;font-weight:bold"&gt;blue&lt;/span&gt;, the outputs in &lt;span style="color:#73d216;font-weight:bold"&gt;green&lt;/span&gt;, and the intermediate objects in &lt;span style="color:#cc0000;font-weight:bold"&gt;red&lt;/span&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;AES-GCM works in the following way:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;GHASH subkey&lt;/strong&gt; $H$ is generated by encrypting a zero-block: $H =
    \operatorname{Encrypt}(key, \underbrace{000\dots0}_\text{128 bits})$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The block cipher &lt;strong&gt;AES&lt;/strong&gt; is &lt;strong&gt;initialized&lt;/strong&gt; in Counter Mode (AES-CTR) with
    the key, the nonce, and a 32-bit, big-endian counter starting at &lt;strong&gt;2&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;plaintext&lt;/strong&gt; is &lt;strong&gt;encrypted&lt;/strong&gt; using the instance of AES-CTR just
    created.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;GHASH&lt;/strong&gt; function is run with the following inputs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the subkey $H$, computed in step 1;&lt;/li&gt;
&lt;li&gt;the ciphertext padded with zeros to make its length a multiple of 16
  bytes (128 bits), concatenated to the length (in bits) of the ciphertext
  represented as a 128-bit big-endian integer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The result is a 128-bit block $S = \operatorname{GHASH}(H, ciphertext || padding || length)$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The AES-CTR &lt;strong&gt;counter&lt;/strong&gt; is set to &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The block $S$ is then &lt;strong&gt;encrypted&lt;/strong&gt; using AES-CTR. The result of the
    encryption is the &lt;strong&gt;authentication tag&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Note that, because $S$ matches the block size of the cipher, this
encryption won’t cause the counter value 2 to be reused.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The ciphertext and authentication tag are returned.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is how AES-GCM and GHASH can be implemented in Python, using the AES
implementation from &lt;a href="https://pypi.org/project/pycryptodome/"&gt;pycryptodome&lt;/a&gt;
(usual disclaimer: this code is for educational purposes, and it’s not
necessarily secure or optimized for performance):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Crypto.Cipher&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AES&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Compute a*b in the GCM field, where a and b are two integers representing&lt;/span&gt;
&lt;span class="sd"&gt;    elements of the GCM field.&lt;/span&gt;

&lt;span class="sd"&gt;    a and b are expected to have their least significant bit set to the highest&lt;/span&gt;
&lt;span class="sd"&gt;    power monomial. For example, the polynomial x^125 is represented as 0b100.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;bit_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;
    &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xe1000000000000000000000000000000&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bit_length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bit_length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bit_length&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;^=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pad_block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Pad data with zero bytes so that the resulting length is a multiple of 16&lt;/span&gt;
&lt;span class="sd"&gt;    bytes (128 bits).&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;iter_blocks_padded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Split the given data into blocks of 16 bytes (128 bits) each, padding the&lt;/span&gt;
&lt;span class="sd"&gt;    last block with zeros if necessary.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;pad_block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ghash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subkey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;subkey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subkey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;big&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;subkey&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iter_blocks_padded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;big&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subkey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;big&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;aes_gcm_encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;

    &lt;span class="c1"&gt;# Initialize a raw AES instance and encrypt a 16-byte block of all zeros to&lt;/span&gt;
    &lt;span class="c1"&gt;# derive the GHASH subkey H&lt;/span&gt;
    &lt;span class="n"&gt;cipher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MODE_ECB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Encrypt the message with AES in CTR mode, with the counter composed by&lt;/span&gt;
    &lt;span class="c1"&gt;# the concatenation of the 12 byte (96 bits) nonce and a 4 byte (32 bits)&lt;/span&gt;
    &lt;span class="c1"&gt;# integer, starting from 2&lt;/span&gt;
    &lt;span class="n"&gt;cipher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MODE_CTR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;initial_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ciphertext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Compute the GHASH of the ciphertext plus the ciphertext length in bits&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ghash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;big&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="c1"&gt;# Encrypt the GHASH value using AES in CTR mode, with the counter composed&lt;/span&gt;
    &lt;span class="c1"&gt;# by the concatenation of the 12 byte (96 bits) nonce and a 4 byte (32&lt;/span&gt;
    &lt;span class="c1"&gt;# bits) integer set at 1. The GHASH value fits in one block, so the counter&lt;/span&gt;
    &lt;span class="c1"&gt;# won&amp;#39;t be increased during this round of encryption&lt;/span&gt;
    &lt;span class="n"&gt;cipher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MODE_CTR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;initial_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;aes_gcm_decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;

    &lt;span class="c1"&gt;# Compute the GHASH subkey, the GHASH value, and the authentication tag, in&lt;/span&gt;
    &lt;span class="c1"&gt;# the same exact way as it was done during encryption&lt;/span&gt;
    &lt;span class="n"&gt;cipher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MODE_ECB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ghash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pad_block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;big&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;cipher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MODE_CTR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;initial_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;expected_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Compare the input tag with the generated tag. If they&amp;#39;re different, the&lt;/span&gt;
    &lt;span class="c1"&gt;# plaintext must not be returned to the caller&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;expected_tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;authentication failed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# The two tags match; decrypt the plaintext and return it to the caller.&lt;/span&gt;
    &lt;span class="c1"&gt;# Note that, because AES-CTR is a symmetric cipher, there is no difference&lt;/span&gt;
    &lt;span class="c1"&gt;# between the encrypt and decrypt method: here we are reusing the same&lt;/span&gt;
    &lt;span class="c1"&gt;# exact code used during decryption&lt;/span&gt;
    &lt;span class="n"&gt;cipher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MODE_CTR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;initial_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And here is how the code can be used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromhex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;nonce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromhex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0123456789abcdef01234567&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I went to the zoo yesterday but not today&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aes_gcm_encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ciphertext: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;       tag: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;decrypted_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aes_gcm_decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; plaintext: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;decrypted_message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;decrypted_message&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This snippet produces the following output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ciphertext: e0c32db2962f9b729c69028d9a1fdfb2c93839fc1188f314c58ee97fd6a242404953bb208df609a33c
       tag: 9fa6fe2f77a0c98282868924ace0e4ec
 plaintext: b&amp;#39;I went to the zoo yesterday but not today&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the same output we would obtain by using the AES-GCM implementation
from pycryptodome directly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Crypto.Cipher&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AES&lt;/span&gt;

&lt;span class="n"&gt;cipher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MODE_GCM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encrypt_and_digest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ciphertext: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;       tag: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nonce reuse is catastrophic for AES-GCM in two ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Because the ciphertext produced by AES-GCM is just a variant of AES-CTR,
  nonce reuse with GCM can have the same consequences as nonce reuse with
  AES-CTR, or any other stream cipher: if someone is able to guess the
  plaintext, they can recover the random stream, and use that to decrypt other
  messages (or portions of them).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the same nonce is used twice or more, the GHASH subkey $H$ will always be
  the same. Even if the output of GHASH is encrypted in step 7, we can use the
  XOR of two authentication tags to “cancel” the encryption and obtain a
  polynomial in $H$. From there, we can use algebraic methods to recover $H$.
  This gives us the ability to forge new, valid authentication tags.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s worth mentioning that there’s a variant of AES-GCM, called AES-GCM-SIV,
(Synthetic Initialization Vector) specified in &lt;a href="https://www.rfc-editor.org/rfc/rfc8452"&gt;RFC
8452&lt;/a&gt;. This differs from AES-GCM in
that it uses a little-endian version of GHASH called POLYVAL (which is faster
on modern CPUs), and in that it allows nonce reuse without the two catastrophic
consequences that I mentioned above.&lt;/p&gt;
&lt;p&gt;(Nonce reuse with AES-GCM-SIV however still presents a problem, just not as
serious as the two ones above: specifically, it breaks &lt;a href="https://en.wikipedia.org/wiki/Ciphertext_indistinguishability"&gt;ciphertext
indistinguishability&lt;/a&gt;.)&lt;/p&gt;
&lt;h1 id="authenticated-encryption-with-associated-data-aead"&gt;Authenticated Encryption with Associated Data (AEAD)&lt;/h1&gt;
&lt;p&gt;The way I have described authenticated encryption, and in particular the
constructions ChaCha20-Poly1305 and AES-GCM, is accurate, but incomplete. What
I have told you is that when you use an authenticated encryption cipher, the
ciphertext is checked for integrity and authenticity. But we can use the same
technique to authenticate &lt;em&gt;anything&lt;/em&gt;, not just ciphertexts: we can, for example,
authenticate some plaintext data, or authenticate a piece of plaintext data and
a piece of ciphertext altogether.&lt;/p&gt;
&lt;p&gt;When we use a method to authenticate a plaintext message only, what we get is a
Message Authentication Code (MAC). We don’t use the word “encryption” in this
context, because the confidentiality of the message is not ensured (only its
authenticity).&lt;/p&gt;
&lt;p&gt;When we use a method to authenticate both a ciphertext and a plaintext message,
what we get is &lt;strong&gt;Authenticated Encryption with Associated Data (AEAD)&lt;/strong&gt;. In
this construction, there are two messages involved: one to be encrypted
(resulting in a ciphertext), and one to be kept in plaintext. The plaintext
message is called “associated data” (AD) or “additional authenticated data”
(AAD). Both the ciphertext and the associated data are authenticated at
encryption time, so their integrity and authenticity will be enforced.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;inputs to the encryption function&lt;/strong&gt; of an AEAD cipher are, generally
speaking:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a key;&lt;/li&gt;
&lt;li&gt;a nonce;&lt;/li&gt;
&lt;li&gt;the additional data;&lt;/li&gt;
&lt;li&gt;the message to encrypt.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;outputs of the encryption&lt;/strong&gt; are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the ciphertext;&lt;/li&gt;
&lt;li&gt;the authentication tag.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that there’s only one authentication tag that covers both the additional
data and the ciphertext.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;inputs to the decryption&lt;/strong&gt; function are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the key used for encryption;&lt;/li&gt;
&lt;li&gt;the nonce used for encryption;&lt;/li&gt;
&lt;li&gt;the additional data used for encryption;&lt;/li&gt;
&lt;li&gt;the ciphertext.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And the &lt;strong&gt;output of the decryption&lt;/strong&gt; is either an error or the decrypted
message.&lt;/p&gt;
&lt;p&gt;It’s important to note that the associated data must be both at encryption time
and decryption time. Changing a single bit of it will make the entire
decryption operation fail.&lt;/p&gt;
&lt;p&gt;Both ChaCha20-Poly1305 and AES-GCM (and their variants, XChaCha20-Poly1305 and
AES-GCM-SIV) are AEAD ciphers. Here’s how they implement AEAD:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When the Poly1305 or GHASH authenticator is first initialized, they are fed
  the additional data, padded with zeros to make its size a multiple of 16
  bytes (128 bits).&lt;/li&gt;
&lt;li&gt;Then the padded ciphertext is fed into the authenticator.&lt;/li&gt;
&lt;li&gt;The length of the additional data and the length of the ciphertext are
  represented as two 64-bit integers, concatenated, and fed into the
  authenticator.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/chacha20-poly1305-aead-encryption.svg" alt="Diagram of data flow during encryption with ChaCha20-Poly1305, including the Associated Data (AE)"&gt;
  &lt;figcaption&gt;Updated data flow during a ChaCha20-Poly1305 encryption which shows where the Associated Data (AE) is placed.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/aes-gcm-aead-encryption.svg" alt="Diagram of data flow during encryption with AES-GCM, including the Associated Data (AE)"&gt;
  &lt;figcaption&gt;Updated data flow during an AES-GCM encryption which shows where the Associated Data (AE) is placed.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If the additional data is empty, then what you get are exactly the
constructions that I described earlier in this article.&lt;/p&gt;
&lt;p&gt;Authenticated Encryption with Associated Data is useful in situations where you
want to encode some metadata along with your encrypted data. For example: an
identifier for the resource that is encrypted, or the type of data encrypted
(text, image, video, …), or some information that indicates what key and
algorithm was used to encrypt the resource, or maybe the expiration of the
data. The associated data is in plaintext so systems that do not have access to
the secret key can gather some properties about the encrypted resource. It must
however be understood that the associated data cannot be trusted until it’s
verified using the secret key. Systems that analyze the associated data must be
designed in such a way that, if the associated data is tampered, nothing bad
will happen, and such tampering attempt will be detected sooner or later.&lt;/p&gt;
&lt;h1 id="a-word-of-caution"&gt;A word of caution&lt;/h1&gt;
&lt;p&gt;Something very important to understand is that when using authenticated
encryption ciphers like ChaCha20-Poly1305 or AES-GCM, &lt;strong&gt;decryption can in
theory succeed even if the verification of the authentication tag fails&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, we can decrypt a ciphertext encrypted with ChaCha20-Poly1305 by
using ChaCha20 and ignoring the authentication tag. Similarly, we can decrypt a
ciphertext encrypted with AES-GCM by using AES-CTR and, again, ignoring the
authentication tag. This possibility opens the doors to all the nasty scenarios
that we have seen at the beginning of this article, removing all the benefits
of authenticated encryption.&lt;/p&gt;
&lt;p&gt;Perhaps the most important thing to remember when using authenticated
encryption is: &lt;strong&gt;never use decrypted data until you have verified its
authenticity&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Why am I emphasizing this? Because some AE or AEAD implementations do return
plaintext bytes &lt;em&gt;before&lt;/em&gt; verifying their authenticity.&lt;/p&gt;
&lt;p&gt;The code samples that I have provided do the following: they first calculate
the authentication tag, compare it to the input tag, and only if the comparison
succeeds they perform the decryption. This is a simple approach, but it may be
expensive when encrypting large amounts of data (for example: several
gigabytes). The reason why this approach is expensive is that, if the
ciphertext is too large, it may not fit all in memory, and the ciphertext would
have to be read from the storage device twice: once for calculating the tag,
and once for decrypting the ciphertext.  Also, chances are that by the time the
application has computed the tag, the underlying ciphertext may have changed
without detection.&lt;/p&gt;
&lt;p&gt;What some authenticated encryption implementations do when dealing with large
amounts of data is that they calculate the tag &lt;em&gt;and&lt;/em&gt; perform the decryption in
parallel. They read the ciphertext chunk-by-chunk, and pass each chunk to both
the authenticator and the decryption function, returning a chunk of decrypted
bytes to the caller at each iteration. Only at the end, when the full
ciphertext has been read, the authenticity is checked, and the application may
return an error only at that point. With such implementations, it is imperative
that the exit status of the application is checked before using any of the
decrypted bytes.&lt;/p&gt;
&lt;p&gt;An implementation that works like that (returning decrypted bytes before
authentication is complete) is GPG. Here is an example of the output that GPG
produces when decrypting a tampered message:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gpg: AES256.CFB encrypted data
gpg: encrypted with 1 passphrase
This is a very long message.
gpg: WARNING: encrypted message has been manipulated!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The decrypted message (“This is a very long message”) got printed, together
with a warning, and the exit status is 2, indicating that an error occurred. It
is important in this case that the decrypted message is not used in any way.&lt;/p&gt;
&lt;p&gt;Other implementations avoid this problem by simply not encrypting large amounts
of data. If given a large file to encrypt, the file is first split into
multiple chunks of a few KiB, then each chunk is encrypted independently, with
its own nonce and authentication tag. Because each chunk is small,
authentication and decryption can happen in memory, one before the other. If a
chunk was tampered, decryption would stop, returning truncated output, but
never tampered output. It’s still important to check the exit status of such an
implementation, but the consequences are less catastrophic than before. The
drawback of this approach is that the total size of the ciphertext increases,
because each chunk requires a nonce, an authentication tag, and some
information about the position of the chunk (to prevent the chunks from being
reordered). Storing the nonces or the positions can be avoided by using an
algorithm to generate them on the fly, but storing the tag cannot be avoided.&lt;/p&gt;
&lt;p&gt;The method of splitting that I have just described (of splitting long messages
into chunks that are individually encrypted and authenticated) is used for
example in &lt;a href="https://en.wikipedia.org/wiki/Transport_Layer_Security"&gt;TLS&lt;/a&gt;, as
well as the command line tool &lt;a href="https://github.com/FiloSottile/age"&gt;AGE&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="summary-and-final-considerations"&gt;Summary and final considerations&lt;/h1&gt;
&lt;p&gt;At the beginning of this article we have seen some risks of using bare
encryption ciphers: one of them in particular was malleability, that is: the
property that ciphertexts may be modified without detection.&lt;/p&gt;
&lt;p&gt;This problem was addressed by using Authenticated Encryption (AE) or
Authenticated Encryption with Associated Data (AEAD), which are methods to
provide integrity and authenticity in addition to confidentiality when
encrypting data.&lt;/p&gt;
&lt;p&gt;We have seen the details of the two most popular authenticated encryption
ciphers and briefly mentioned some of their variants. Their features are
summarized here:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Cipher&lt;/th&gt;
&lt;th&gt;Cipher Type&lt;/th&gt;
&lt;th&gt;Key Size&lt;/th&gt;
&lt;th&gt;Nonce Size&lt;/th&gt;
&lt;th&gt;Nonce Reuse&lt;/th&gt;
&lt;th&gt;Tag Size&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ChaCha20-Poly1305&lt;/td&gt;
&lt;td&gt;Stream, AEAD&lt;/td&gt;
&lt;td&gt;256 bits&lt;/td&gt;
&lt;td&gt;96 bits&lt;/td&gt;
&lt;td&gt;Catastrophic&lt;/td&gt;
&lt;td&gt;128 bits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XChaCha20-Poly1305&lt;/td&gt;
&lt;td&gt;Stream, AEAD&lt;/td&gt;
&lt;td&gt;256 bits&lt;/td&gt;
&lt;td&gt;192 bits&lt;/td&gt;
&lt;td&gt;Catastrophic&lt;/td&gt;
&lt;td&gt;128 bits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AES-GCM&lt;/td&gt;
&lt;td&gt;Stream, AEAD&lt;/td&gt;
&lt;td&gt;128, 192, 256 bits&lt;/td&gt;
&lt;td&gt;96 bits&lt;/td&gt;
&lt;td&gt;Catastrophic&lt;/td&gt;
&lt;td&gt;128 bits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AES-GCM-SIV&lt;/td&gt;
&lt;td&gt;Stream, AEAD&lt;/td&gt;
&lt;td&gt;128 or 256 bits&lt;/td&gt;
&lt;td&gt;96 bits&lt;/td&gt;
&lt;td&gt;Reduced risk&lt;/td&gt;
&lt;td&gt;128 bits&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Authenticated encryption is used in most of our modern protocols, including
TLS, S/MIME, PGP/GPG, and many more. Failure to implement authenticated
encryption correctly has lead to some serious issues in the past.&lt;/p&gt;
&lt;p&gt;Whenever you’re using encryption, ask yourself: how is integrity and
authentication verified? And remember: it’s essential to verify the
authenticity of data &lt;em&gt;before&lt;/em&gt; using it.&lt;/p&gt;
&lt;p&gt;I hope you enjoyed this article! As usual, if you have any suggestions or
spotted some mistakes, let me know in the comments or by contacting me!&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>What time is it? A simple question with a complex answer. How computers synchronize time</title><link href="https://andrea.corbellini.name/2023/01/23/what-time-is-it/" rel="alternate"></link><published>2023-01-23T19:15:00+00:00</published><updated>2023-01-23T19:15:00+00:00</updated><author><name>andreacorbellini</name></author><id>tag:andrea.corbellini.name,2023-01-23:/2023/01/23/what-time-is-it/</id><summary type="html">&lt;p&gt;Ever wondered how your computer or your phone displays the current date and
time accurately? What keeps all the devices in the world (and in space) in
agreement on what time it is? What makes applications that require precise
timing possible?&lt;/p&gt;
&lt;p&gt;In this article, I will explain some of the challenges with time
synchronization and explore two of the most popular protocols that devices …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ever wondered how your computer or your phone displays the current date and
time accurately? What keeps all the devices in the world (and in space) in
agreement on what time it is? What makes applications that require precise
timing possible?&lt;/p&gt;
&lt;p&gt;In this article, I will explain some of the challenges with time
synchronization and explore two of the most popular protocols that devices use
to keep their time in sync: the Network Time Protocol (NTP) and the Precision
Time Protocol (PTP).&lt;/p&gt;
&lt;h1 id="what-is-time"&gt;What is time?&lt;/h1&gt;
&lt;p&gt;It wouldn’t be a good article about time synchronization without spending a few
words about time. We all have an intuitive concept of time since childhood, but
stating precisely what ‘time’ is can be quite a challenge. I’m going to give
you my idea of it.&lt;/p&gt;
&lt;p&gt;Here is a simple definition to start with: &lt;strong&gt;time is how we measure changes&lt;/strong&gt;.
If the objects in the universe didn’t change and appeared to be fixed, without
ever moving or mutating, I think we could all agree that time wouldn’t be
flowing. Here by ‘change’ I mean any kind of change: from objects falling or
changing shape, to light diffusing through space, or our memories building up
in our mind.&lt;/p&gt;
&lt;p&gt;This definition may be a starting point but does not capture all we know about
time. Something that it does not capture is our concept of past, present, and
future. From our day-to-day experience, we know in fact that an apple would
fall off the tree due to gravity, under the normal flow of time. If we observed
an apple rising from the ground, attaching itself to the tree (without the
action of external forces), we could perhaps agree that what we’re observing is
time flowing backward. And yet, both the apple falling off the tree and the
apple rising from the ground are two valid &lt;em&gt;changes&lt;/em&gt; from an initial state.
This is where causality comes into place: &lt;strong&gt;time flows in such a way that the
cause must precede the effect&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We can now refine our definition of time as an &lt;strong&gt;ordered sequence of changes,
where each change is linked to the previous one by causality&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id="how-do-we-measure-time"&gt;How do we measure time?&lt;/h1&gt;
&lt;p&gt;Now we have a more precise definition of time, but we still don’t have enough
tools to define what is a second, an hour, or a day. This is where things get
more complicated.&lt;/p&gt;
&lt;p&gt;If we look at the definition of ‘second’ from the international standard, we
can see that it is currently defined from the emission frequency of caesium-133
(&lt;sup&gt;133&lt;/sup&gt;Cs) atoms. If you irradiate caesium-133 atoms with some light
having sufficient energy, the atoms will absorb the light, get excited, and
release the energy back in the form of light at a specific frequency. That
frequency of emission is defined as &lt;span&gt;9&lt;span
style="margin-left:0.2em"&gt;192&lt;/span&gt;&lt;span
style="margin-left:0.2em"&gt;631&lt;/span&gt;&lt;span
style="margin-left:0.2em"&gt;770&lt;/span&gt;&lt;/span&gt; Hz, and the second is defined as
the inverse of that frequency. This definition is known as the &lt;a href="https://en.wikipedia.org/wiki/Caesium_standard"&gt;caesium
standard&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here’s a problem to think about: how do we know that a caesium-133 atom, after
getting excited, really emits light at a fixed frequency? The definition of
second is implying that the frequency is constant and the same all over the
world, but how do we know it’s really the case? This assumption is supported by
quantum physics, according to which atoms can only transition between discrete
(quantified) energy states. When an atom gets excited, it transitions from an
energy state $E_1$ to an energy state $E_2$. Atoms like to be in the lowest
energy state, so the atom will not stay in the state $E_2$ for long, and will
want to go back to $E_1$. When doing that, it will release an amount of energy
of exactly $E_2 - E_1$ in the form of a photon. According to the &lt;a href="https://en.wikipedia.org/wiki/Planck_relation"&gt;Planck
formula&lt;/a&gt;, the photon will have
frequency $f = (E_2 - E_1) / h$ where $h$ is the Planck constant.  Because the
energy levels are fixed, the resulting emission frequency is fixed as well.&lt;/p&gt;
&lt;p&gt;By the way, this process of absorption and emission of photons is the same
process that causes fluorescence.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/atomic-clock-emission.svg" alt="Visualization of the absorption and emission process for an atom transitioning between two energy states"&gt;
  &lt;figcaption&gt;Visualization of the absorption and emission process for an atom transitioning between a ground state $E_1$ to an excited state $E_2$.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Assuming that caesium-133 atoms emit light at a single, fixed frequency, we can
now build &lt;em&gt;extremely&lt;/em&gt; accurate caesium atomic clocks and measure spans of time
with them. Existing caesium atomic clocks are estimated to be so precise that
they may lose one second every 100 million years.&lt;/p&gt;
&lt;p&gt;The same approach can be applied to other substances as well: atomic clocks
have been constructed using rubidium (Rb), strontium (Sr), hydrogen (H),
krypton (Kr), ammonia (NH&lt;sub&gt;3&lt;/sub&gt;), ytterbium (Yb), each having its own
emission frequency, and their own accuracy. The &lt;a href="https://www.theverge.com/2015/4/22/8466681/most-accurate-atomic-clock-optical-lattice-strontium"&gt;most accurate clock ever
built&lt;/a&gt;
is a strontium clock which may lose one second every 15 billion years.&lt;/p&gt;
&lt;h1 id="time-dilation"&gt;Time dilation&lt;/h1&gt;
&lt;p&gt;If we have two atomic clocks and we let them run for a while, will they show
the same time? This might sound like a rhetorical question: we just established
that the frequencies of emission of atoms are fixed, so why would two identical
atomic clocks ever get out of sync? Well, as a matter of fact, two identical
atomic clocks may get out of sync, and this problem is not due to the clocks,
but with time itself: it appears that time does not always flow in the same way
everywhere.&lt;/p&gt;
&lt;p&gt;Many experiments have shown this effect on our planet, the most famous one
probably being the &lt;a href="https://en.wikipedia.org/wiki/Hafele%E2%80%93Keating_experiment"&gt;Hafele-Keating
experiment&lt;/a&gt;.
In this experiment, a set of caesium clocks was placed on an airplane flying
around the world west-to-east, another set was placed on an airplane flying
east-to-west, and another set remained on ground. The 3 sets of clocks, which
were initially in sync before the planes took off, were showing different times
once reunited after the trip. This experiment and similar ones have been
repeated and refined multiple times, and they all showed consistent results.&lt;/p&gt;
&lt;p&gt;These effects were due to &lt;a href="https://en.wikipedia.org/wiki/Time_dilation"&gt;time
dilation&lt;/a&gt;, and the results were
consistent with the predictions of &lt;a href="https://en.wikipedia.org/wiki/Special_relativity"&gt;special
relativity&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/General_relativity"&gt;general
relativity&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="time-dilation-due-to-special-relativity"&gt;Time dilation due to special relativity&lt;/h2&gt;
&lt;p&gt;Special relativity predicts that if two clocks are moving with two different
velocities, they are going to measure different spans of time.&lt;/p&gt;
&lt;p&gt;Special relativity is based on two principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the speed of light is constant;&lt;/li&gt;
&lt;li&gt;there are no privileged reference frames.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To understand how these principles affect the flow of time, it’s best to look
at an example: imagine that a passenger is sitting on a train with a laser and
a mirror in front of them. Another person is standing on the ground next to the
railroad and observing the train passing. The passenger points the laser
perpendicular to the mirror and turns it on.&lt;/p&gt;
&lt;p&gt;What the passenger will observe is the beam of light from the laser to hit the
mirror and come back in a straight line:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/special-relativity-train-reference-frame.webp" alt="Beam of light in the train reference frame"&gt;
  &lt;figcaption&gt;Portion of the beam of light in the train reference frame, emitted from the laser (bottom) and bouncing from the mirror (top). Note how it follows a vertical path.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;From the observer perspective, however, things are quite different. Because the
train is moving relative to the observer, the beam looks like it’s taking a
different, slightly longer path:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/special-relativity-observer-reference-frame.webp" alt="Beam of light in the observer reference frame"&gt;
  &lt;figcaption&gt;The same portion of light beam as before, but this time in the observer reference frame. Note how it follows a diagonal path, longer than the vertical path in the train reference frame.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If both the passenger and the observer measure how long it took for the light
beam to hit back at the source, and if the principles of special relativity
hold, then the two persons will record different measurements. If the speed of
light is constant, and there is no privileged reference frame, then the speed
of light $c$ must be the same in both reference frames. From the passenger’s
perspective, the beam has traveled a distance of $2 L$, taking a time $2 L /
c$. From the observer’s perspective, the beam has traveled a longer distance $2
M$, with $M &amp;gt; L$, taking a longer time $2 M / c$.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/special-relativity-reference-frame-comparison.webp" alt="Beam of light in the observer reference frame"&gt;
  &lt;figcaption&gt;Comparison of the light beams as seen from the two reference frames. In the train reference frame, the light beam is a vertical line of length $L$ (therefore traveling a path of length $2 L$ after bouncing from the mirror). In the observer reference frame, the light beam is distorted due to the velocity of the train. If the train moves at speed $v$, then the light beam travels a total length of $2 M = 2 L c / \sqrt{c^2 - v^2}$.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;How can we reconcile these counterintuitive measurements? Special relativity
does it is by stating that time flows differently in the two reference frames.
Time runs “slower” inside the train and runs “faster” for the observer. One
consequence of that is that the passenger ages less than the observer.&lt;/p&gt;
&lt;p&gt;Time dilation due to special relativity is not easily detectable in our
day-to-day life, but it can still cause problems with high-precision clocks.
This time dilation may in fact cause clock drifts in the order of hundreds of
nanoseconds per day.&lt;/p&gt;
&lt;h2 id="time-dilation-due-to-general-relativity"&gt;Time dilation due to general relativity&lt;/h2&gt;
&lt;p&gt;Experimental data shows that clocks in a gravitational field do not follow
(solely) the rules of special relativity. This does not mean that special
relativity is wrong, but it’s a sign that it is incomplete. This is where
general relativity comes into play. In general relativity, &lt;strong&gt;gravity&lt;/strong&gt; is not
seen as a &lt;em&gt;force&lt;/em&gt;, like in classical physics, but rather as a deformation of
&lt;a href="https://en.wikipedia.org/wiki/Spacetime"&gt;spacetime&lt;/a&gt;. All objects that have
mass bend spacetime, and the path of objects traveling through spacetime is
affected by its curvature.&lt;/p&gt;
&lt;p&gt;An apple falling from a tree is not going towards the ground because there’s a
force “pushing” it down, but rather because that’s the shortest &lt;a href="https://en.wikipedia.org/wiki/World_line"&gt;path in
spacetime&lt;/a&gt; (a straight line in bent
spacetime).&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/apple-falling-classical-physics.webp" alt="Apple falling according to classical physics, following a parabolic motion"&gt;
  &lt;figcaption&gt;Apple falling according to classical physics, following a parabolic motion.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/apple-falling-general-relativity.webp" alt="Apple falling according to general relativity, following a straight path in distorted spacetime"&gt;
  &lt;figcaption&gt;Apple falling according to general relativity, following a straight path in distorted spacetime.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The larger the mass of objects, the larger the curvature of spacetime they
produce. Time flows “slower” near large masses, and “faster” away from it.
Interesting facts: people on a mountain age faster than people on the sea
level, and it has been
&lt;a href="https://phys.org/news/2016-05-earth-core-younger-thought.html"&gt;calculated&lt;/a&gt;
that the core of the Earth is 2.5 years younger than the crust.&lt;/p&gt;
&lt;p&gt;The time dilation caused by gravity on the surface of the Earth may amount to
clock drifts in the order of hundreds of nanoseconds per day, just like special
relativity.&lt;/p&gt;
&lt;h1 id="can-we-actually-synchronize-clocks"&gt;Can we actually synchronize clocks?&lt;/h1&gt;
&lt;p&gt;Given what we have seen about time dilation, and that we may experience time
differently, does it even make sense to talk about time synchronization? Can we
agree on time if time flows differently for us?&lt;/p&gt;
&lt;p&gt;The short answer is yes: the trick is to restrict our view to a closed system,
like the surface of our planet. If we place some clocks scattered across the
system, they will almost certainly experience different flows of time, due to
different velocities, different altitudes, and other time dilation phenomena.
We cannot make those clocks agree on how much time has passed since a specific
event; what we can do is aggregate all the time measurements from the clocks
and average them out. This way we end up with a value that is representative of
how much time has passed on the entire system—in other words, we get an
“overall time” for the system.&lt;/p&gt;
&lt;p&gt;Very often, the system that we consider is not restricted to just the surface
of our planet, but involves the Sun, and sometimes the moon as well. In fact,
what we call one &lt;em&gt;year&lt;/em&gt; is roughly the time it takes for the Earth to complete
an orbit around the Sun; one &lt;em&gt;day&lt;/em&gt; is roughly the time it takes for the Earth
to spin around itself once and face the Sun in the same position again.
Including the Sun (or the moon) in our time measurements is complicated: in
part this complexity comes from the fact that precise measurements of the
Earth’s position are difficult, and in part from the fact that the Earth’s
rotation is not regular, not fully predictable, and it’s slowing down. It’s
worth noting that climate and geological events affect the Earth’s rotation in
a measurable way, and such events are very hard to model accurately.&lt;/p&gt;
&lt;p&gt;What is important to understand here is that the word ‘time’ is often used to
mean different things. Depending on how we measure it, we can end up with
&lt;strong&gt;different definitions of time&lt;/strong&gt;. To avoid ambiguity, I will classify ‘time’
into two big categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Elapsed time&lt;/strong&gt;: this is the time measured directly by a clock, without
  using any extra information about the system where the clock lies into or
  about other clocks.&lt;/p&gt;
&lt;p&gt;We can use elapsed time to measure durations, latencies, frequencies, as
well as lengths.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Coordinated time&lt;/strong&gt;: this is the time measured by using a clock, paired with
  information about the system where it’s located (like position, velocity, and
  gravity), and/or information from other clocks.&lt;/p&gt;
&lt;p&gt;This notion of time is mostly useful for coordinating events across the
system. Some practical examples: scheduling the execution of tasks in the
future, checking the expiration of certificates, real-time communication.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="time-standards"&gt;Time standards&lt;/h1&gt;
&lt;p&gt;Over the centuries several &lt;a href="https://en.wikipedia.org/wiki/Time_standard"&gt;time
standards&lt;/a&gt; have been introduced to
measure &lt;em&gt;coordinated time&lt;/em&gt;. Nowadays there are three major standards in use:
TAI, UTC, and GNSS. Let’s take a brief look at them.&lt;/p&gt;
&lt;h2 id="tai"&gt;TAI&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/International_Atomic_Time"&gt;International Atomic Time
(TAI)&lt;/a&gt; is based on the
weighted average of the &lt;em&gt;elapsed time&lt;/em&gt; measured by several atomic clocks spread
across the world. The more a clock in TAI is precise, the more it contributes
to the weighted average. The fact that the clocks are spread in multiple
locations, and the use of an average, mitigates relativistic effects and yields
a value that we can think of as the overall time flow experienced by the
surface of the Earth.&lt;/p&gt;
&lt;p&gt;Note that the calculations for TAI does not include the Earth’s position with
respect to the Sun.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/tai-equipment-distribution.webp" alt="Distribution of the laboratories that contribute to TAI all over the world"&gt;
  &lt;figcaption&gt;Distribution of the laboratories that contribute to International Atomic Time (TAI) all over the world as of 2020. Map taken from the &lt;a href="https://webtai.bipm.org/ftp/pub/tai/annual-reports/bipm-annual-report/annual_report_2020.pdf"&gt;BIPM Annual Report on Time Activities&lt;/a&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id="utc"&gt;UTC&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Coordinated_Universal_Time"&gt;Coordinated Universal Time
(UTC)&lt;/a&gt; is built upon
TAI. UTC, unlike TAI, is periodically adjusted to synchronize it with the
Earth’s rotation around itself and the Sun. The goal is to make sure that 24
UTC hours are equivalent to a solar day (within a certain degree of precision).
Because, as explained earlier, the Earth’s rotation is irregular, not fully
predictable, and slowing down, periodic adjustments have to be made to UTC at
irregular intervals.&lt;/p&gt;
&lt;p&gt;The adjustments are performed by inserting &lt;a href="https://en.wikipedia.org/wiki/Leap_second"&gt;leap
seconds&lt;/a&gt;: these are extra seconds
that are added to the UTC time to “slow down” the UTC time flow and keep it in
sync with Earth’s rotation. On days when a leap second is inserted, UTC clocks
go from 23:59:&lt;strong&gt;59&lt;/strong&gt; to 23:59:&lt;strong&gt;60&lt;/strong&gt;.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/leap-seconds-timeline.svg" alt="Visualization of leap seconds inserted into UTC, and a comparison with TAI"&gt;
  &lt;figcaption&gt;A visualization of leap seconds inserted into UTC until the end of 2022. Each orange dot represents a leap second (not in scale). When UTC was started in 1972, it started with 10 seconds of offset from TAI. As you can see, the insertion of leap seconds is very irregular: some decades have seen many leap seconds, others have seen much more.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;It’s worth noting that the practice of inserting leap seconds is most likely
&lt;a href="https://en.wikipedia.org/wiki/Leap_second#Future_of_leap_seconds"&gt;going to be
discontinued&lt;/a&gt;
in the future. The main reason is that leap seconds have been the source of
complexity and bugs in computer systems, and the benefit-to-pain ratio of leap
seconds is not considered high enough to keep adding them. If leap seconds are
discontinued, UTC will become effectively equivalent to TAI, with an offset:
UTC will always differ from TAI by a few seconds, but this difference will
always be constant, if no more leap seconds are inserted.&lt;/p&gt;
&lt;h2 id="gnss"&gt;GNSS&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/GNSS"&gt;Global Navigation Satellite System (GNSS)&lt;/a&gt;
is based on a mix of accurate atomic clocks on ground and less accurate atomic
clocks on artificial satellites orbiting around the Earth. The clocks on the
satellites, being less accurate and subject to a variety of relativistic
effects, are updated about twice a day from ground stations to correct clock
drifts. Nowadays there are several implementations of GNSS around the world,
including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the United States’ &lt;a href="https://en.wikipedia.org/wiki/Global_Positioning_System"&gt;Global Positioning System (GPS)&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;the European &lt;a href="https://en.wikipedia.org/wiki/Galileo_(satellite_navigation)"&gt;Galileo&lt;/a&gt; system;&lt;/li&gt;
&lt;li&gt;China’s &lt;a href="https://en.wikipedia.org/wiki/BeiDou"&gt;BeiDou (BDS)&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;the Russian &lt;a href="https://en.wikipedia.org/wiki/GLONASS"&gt;GLONASS&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When GPS was launched, it was synchronized with UTC, however GPS, unlike UTC,
is not adjusted to follow the Earth’s rotation, and due to that, GPS today
differs from UTC by 18 seconds (because 18 leap seconds have been inserted
since GPS was launched in 1980). BeiDou also does not implement leap seconds.
GPS and BeiDou are therefore compatible with TAI.&lt;/p&gt;
&lt;p&gt;Other GNSS systems like Galileo and GLONASS do implement leap seconds and are
therefore compatible with UTC.&lt;/p&gt;
&lt;h1 id="time-synchronization-protocols"&gt;Time synchronization protocols&lt;/h1&gt;
&lt;p&gt;Dealing with &lt;em&gt;coordinated time&lt;/em&gt; is not trivial. Different ways to deal with
relativistic effects and Earth’s irregular rotation result in different time
standards that are not always immediately compatible with each other.
Nonetheless, once we agree on a well-defined time standard, we have a way to
ask the question “what time is it?” and receive an accurate answer all around
the world (within a certain degree of precision).&lt;/p&gt;
&lt;p&gt;Let’s now take a look at how computers on a network can obtain an accurate
value for the coordinated time given by a time standard. I will describe two
popular protocols: NTP and PTP. The two are using similar algorithms, but offer
different precision: milliseconds (NTP) and nanoseconds (PTP). Both use UDP/IP
as the transport protocol.&lt;/p&gt;
&lt;h2 id="network-time-protocol-ntp"&gt;Network Time Protocol (NTP)&lt;/h2&gt;
&lt;p&gt;The way time synchronization works with NTP is the following: a computer that
wants to synchronize its time periodically queries an NTP server (or multiple
servers) to get the current coordinated time. The server that provides the
current coordinated time may have obtained the time from an accurate source
clock connected to the server (like an atomic clock synchronized with TAI or
UTC, or a GNSS receiver), or from a previous synchronization from another NTP
server.&lt;/p&gt;
&lt;p&gt;To record how “fresh” the coordinated time from an NTP server is (how distant
the NTP server is from the source clock), NTP has a concept of &lt;strong&gt;stratum&lt;/strong&gt;:
this is a number that indicates the number of ‘hops’ from the accurate clock
source:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stratum &lt;strong&gt;0&lt;/strong&gt; is used to indicate an accurate clock;&lt;/li&gt;
&lt;li&gt;stratum &lt;strong&gt;1&lt;/strong&gt; is a server that is directly connected to a stratum &lt;strong&gt;0&lt;/strong&gt; clock;&lt;/li&gt;
&lt;li&gt;stratum &lt;strong&gt;2&lt;/strong&gt; is a server that is synchronized from a stratum &lt;strong&gt;1&lt;/strong&gt; server;&lt;/li&gt;
&lt;li&gt;stratum &lt;strong&gt;3&lt;/strong&gt; is a server that is synchronized from a stratum &lt;strong&gt;2&lt;/strong&gt; server;&lt;/li&gt;
&lt;li&gt;and so on…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The maximum stratum allowed is 15. There’s also a special stratum 16: this is
not a real stratum, but a special value used by clients to indicate that time
synchronization is not happening (most likely because the NTP servers are
unreachable).&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/ntp-strata.svg" alt="Visualization of NTP strata in a distributed network"&gt;
  &lt;figcaption&gt;Examples of different NTP strata in a distributed network. A stratum &lt;em&gt;n&lt;/em&gt; server obtains its time from stratum &lt;em&gt;n&lt;/em&gt; - 1 servers.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The major problem with synchronizing time over a network is latency. Networks
can be composed of multiple links, some of which may be slow or overloaded.
Simply requesting the current time from an NTP server without taking latency
into account would lead to an imprecise response. Here is how NTP deals with
this problem:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The NTP client sends a request via a UDP packet to an NTP server. The packet
   includes an &lt;strong&gt;originate timestamp&lt;/strong&gt; $t_0$ that indicates the local time of
   the client when the packet was sent.&lt;/li&gt;
&lt;li&gt;The NTP server receives the request and records the &lt;strong&gt;receive timestamp&lt;/strong&gt;
   $t_1$, which indicates the local time of the server when the request was
   received.&lt;/li&gt;
&lt;li&gt;The NTP server processes the request, prepares a response, and records the
   &lt;strong&gt;transmit timestamp&lt;/strong&gt; $t_2$, which indicates the local time of the server
   when the response was sent. The timestamps $t_0$, $t_1$ and $t_2$ are all
   included in the response.&lt;/li&gt;
&lt;li&gt;The NTP client receives the response and records the timestamp $t_3$, which
   indicates the local time of the client when the response was received.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/ntp-sync-algorithm.svg" alt="Visualization of the NTP time synchronization algorithm"&gt;
  &lt;figcaption&gt;The NTP synchronization algorithm.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Our goal is now to calculate an estimate for the network latency and processing
delay and use that information to calculate, in the most accurate way possible,
the offset between the NTP client clock and the NTP server clock.&lt;/p&gt;
&lt;p&gt;The difference $t_3 - t_0$ is the duration of the overall exchange. The
difference $t_2 - t_1$ is the duration of the NTP server processing delay. If
we subtract these two durations, we get the total network latency experienced,
also known as &lt;strong&gt;round-trip delay&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;$$\delta = (t_3 - t_0) - (t_2 - t_1)$$&lt;/p&gt;
&lt;p&gt;If we assume that the transmit delay and the receive delay are the same, then
$\delta / 2$ is the &lt;strong&gt;average network latency&lt;/strong&gt; (this assumption may not be
true in a general network, but that’s the assumption that NTP makes).&lt;/p&gt;
&lt;p&gt;Under this assumption, the time $t_0 + \delta/2$ is the time on the client’s
clock that corresponds to $t_1$ on the server’s clock. Similarly, $t_3 -
\delta/2$ on the client’s clock corresponds to $t_2$ on the server’s clock.
These correspondences let us calculate two estimates for the offset between the
client’s clock and the server’s clock:&lt;/p&gt;
&lt;p&gt;$$\begin{align*}
\theta_1 &amp;amp; = t_1 - (t_0 + \delta/2) \\
\theta_2 &amp;amp; = t_2 - (t_3 - \delta/2)
\end{align*}$$&lt;/p&gt;
&lt;p&gt;We can now calculate the client-server &lt;strong&gt;offset&lt;/strong&gt; $\theta$ as an average of
those two estimates:&lt;/p&gt;
&lt;p&gt;$$\begin{align*}
\theta &amp;amp; = \frac{\theta_1 + \theta_2}2 \\
       &amp;amp; = \frac{t_1 - (t_0 + \delta/2) + t_2 - (t_3 - \delta/2)}2 \\
       &amp;amp; = \frac{t_1 - t_0 - \delta/2 + t_2 - t_3 + \delta/2}2 \\
       &amp;amp; = \frac{(t_1 - t_0) + (t_2 - t_3)}2 \\
\end{align*}$$&lt;/p&gt;
&lt;p&gt;Note that the offset $\theta$ may be a positive duration (meaning that the
client clock is in the past), a negative duration (meaning that the client
clock is in the future) or zero (meaning that the client clock agrees with the
server clock, which is unlikely).&lt;/p&gt;
&lt;p&gt;After calculating the offset $\theta$, the client can update its local clock by
shifting it by $\theta$ and from that point the client will be in sync with the
server (within a certain degree of precision).&lt;/p&gt;
&lt;p&gt;Once the synchronization is done, it is expected that the client’s clock will
start drifting away from the server’s clock. This may happen due to
relativistic effects and more importantly because often clients do not use
high-precision clocks. For this reason, it is important that NTP clients
synchronize their time periodically. Usually NTP clients start by synchronizing
time every minute or so when they are started, and then progressively slow down
until they synchronize time once every half an hour or every hour.&lt;/p&gt;
&lt;p&gt;There are some drawbacks with this synchronization method:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The request and response delays may not be perfectly symmetric, resulting in
  inaccuracies in the calculations of the offset $\theta$. Network
  instabilities, packet retransmissions, change of routes, queuing may all
  cause unpredictable and inconsistent delays.&lt;/li&gt;
&lt;li&gt;The timestamps $t_1$ and $t_3$ must be set &lt;em&gt;as soon as possible&lt;/em&gt; (as soon as
  the packets are received), and similarly $t_0$ and $t_2$ must be set &lt;em&gt;as late
  as possible&lt;/em&gt;. Because NTP is implemented at the software level, there may be
  non-negligible delays in acquiring and recording these timestamps.  These
  delays may be exacerbated if the NTP implementation is not very performant,
  or if the client or server are under high load.&lt;/li&gt;
&lt;li&gt;Errors propagate and add up when increasing the number of strata.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For all these reasons, NTP clients do not synchronize time just from a single
NTP server, but from multiple ones. NTP clients take into account the
round-trip delays, stratum, and jitter (the variance in round-trip delays) to
decide the best NTP server to get their time from. Under ideal network
conditions, an NTP client will always prefer a server with a low stratum.
However, an NTP client may prefer an NTP server with high stratum and more
reliable connectivity over an NTP server with low stratum but a very unstable
network connection.&lt;/p&gt;
&lt;p&gt;The precision offered by NTP is in the order of a few milliseconds.&lt;/p&gt;
&lt;h2 id="precision-time-protocol-ptp"&gt;Precision Time Protocol (PTP)&lt;/h2&gt;
&lt;p&gt;PTP is a time synchronization protocol for applications that require more
accuracy than the one provided by NTP. The main differences between PTP and NTP
are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Precision:&lt;/strong&gt; NTP offers millisecond precision, while PTP offers nanosecond
  precision.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Time standard:&lt;/strong&gt; NTP transmits UTC time, while PTP transmits TAI time and
  the difference between TAI and UTC.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scope:&lt;/strong&gt; NTP is designed to be used over large networks, including the
  internet, while PTP is designed to be used in local area networks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Implementation:&lt;/strong&gt; NTP is mainly software based, while PTP can be
  implemented both via software and on specialized hardware. The use of
  specialized hardware considerably reduces delays and jitter introduced by
  software.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/timecard.jpg" alt="Picture of a Time Card device"&gt;
  &lt;figcaption&gt;&lt;a href="http://www.timingcard.com/"&gt;Time Card&lt;/a&gt;: an open-source hardware card with a PCIe interface that can be plugged into a computer that can serve as a PTP master. It can be optionally connected to a GNSS receiver and contains a rubidium (Rb) clock.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hierarchy:&lt;/strong&gt; NTP can support a complex hierarchy of NTP servers, organized
  via strata. While PTP does not put a limitation on the number of nodes
  involved, the hierarchy is usually only composed of &lt;strong&gt;master&lt;/strong&gt; clocks (the
  source of time information) and &lt;strong&gt;slave&lt;/strong&gt; clocks (the receivers of time
  information). Sometimes &lt;strong&gt;boundary&lt;/strong&gt; clocks are used to relay time
  information to network segments that are unreachable by the master clocks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clock selection:&lt;/strong&gt; in NTP, clients select the best NTP server to use based
  on the NTP server clock quality and the network connection quality. In PTP,
  slaves do not select the best master clock to use. Instead, master clocks
  perform a selection between themselves using a method called &lt;em&gt;best master
  clock algorithm&lt;/em&gt;. This algorithm takes into account the clock’s quality and
  input from system administrators, and does not factor network quality at all.
  The master clock selected by the algorithm is called &lt;strong&gt;grandmaster&lt;/strong&gt; clock.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Algorithm:&lt;/strong&gt; in NTP, clients poll the time information from servers
  periodically and calculate the clock offset using the algorithm described
  above (based on the timestamps $t_0$, $t_1$, $t_2$ and $t_3$). With PTP, the
  algorithm used by slaves to calculate the offset from the grandmaster clock
  is somewhat similar to the one used in NTP, but the order of operations is
  different:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the grandmaster periodically broadcasts its time information $T_0$ over
   the network;&lt;/li&gt;
&lt;li&gt;each slave records the time $T_1$ when the broadcasted time was
   received;&lt;/li&gt;
&lt;li&gt;each slave sends a packet to the grandmaster at time $T_2$;&lt;/li&gt;
&lt;li&gt;the grandmaster receives the packet at time $T_3$ and sends that value
   back to the slave.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The average network delay can be calculated as $\delta = ((T_3 - T_0) -
(T_2 - T_1)) / 2$. The clock offset can be calculated as $\theta = ((T_1 -
T_0) + (T_2 - T_3)) / 2$.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/ptp-sync-algorithm.svg" alt="Visualization of the PTP time synchronization algorithm"&gt;
  &lt;figcaption&gt;The PTP time synchronization algorithm.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1 id="summary"&gt;Summary&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Synchronizing time across a computer network is not an easy task, and first
  of all requires agreeing on a definition of ‘time’ and on a time standard.&lt;/li&gt;
&lt;li&gt;Relativistic effects make it so that time may not flow at the same speed all
  over the globe, and this means that time has to be measured and aggregated
  across the planet in order to get a suitable value that can be agreed on.&lt;/li&gt;
&lt;li&gt;Atomic clocks and GNSS are the clock sources used for most applications
  nowadays.&lt;/li&gt;
&lt;li&gt;NTP is a time synchronization protocol that can be used on large and
  distributed networks like the internet and provides millisecond precision.&lt;/li&gt;
&lt;li&gt;PTP is a time synchronization protocol for local area networks and provides
  nanosecond precision.&lt;/li&gt;
&lt;/ul&gt;</content><category term="time"></category><category term="time"></category><category term="relativity"></category><category term="performance"></category><category term="clocks"></category><category term="ntp"></category><category term="ptp"></category></entry><entry><title>Can we encrypt data using Elliptic Curves?</title><link href="https://andrea.corbellini.name/2023/01/02/ec-encryption/" rel="alternate"></link><published>2023-01-02T06:30:00+00:00</published><updated>2023-01-02T06:30:00+00:00</updated><author><name>andreacorbellini</name></author><id>tag:andrea.corbellini.name,2023-01-02:/2023/01/02/ec-encryption/</id><summary type="html">&lt;p&gt;From time to time, I hear people saying that Elliptic Curve Cryptography (ECC)
cannot be used to directly encrypt data, and you can only do key agreement and
digital signatures with it. This is a common misconception, but it’s not
actually true: you can indeed use elliptic curve keys to encrypt arbitrary
data. And I’m not talking about hybrid-encryption schemes (like
&lt;a href="https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme"&gt;ECIES …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;From time to time, I hear people saying that Elliptic Curve Cryptography (ECC)
cannot be used to directly encrypt data, and you can only do key agreement and
digital signatures with it. This is a common misconception, but it’s not
actually true: you can indeed use elliptic curve keys to encrypt arbitrary
data. And I’m not talking about hybrid-encryption schemes (like
&lt;a href="https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme"&gt;ECIES&lt;/a&gt; or
&lt;a href="https://datatracker.ietf.org/doc/rfc9180/"&gt;HPKE&lt;/a&gt;): I’m talking about pure
elliptic curve encryption, and I’m going to show an example of it in this
article.  It’s true however that pure elliptic curve encryption is not widely
used or standardized because, as I will explain at the end of the article, key
agreement is more convenient for most applications.&lt;/p&gt;
&lt;h1 id="quick-recap-on-elliptic-curve-cryptography"&gt;Quick recap on Elliptic Curve Cryptography&lt;/h1&gt;
&lt;p&gt;I wrote an &lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/"&gt;in-depth article about elliptic curve
cryptography&lt;/a&gt; in the past on this blog, and
here is a quick recap: points on an elliptic curve from an interesting
algebraic structure: a &lt;em&gt;cyclic group&lt;/em&gt;. This group lets us do some algebra with
the points of the elliptic curve: if we have two points $A$ and $B$, we can
&lt;strong&gt;add&lt;/strong&gt; them ($A + B$) or &lt;strong&gt;subtract&lt;/strong&gt; them ($A - B$). We can also &lt;strong&gt;multiply&lt;/strong&gt;
a point by an integer, which is the same as doing repeated addition ($n A$ = $A
+ A + \cdots + A$, $n$ times).&lt;/p&gt;
&lt;p&gt;We know some efficient algorithms for doing multiplication, but the reverse of
multiplication is believed to be a “hard” problem for certain elliptic curves,
in the sense that we know efficient methods for computing $B = n A$ given $n$
and $A$, but we do not know very efficient methods to figure out $n$ given $A$
and $B$.  This problem of reversing a multiplication is known as Elliptic
Curve Discrete Logarithm Problem (ECDLP).&lt;/p&gt;
&lt;p&gt;Elliptic Curve Cryptography is based on multiplication of elliptic curve points
by integers and its security is given mainly by the difficulty of solving the
ECDLP.&lt;/p&gt;
&lt;p&gt;In order to use Elliptic Curve Cryptography, we first have to generate a
&lt;strong&gt;private-public key pair&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;strong&gt;private key&lt;/strong&gt; is a random integer $s$;&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;public key&lt;/strong&gt; is the result of multiplying the integer $s$ with the
  generator $G$ of the elliptic curve group: $P = s G$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s now see a method to use Elliptic Curve Cryptography to encrypt arbitrary
data, so that we can demystify the common belief that elliptic curves cannot be
used to encrypt.&lt;/p&gt;
&lt;h1 id="elliptic-curve-elgamal"&gt;Elliptic Curve ElGamal&lt;/h1&gt;
&lt;p&gt;One method to encrypt data with elliptic curve keys is
&lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/ElGamal_encryption"&gt;ElGamal&lt;/a&gt;&lt;/strong&gt;. This is not
the only method, of course, but it’s the one that I chose because it’s well
known and simple enough. ElGamal is a cryptosystem that takes the name from
&lt;a href="https://en.wikipedia.org/wiki/Taher_Elgamal"&gt;its author&lt;/a&gt; and works on any
cyclic group, not just elliptic curve groups.&lt;/p&gt;
&lt;p&gt;If we want to &lt;strong&gt;encrypt&lt;/strong&gt; a message using the public key $P$ via ElGamal, we
can do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;map the message to a point $M$ on the elliptic curve&lt;/li&gt;
&lt;li&gt;generate a random integer $t$&lt;/li&gt;
&lt;li&gt;compute $C_1 = t G$&lt;/li&gt;
&lt;li&gt;compute $C_2 = t P + M$&lt;/li&gt;
&lt;li&gt;return the tuple $(C_1, C_2)$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To &lt;strong&gt;decrypt&lt;/strong&gt; an encrypted tuple $(C_1, C_2)$ using the private key $s$, we
can do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;compute $M = C_2 - s C_1$&lt;/li&gt;
&lt;li&gt;map the point $M$ back to a message&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The scheme works because:
$$\begin{align*}
    s C_1 &amp;amp; = s (t G) \\
          &amp;amp; = t (s G) \\
          &amp;amp; = t P
\end{align*}$$
therefore:
$$\begin{align*}
    C_2 - s C_1 &amp;amp; = (t P + M) - (t P) \\
                &amp;amp; = M
\end{align*}$$&lt;/p&gt;
&lt;p&gt;There’s however a big problem with this scheme: how do we map a message to a
point, and vice versa? How can we perform step 1 of the encryption algorithm,
or step 2 of the decryption algorithm?&lt;/p&gt;
&lt;h1 id="mapping-a-message-to-a-point"&gt;Mapping a message to a point&lt;/h1&gt;
&lt;p&gt;A message can be an arbitrary byte string. An elliptic curve point is,
generally speaking, a pair of integers $(x, y)$ belonging to the elliptic curve
field.  How can we transform a byte string into a pair of field integers?&lt;/p&gt;
&lt;p&gt;Well, as far as computers are concerned, both byte strings and integers have
the same nature: they are just sequences of bits, so there’s a natural map
between the two. We could take the message, split it into two parts, and
interpret the first part as an integer $x$ and the second part as an integer
$y$. This would work for obtaining two arbitrary integers, but there’s a
problem: the coordinates $x$ and $y$ of an elliptic curve point are related by
a mathematical equation (the curve equation), so we cannot choose two arbitrary
$x$ and $y$ and expect them to identify a valid point on the curve. In fact,
for curves in Weierstrass form, given $x$ there are at most two possible
choices for $y$, so it’s &lt;em&gt;very&lt;/em&gt; unlikely that this splitting method will yield
a valid point.&lt;/p&gt;
&lt;p&gt;Let’s change our strategy a little bit: instead of transforming the message to
a pair $(x, y)$, we transform it to $x$ and then we compute a valid $y$ from
the curve equation. This is a much better method, but there’s still a problem:
generally speaking, not every $x$ will have a corresponding $y$. Not every $x$
can satisfy the curve equation.&lt;/p&gt;
&lt;p&gt;Luckily, most of the popular elliptic curves used in cryptography have an
interesting property: about half of the possible field integers are valid
$x$-coordinates. To see this, let’s take a look at an example: the curve
&lt;code&gt;secp384r1&lt;/code&gt;. This is a Weierstrass curve that has the following order:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I remind you that the order is the number of valid points that belong to the
elliptic curve group. Because this is a Weierstrass curve, for each $x$ there
are 2 possible points, so the number of valid $x$-coordinates is &lt;code&gt;order / 2&lt;/code&gt;.
Given an arbitrary 384-bit integer, what are the chances that this is a valid
$x$-coordinate? The answer is &lt;code&gt;(order / 2) / (2 ** 384)&lt;/code&gt; which is approximately
0.5 or 50%.&lt;/p&gt;
&lt;p&gt;OK, but how does this help with our goal: mapping an arbitrary message to a
valid $x$-coordinate? It’s simple: we can &lt;em&gt;append&lt;/em&gt; a random byte (or multiple
bytes) to the message. We call this extra byte (or bytes): &lt;strong&gt;padding&lt;/strong&gt;. If the
resulting padded message does not translate to a valid $x$-coordinate, we
choose another random padding and try again, until we find one that works.
Given that there’s 50% chance of finding a valid $x$ coordinate, this method
will find a valid $x$-coordinate very quickly: on average, this will happen on
the first or the second try.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/ec-elgamal-padding.svg" alt="Padding a message to obtain a valid elliptic curve point" width="500" height="120"&gt;
  &lt;figcaption&gt;Example of how to use padding to obtain a valid elliptic curve point from an arbitrary message.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This operation can be easily &lt;strong&gt;reversed&lt;/strong&gt;: if you have a point $(x, y)$, in
order to recover the message that generated it, just take the $x$ coordinate
and remove the padding. That’s it!&lt;/p&gt;
&lt;p&gt;It’s worth noting that there are some standard curves where all the possible
byte strings (of the proper size) can be translated to elliptic curve points,
without any random padding needed. For example, with
&lt;a href="https://en.wikipedia.org/wiki/Curve25519"&gt;Curve25519&lt;/a&gt;, every 32-byte string is
a valid elliptic curve point. Another curve like that is
&lt;a href="https://en.wikipedia.org/wiki/Curve448"&gt;Curve448&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It’s also important to note that the padding does not need to be truly random.
In the image above I show a padding that is simply a constantly increasing
sequence of numbers: 1, 2, 3, … That’s enough to find a valid point.&lt;/p&gt;
&lt;h1 id="putting-everything-together"&gt;Putting everything together&lt;/h1&gt;
&lt;p&gt;We have seen how to map a message to a point and how ElGamal works, so now we
have all the elements to write some working code. I’m choosing
&lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; and the
&lt;a href="https://github.com/cslashm/ECPy"&gt;ECPy&lt;/a&gt; package to work with elliptic curves,
which you can install with &lt;code&gt;pip install ecpy&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ecpy.curves&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Curve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;message_to_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Curve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Number of bytes to represent a coordinate of a point&lt;/span&gt;
    &lt;span class="n"&gt;coordinate_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
    &lt;span class="c1"&gt;# Minimum number of bytes for the padding. We need at least 1 byte so that&lt;/span&gt;
    &lt;span class="c1"&gt;# we can try different values and find a valid point. We also add an extra&lt;/span&gt;
    &lt;span class="c1"&gt;# byte as a delimiter between the message and the padding (see below)&lt;/span&gt;
    &lt;span class="n"&gt;min_padding_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="c1"&gt;# Maximum number of bytes that we can encode&lt;/span&gt;
    &lt;span class="n"&gt;max_message_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;coordinate_size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;min_padding_size&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;max_message_size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Message too long&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Add a padding long enough to ensure that the resulting padded message has&lt;/span&gt;
    &lt;span class="c1"&gt;# the same size as a point coordinate. Initially the padding is all 0&lt;/span&gt;
    &lt;span class="n"&gt;padding_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;coordinate_size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;padded_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytearray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;padding_size&lt;/span&gt;

    &lt;span class="c1"&gt;# Put a delimiter between the message and the padding, so that we can&lt;/span&gt;
    &lt;span class="c1"&gt;# properly remove the padding at decrypt time&lt;/span&gt;
    &lt;span class="n"&gt;padded_message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xff&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Convert the padded message to an integer, which may or may not be a&lt;/span&gt;
        &lt;span class="c1"&gt;# valid x-coordinate&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;padded_message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;little&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Calculate the corresponding y-coordinate (if it exists)&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y_recover&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# x was not a valid coordinate; increment the padding and try again&lt;/span&gt;
            &lt;span class="n"&gt;padded_message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# x was a valid coordinate; return the point (x, y)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;public_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;curve&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;public_key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curve&lt;/span&gt;
    &lt;span class="c1"&gt;# Map the message to an elliptic curve point&lt;/span&gt;
    &lt;span class="n"&gt;message_point&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message_to_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Generate a randon number&lt;/span&gt;
    &lt;span class="n"&gt;seed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Calculate c1 and c2 according to the ElGamal algorithm&lt;/span&gt;
    &lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;curve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt;
    &lt;span class="n"&gt;c2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;public_key&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;message_point&lt;/span&gt;
    &lt;span class="c1"&gt;# Encode c1 and c2 and return them&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;curve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;point_to_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Number of bytes to represent a coordinate of a point&lt;/span&gt;
    &lt;span class="n"&gt;coordinate_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
    &lt;span class="c1"&gt;# Convert the x-coordinate of the point to a byte string&lt;/span&gt;
    &lt;span class="n"&gt;padded_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coordinate_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;little&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Find the padding delimiter&lt;/span&gt;
    &lt;span class="n"&gt;message_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;padded_message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rfind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Remove the padding and return the resulting message&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;padded_message&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;message_size&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Curve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Decode c1 and c2 and convert them to elliptic curve points&lt;/span&gt;
    &lt;span class="n"&gt;c1_bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;c2_bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c1_bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c2_bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Calculate the message point according to the ElGamal algorithm&lt;/span&gt;
    &lt;span class="n"&gt;message_point&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;secret_key&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt;
    &lt;span class="c1"&gt;# Convert the message point to a message and return it&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;point_to_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message_point&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And here is an usage example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;curve&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Curve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_curve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;secp384r1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;secret_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x123456789abcdef&lt;/span&gt;
&lt;span class="n"&gt;public_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secret_key&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;curve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt;

&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;  Message:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;encrypted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;public_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Encrypted:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encrypted&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="n"&gt;decrypted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encrypted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Decrypted:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;decrypted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which produces the following output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  Message: hello
Encrypted: 04fa333c6a03994c5bce4627de4447c5cdd358415f8db2745b67836932a0d5e81f19...
Decrypted: hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="some-considerations-on-padding-and-security"&gt;Some considerations on padding and security&lt;/h1&gt;
&lt;p&gt;It’s important to note that padding is a very delicate problem in cryptography.
There exist many &lt;a href="https://en.wikipedia.org/wiki/Padding_(cryptography)"&gt;padding
schemes&lt;/a&gt;, and &lt;strong&gt;not all
of them are secure&lt;/strong&gt;. The padding scheme that I wrote in this article was just
for demonstration purposes and may not be the most secure, so don’t use it in
production systems. Take a look at
&lt;a href="https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding"&gt;OAEP&lt;/a&gt; if
you’re looking for a modern and secure padding scheme.&lt;/p&gt;
&lt;p&gt;Another thing to note is that the decryption method that I wrote does not check
if the decryption was successful. If you try to decrypt an invalid ciphertext,
or use the wrong key, you won’t get an error but instead a random result, which
is not desiderable. A good padding scheme like OAEP will instead throw an error
if decryption was unsuccessful.&lt;/p&gt;
&lt;p&gt;(Receiving an error when decryption is not successful is very important due to
the fact that schemes like ElGamal are
&lt;a href="https://en.wikipedia.org/wiki/Malleability_(cryptography)"&gt;malleable&lt;/a&gt;. Check
out my post about &lt;a href="https://andrea.corbellini.name/2023/03/09/authenticated-encryption/"&gt;authenticated
encryption&lt;/a&gt; for examples and
details about why this is important.)&lt;/p&gt;
&lt;h1 id="cost-of-elliptic-curve-encryption"&gt;Cost of elliptic curve encryption&lt;/h1&gt;
&lt;p&gt;With Elliptic Curve ElGamal, if we are using an &lt;em&gt;n&lt;/em&gt;-bit elliptic curve, we can
encrypt messages that are at most &lt;em&gt;n&lt;/em&gt;-bit long (actually less than that,
if we’re using padding), and the output is at least &lt;em&gt;2n&lt;/em&gt;-bit long (if the
resulting points $C_1$ and $C_2$ are encoded using point compression). This
means that encryption using Elliptic Curve ElGamal doubles the size of the data
that we want to encrypt. It also requires a fair amount of compute resources,
because it involves a random number generation and 2 point multiplications.&lt;/p&gt;
&lt;p&gt;In short, Elliptic Curve ElGamal is expensive both in terms of space and in
terms of time and compute power, and this makes it unattractive in applications
like &lt;a href="https://en.wikipedia.org/wiki/Transport_Layer_Security"&gt;TLS&lt;/a&gt; or general
purpose encryption.&lt;/p&gt;
&lt;p&gt;So what can we use Elliptic Curve ElGamal for? We can use it to encrypt
&lt;em&gt;symmetric keys&lt;/em&gt;, such as
&lt;a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard"&gt;AES&lt;/a&gt; keys or
&lt;a href="https://en.wikipedia.org/wiki/ChaCha20"&gt;ChaCha20&lt;/a&gt; keys, and then use these
symmetric keys to encrypt our arbitrary data. Symmetric keys are relatively
short (ranging from 128 to 256 bits nowadays), so they can be encrypted with
one round of Elliptic Curve ElGamal with most curves. It’s worth noting that
this is the same approach that we use with
&lt;a href="https://en.wikipedia.org/wiki/RSA_(cryptosystem)"&gt;RSA&lt;/a&gt; encryption: for most
applications, we don’t use RSA to encrypt data directly, but rather we use RSA
to encrypt symmetric keys which are later used for encrypting data.&lt;/p&gt;
&lt;p&gt;These are the reason why schemes like Elliptic Curve ElGamal, or other methods of
encryption with elliptic curves, are not used in practice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;elliptic curve encryption is more expensive than hybrid encryption;&lt;/li&gt;
&lt;li&gt;hybrid encryption scales better and is more performant;&lt;/li&gt;
&lt;li&gt;elliptic curve key exchange is simpler and has fewer pitfalls than
  encryption.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In conclusion, there are no practical benefits from elliptic curve encryption
compared to hybrid encryption with key agreement, and that’s why we don’t use
it. However, the idea that elliptic curves cannot be used for encryption is a
myth, and I hope this article will help clarify that confusion.&lt;/p&gt;</content><category term="cryptography"></category><category term="ecc"></category><category term="encryption"></category><category term="elgamal"></category></entry><entry><title>The curious case of bad blocks on an SSD, and how I got rid of them</title><link href="https://andrea.corbellini.name/2022/12/29/curious-ssd-badblocks/" rel="alternate"></link><published>2022-12-29T04:00:00+00:00</published><updated>2022-12-29T04:00:00+00:00</updated><author><name>andreacorbellini</name></author><id>tag:andrea.corbellini.name,2022-12-29:/2022/12/29/curious-ssd-badblocks/</id><summary type="html">&lt;p&gt;I recently inherited a laptop that was broken by pouring some hot coffee on it.
When I dissected it, it was pretty clear that most of it was unrecoverable: the
CPU was completely fried, and its thermal paste splashed everywhere on the
motherboard. (I wish I took a picture of it that I could share.) There were
however a few pieces that looked in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently inherited a laptop that was broken by pouring some hot coffee on it.
When I dissected it, it was pretty clear that most of it was unrecoverable: the
CPU was completely fried, and its thermal paste splashed everywhere on the
motherboard. (I wish I took a picture of it that I could share.) There were
however a few pieces that looked in a good state. One of those components was a
NVMe Solid State Drive (SSD). I decided to take this SSD and recycle it in my
own laptop, maybe to join my LVM pool.&lt;/p&gt;
&lt;p&gt;When I plugged it in my laptop however the SSD I tried to navigate the
filesystem, and it appeared to be working quite slowly. Opening certain files
sometimes would hang indefinitely. Upon inspection of the SMART data and the
kernel logs, it was clear that the drive was returning plenty of &lt;strong&gt;read
errors&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Here is a sample of the kernel logs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ dmesg
...
[  860.465707] ata2.00: exception Emask 0x0 SAct 0x8 SErr 0x0 action 0x0
[  860.465726] ata2.00: irq_stat 0x40000008
[  860.465733] ata2.00: failed command: READ FPDMA QUEUED
[  860.465737] ata2.00: cmd 60/08:18:58:c5:28/00:00:00:00:00/40 tag 3 ncq dma 4096 in
[  860.465737]          res 41/40:08:58:c5:28/00:00:00:00:00/00 Emask 0x409 (media error) &amp;lt;F&amp;gt;
[  860.465750] ata2.00: status: { DRDY ERR }
[  860.465754] ata2.00: error: { UNC }
[  860.467010] ata2.00: configured for UDMA/133
[  860.467046] sd 1:0:0:0: [sda] tag#3 FAILED Result: hostbyte=DID_OK driverbyte=DRIVER_OK cmd_age=0s
[  860.467054] sd 1:0:0:0: [sda] tag#3 Sense Key : Medium Error [current]
[  860.467060] sd 1:0:0:0: [sda] tag#3 Add. Sense: Unrecovered read error - auto reallocate failed
[  860.467066] sd 1:0:0:0: [sda] tag#3 CDB: Read(10) 28 00 00 28 c5 58 00 00 08 00
[  860.467069] I/O error, dev sda, sector 2671960 op 0x0:(READ) flags 0x80700 phys_seg 1 prio class 0
...
[ 1057.914608] ata2: softreset failed (device not ready)
[ 1057.914623] ata2: hard resetting link
[ 1063.230631] ata2: found unknown device (class 0)
[ 1067.934891] ata2: softreset failed (device not ready)
[ 1067.934911] ata2: hard resetting link
[ 1073.270826] ata2: found unknown device (class 0)
[ 1078.486604] ata2: link is slow to respond, please be patient (ready=0)
[ 1102.970841] ata2: softreset failed (device not ready)
[ 1102.970860] ata2: limiting SATA link speed to 1.5 Gbps
[ 1102.970865] ata2: hard resetting link
[ 1108.034602] ata2: found unknown device (class 0)
[ 1108.194622] ata2: softreset failed (device not ready)
[ 1108.194638] ata2: reset failed, giving up
[ 1108.194642] ata2.00: disable device
[ 1108.194677] ata2: EH complete
[ 1108.194726] sd 1:0:0:0: [sda] tag#6 FAILED Result: hostbyte=DID_BAD_TARGET driverbyte=DRIVER_OK cmd_age=232s
[ 1108.194740] sd 1:0:0:0: [sda] tag#6 CDB: Synchronize Cache(10) 35 00 00 00 00 00 00 00 00 00
[ 1108.194748] I/O error, dev sda, sector 0 op 0x1:(WRITE) flags 0x800 phys_seg 0 prio class 0
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These logs show that the SSD was returning errors (exceptions) to the operating
system, and also that the SSD would sometimes become so slow to respond that
the kernel would attempt to reset it (which didn’t really work, I can tell
you).&lt;/p&gt;
&lt;p&gt;Here is an excerpt of the SMART data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ smartctl -a /dev/sda
...
SMART Attributes Data Structure revision number: 0
Vendor Specific SMART Attributes with Thresholds:
ID# ATTRIBUTE_NAME          FLAG     VALUE WORST THRESH TYPE      UPDATED  WHEN_FAILED RAW_VALUE
  1 Raw_Read_Error_Rate     0x000f   166   001   006    Pre-fail  Always   In_the_past 0
  5 Retired_Block_Count     0x0032   100   100   036    Old_age   Always       -       76
  9 Power_On_Hours          0x0032   099   099   000    Old_age   Always       -       1740
 12 Power_Cycle_Count       0x0032   100   100   020    Old_age   Always       -       2247
100 Total_Erase_Count       0x0032   100   100   000    Old_age   Always       -       7654272
168 Min_Erase_Count         0x0032   253   096   000    Old_age   Always       -       0
169 Max_Erase_Count         0x0032   083   083   000    Old_age   Always       -       181
171 Program_Fail_Count      0x0032   253   253   000    Old_age   Always       -       0
172 Erase_Fail_Count        0x0032   253   253   000    Old_age   Always       -       0
174 Unexpect_Power_Loss_Ct  0x0030   100   100   000    Old_age   Offline      -       14
175 Program_Fail_Count_Chip 0x0032   253   253   000    Old_age   Always       -       0
176 Unused_Rsvd_Blk_Cnt_Tot 0x0032   253   253   000    Old_age   Always       -       0
177 Wear_Leveling_Count     0x0032   090   090   000    Old_age   Always       -       116
178 Used_Rsvd_Blk_Cnt_Chip  0x0032   100   100   000    Old_age   Always       -       399
179 Used_Rsvd_Blk_Cnt_Tot   0x0032   100   100   000    Old_age   Always       -       2460
180 Erase_Fail_Count        0x0032   100   100   000    Old_age   Always       -       2980
184 End-to-End_Error        0x0032   100   100   000    Old_age   Always       -       9919
187 Reported_Uncorrect      0x0032   100   100   000    Old_age   Always       -       10051
188 Command_Timeout         0x0032   253   253   000    Old_age   Always       -       0
194 Temperature_Celsius     0x0002   038   000   000    Old_age   Always       -       38 (Min/Max 16/48)
195 Hardware_ECC_Recovered  0x0032   100   085   000    Old_age   Always       -       715203
196 Reallocated_Event_Count 0x0032   100   100   036    Old_age   Always       -       76
198 Offline_Uncorrectable   0x0032   253   253   000    Old_age   Always       -       0
199 UDMA_CRC_Error_Count    0x0032   253   253   000    Old_age   Always       -       0
204 Soft_ECC_Correction     0x000e   100   001   000    Old_age   Always       -       13
212 Phy_Error_Count         0x0032   253   253   000    Old_age   Always       -       0
234 Unknown_SK_hynix_Attrib 0x0032   100   100   000    Old_age   Always       -       32297
241 Total_Writes_GB         0x0032   100   100   000    Old_age   Always       -       3715
242 Total_Reads_GB          0x0032   100   100   000    Old_age   Always       -       3680
250 Read_Retry_Count        0x0032   096   096   000    Old_age   Always       -       176835377
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This table show various attributes for the operational status of the SSD. The
meaning of the numeric values is pretty much vendor-specific, so trying to
understand those number exactly is quite a challenge, but what matters is that
the numbers under the &lt;code&gt;VALUE&lt;/code&gt; column are higher than the &lt;code&gt;THRESH&lt;/code&gt; (threshold)
column. The &lt;code&gt;WORST&lt;/code&gt; column indicates the lowest &lt;code&gt;VALUE&lt;/code&gt; that has ever been
observed.&lt;/p&gt;
&lt;p&gt;To my surprise, despite all the errors and hangs that the SSD was experiencing,
the SMART values looked pretty good. Sure, there’s a very low &lt;code&gt;WORST&lt;/code&gt; value for
&lt;code&gt;Raw_Read_Error_Rate&lt;/code&gt; (001, much lower than the threshold 001), and there is
also and indication that this attribute failed in the past, but besides that
everything looked acceptable enough.&lt;/p&gt;
&lt;p&gt;Of course the SMART log was recording the read errors as well. Here’s another
excerpt from the output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ smartctl -a /dev/sda
...
SMART Error Log Version: 1
ATA Error Count: 1875 (device log contains only the most recent five errors)
...

Error 1875 occurred at disk power-on lifetime: 1737 hours (72 days + 9 hours)
  When the command that caused the error occurred, the device was active or idle.

  After command completion occurred, registers were:
  ER ST SC SN CL CH DH
  -- -- -- -- -- -- --
  40 41 00 00 00 00 00  Error: UNC at LBA = 0x00000000 = 0

  Commands leading to the command that caused the error were:
  CR FR SC SN CL CH DH DC   Powered_Up_Time  Command/Feature_Name
  -- -- -- -- -- -- -- --  ----------------  --------------------
  60 08 70 98 31 af 40 40      00:02:32.920  READ FPDMA QUEUED
  47 00 01 30 08 00 a0 a0      00:02:32.920  READ LOG DMA EXT
  47 00 01 30 00 00 a0 a0      00:02:32.920  READ LOG DMA EXT
  47 00 01 00 00 00 a0 a0      00:02:32.920  READ LOG DMA EXT
  ef 10 02 00 00 00 a0 a0      00:02:32.920  SET FEATURES [Enable SATA feature]

...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Give the lack of concrete signs of old age or extended damage to the SSD, I
wondered if it could be a link problem: maybe I did not insert the drive
correctly, or maybe a pin was dirty. But no: upon inspection I did not find any
issue, and after carefully reseating the drive, the problem was persisting.&lt;/p&gt;
&lt;p&gt;I proceeded to run a SMART self test, here are the results (from most recent to oldest):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;SMART Self-test log structure revision number 1
Num  Test_Description    Status                  Remaining  LifeTime(hours)  LBA_of_first_error
# 1  Short captive       Completed: read failure       90%      1736         5712
# 2  Short offline       Completed: read failure       90%      1736         5712
# 3  Extended offline    Completed: read failure       90%      1733         50117792
# 4  Extended captive    Interrupted (host reset)      90%      1730         -
# 5  Short captive       Interrupted (host reset)      90%      1730         -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first two tests were interrupted by Linux, which tried to reset the device
while the tests were running. A self-test (as the name suggests) is completely
self contained and does not involve sharing of data between the SSD and the
operating system in the process. The fact that the self-test was failing due to
bad blocks was therefore a sign that this was not a link error, but that the
blocks were really damaged.&lt;/p&gt;
&lt;p&gt;I decided therefore to give up on trying to fix the SSD, but I still wanted to
use it. After all, it was working for the most part: as long as you didn’t
access the bad blocks, the SSD would behave fine. So here is my plan: I would
format the SSD and create an ext4 filesystem on it, using &lt;code&gt;mkfs.ext4 -c&lt;/code&gt;, which
would scan for and exclude bad blocks so that they wouldn’t be used. The
resulting filesystem would have less storage available than the advertised
capacity of the SSD, but that was an acceptable trade-off for me.&lt;/p&gt;
&lt;p&gt;And here is the most interesting part: &lt;code&gt;mkfs.ext4 -c&lt;/code&gt; &lt;strong&gt;discarded all blocks
before creating the filesystem&lt;/strong&gt;. After that, it &lt;strong&gt;scanned for bad blocks and,
shockingly, it found none!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SMART self-tests also did not report any error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;SMART Self-test log structure revision number 1
Num  Test_Description    Status                  Remaining  LifeTime(hours)  LBA_of_first_error
# 1  Extended offline    Completed without error       00%      1740         -
# 2  Short offline       Completed without error       00%      1738         -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All the read errors, exceptions and the hanging problem that kept appearing
before disappeared!&lt;/p&gt;
&lt;p&gt;I’m not fully sure how to explain how this happened, but I did some research
and the general consensus is that discarding bad blocks won’t recover them. My
theory is that, when the coffee was poured on the laptop, a spike of voltage
led to incorrect values to be written to a few blocks that were in use at that
time, causing uncorrectable discrepancies between the data and the
error-correcting-codes of the SSD. Discarding the blocks reset both the data
cells and the ECC cells, removing all the inconsistencies.&lt;/p&gt;
&lt;p&gt;Do you have a better explanation? Let me know in the comments!&lt;/p&gt;</content><category term="information-technology"></category><category term="ubuntu"></category><category term="storage"></category><category term="ssd"></category><category term="badblocks"></category></entry><entry><title>How to use the same DNS for all connections in Ubuntu (and other network privacy tricks)</title><link href="https://andrea.corbellini.name/2020/04/28/ubuntu-global-dns/" rel="alternate"></link><published>2020-04-28T06:30:00+00:00</published><updated>2020-04-28T06:30:00+00:00</updated><author><name>andreacorbellini</name></author><id>tag:andrea.corbellini.name,2020-04-28:/2020/04/28/ubuntu-global-dns/</id><summary type="html">&lt;h1 id="problem"&gt;Problem&lt;/h1&gt;
&lt;p&gt;Currently Ubuntu does not offer an easy way to set up a “global” DNS for all network connections: whenever you connect to a new WiFi network, if you don’t want to use the DNS server provided by the WiFi, you are forced to go to the network settings and manually set your preferred DNS server.&lt;/p&gt;
&lt;p&gt;With this brief guide I want to …&lt;/p&gt;</summary><content type="html">&lt;h1 id="problem"&gt;Problem&lt;/h1&gt;
&lt;p&gt;Currently Ubuntu does not offer an easy way to set up a “global” DNS for all network connections: whenever you connect to a new WiFi network, if you don’t want to use the DNS server provided by the WiFi, you are forced to go to the network settings and manually set your preferred DNS server.&lt;/p&gt;
&lt;p&gt;With this brief guide I want to show how you can setup a global DNS to be used for &lt;em&gt;all&lt;/em&gt; the WiFi and network connections, both old and new ones. I will also show you how to use DNSSEC, DNS-over-TLS and randomized MAC addresses for all connections.&lt;/p&gt;
&lt;p&gt;This guide is written for Ubuntu 20.04, but in general it will work on every distribution using systemd-resolved and NetworkManager.&lt;/p&gt;
&lt;h1 id="step-1-setup-the-global-dns-in-resolved"&gt;Step 1: setup the Global DNS in resolved&lt;/h1&gt;
&lt;p&gt;In Ubuntu (as well as many other distributions), DNS is managed by systemd-resolved. Its configuration is in &lt;code&gt;/etc/systemd/resolved.conf&lt;/code&gt;. Open that file and add a &lt;code&gt;DNS=&lt;/code&gt; line inside the &lt;code&gt;[Resolve]&lt;/code&gt; section listing your preferred DNS servers. For example, if you want to use &lt;a href="https://1.1.1.1/"&gt;&lt;code&gt;1.1.1.1&lt;/code&gt;&lt;/a&gt;, your &lt;code&gt;resolved.conf&lt;/code&gt; should look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[Resolve]
DNS=1.1.1.1 1.0.0.1 2606:4700:4700::1111 2606:4700:4700::1001
#FallbackDNS=
#Domains=
#LLMNR=no
#MulticastDNS=no
#Cache=yes
#DNSStubListener=yes
#ReadEtcHosts=yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once you are done with the changes, reload systemd-resolved:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo systemctl restart systemd-resolved.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can check your changes with &lt;code&gt;resolvectl status&lt;/code&gt;: you should see your DNS servers on top of the output, under the &lt;em&gt;Global&lt;/em&gt; section:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ resolvectl status
Global
       LLMNR setting: no
MulticastDNS setting: no
  DNSOverTLS setting: opportunistic
      DNSSEC setting: allow-downgrade
    DNSSEC supported: no
  Current DNS Server: 1.1.1.1
         DNS Servers: 1.1.1.1
                      1.0.0.1
                      2606:4700:4700::1111
                      2606:4700:4700::1001
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This however won’t be enough to use that DNS! In fact, the &lt;em&gt;Global&lt;/em&gt; DNS of systemd-resolved is just a default option that is used whenever no DNS servers are configured for an interface. When you connect to a WiFi network, NetworkManager will ask the access point for a list of DNS servers and will communicate that list to systemd-resolved, effectively overriding the settings that we just edited. If you scroll down the output of &lt;code&gt;resolvectl status&lt;/code&gt;, you will see the DNS servers added by NetworkManager. We have to tell NetworkManager to stop doing that.&lt;/p&gt;
&lt;h1 id="step-2-disable-dns-processing-in-networkmanager"&gt;Step 2: Disable DNS processing in NetworkManager&lt;/h1&gt;
&lt;p&gt;In order for systemd-resolved to consider our global DNS, we need to tell NetworkManager not to provide any DNS information for new connections. Doing that is easy: just create a new file &lt;code&gt;/etc/NetworkManager/conf.d/dns.conf&lt;/code&gt; (or any name you like) with this content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[main]
# do not use the dhcp-provided dns servers, but rather use the global
# ones specified in /etc/systemd/resolved.conf
dns=none
systemd-resolved=false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To apply the settings either restart your computer or run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo systemctl reload NetworkManager.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, when you connect to a new network connection, NetworkManager won’t push the list of DNS servers to systemd-resolved and only the global ones will be used. If you check &lt;code&gt;resolvectl status&lt;/code&gt;, you should see that, for every interface, there is &lt;em&gt;no&lt;/em&gt; DNS server specified. If you specified &lt;code&gt;1.1.1.1&lt;/code&gt; as your DNS servers, then you can also head over to &lt;a href="https://1.1.1.1/help"&gt;https://1.1.1.1/help&lt;/a&gt; to verify that they’ve been correctly set up.&lt;/p&gt;
&lt;h1 id="dnssec-and-dns-over-tls"&gt;DNSSEC and DNS-over-TLS&lt;/h1&gt;
&lt;p&gt;If you would like to enable DNSSEC and/or DNS-over-TLS, the file to edit is &lt;code&gt;/etc/systemd/resolved.conf&lt;/code&gt;. You can add the following options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DNSSEC=true&lt;/code&gt; if you want all queries to be DNSSEC-validated. The default is &lt;code&gt;DNSSEC=allow-downgrade&lt;/code&gt;, which attempts to use DNSSEC if it works properly, and falls back to disabling validation otherwise.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DNSOverTLS=true&lt;/code&gt; if you want all queries to go through TLS. You can also specify &lt;code&gt;DNSOverTLS=opportunistic&lt;/code&gt; to attempt to use TLS if it supported, and fall back to the plaintext DNS protocol if it’s not.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With those options, my &lt;code&gt;/etc/systemd/resolved.conf&lt;/code&gt; looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[Resolve]
DNS=1.1.1.1 1.0.0.1 2606:4700:4700::1111 2606:4700:4700::1001
#FallbackDNS=
#Domains=
#LLMNR=no
#MulticastDNS=no
DNSSEC=true
DNSOverTLS=opportunistic
#Cache=yes
#DNSStubListener=yes
#ReadEtcHosts=yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that I’m using &lt;code&gt;DNSOverTLS=opportunistic&lt;/code&gt; because I found that some access points with captive portals don’t work properly when using &lt;code&gt;DNSOverTLS=true&lt;/code&gt;. Also note that &lt;code&gt;DNSSEC=true&lt;/code&gt; may cause some pain because there are still many misconfigured domain records out there that will make make DNSSEC validation fail.&lt;/p&gt;
&lt;p&gt;Like before, to apply the changes, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo systemctl restart systemd-resolved.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And to verify the changes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;resolvectl status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you’re using &lt;code&gt;1.1.1.1&lt;/code&gt;, you can also go to &lt;a href="https://1.1.1.1/help"&gt;https://1.1.1.1/help&lt;/a&gt; to verify DNS-over-TLS.&lt;/p&gt;
&lt;h1 id="random-mac-address"&gt;Random MAC address&lt;/h1&gt;
&lt;p&gt;NetworkManager supports 3 options to have a random MAC address (also known as “cloned” or “spoofed” MAC address):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;wifi.scan-rand-mac-address&lt;/code&gt; controls the MAC address used when scanning for WiFi devices. This goes into the &lt;code&gt;[device]&lt;/code&gt; section&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wifi.cloned-mac-address&lt;/code&gt; controls the MAC address for WiFi connections. This goes into the &lt;code&gt;[connection]&lt;/code&gt; section&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ethernet.cloned-mac-address&lt;/code&gt; controls the MAC address for Ethernet connections. This goes into the &lt;code&gt;[connection]&lt;/code&gt; section&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first option can take either &lt;code&gt;yes&lt;/code&gt; or &lt;code&gt;no&lt;/code&gt;. The last two can take various values, but if you want a randomized MAC address you are interested in these two:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;random&lt;/code&gt;: generate a new random MAC address each time you establish a connection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stable&lt;/code&gt;: this generates a MAC address that is kinda random (it’s a hash), but will be reused when you connect to the same network again.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;random&lt;/code&gt; is better if you don’t want to be tracked, but it has the disadvantage that captive portals won’t remember you. Instead &lt;code&gt;stable&lt;/code&gt; allows captive portals to remember you and therefore won’t show up whenever you reconnect.&lt;/p&gt;
&lt;p&gt;Whatever options you want to go with, put them into a file &lt;code&gt;/etc/NetworkManager/conf.d/mac.conf&lt;/code&gt; (or any other name you like). Mine looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[device]
# use a random mac address when scanning for wifi networks
wifi.scan-rand-mac-address=yes

[connection]
# use a random mac address when connecting to a network
ethernet.cloned-mac-address=random
wifi.cloned-mac-address=random
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To apply the settings either run restart your computer or run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo systemctl reload NetworkManager.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can test your changes with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ip link
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="ubuntu"></category><category term="ubuntu"></category><category term="systemd"></category><category term="resolved"></category><category term="network-manager"></category><category term="dns"></category><category term="mac-address"></category><category term="privacy"></category></entry><entry><title>11 years of Ubuntu membership</title><link href="https://andrea.corbellini.name/2018/05/12/11-years-of-ubuntu-membership/" rel="alternate"></link><published>2018-05-12T21:30:00+00:00</published><updated>2018-05-12T21:30:00+00:00</updated><author><name>andreacorbellini</name></author><id>tag:andrea.corbellini.name,2018-05-12:/2018/05/12/11-years-of-ubuntu-membership/</id><summary type="html">&lt;p&gt;It’s been 11 years and 1 month since I was awarded with &lt;a href="https://wiki.ubuntu.com/Membership"&gt;official Ubuntu membership&lt;/a&gt;. I will never forget that day: as a kid I had to write about myself on &lt;a href="https://en.wikipedia.org/wiki/Internet_Relay_Chat"&gt;IRC&lt;/a&gt;, in front of the Community Council members and answer their questions in a language that was not my primary one. I must confess that I was a bit scared that evening …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It’s been 11 years and 1 month since I was awarded with &lt;a href="https://wiki.ubuntu.com/Membership"&gt;official Ubuntu membership&lt;/a&gt;. I will never forget that day: as a kid I had to write about myself on &lt;a href="https://en.wikipedia.org/wiki/Internet_Relay_Chat"&gt;IRC&lt;/a&gt;, in front of the Community Council members and answer their questions in a language that was not my primary one. I must confess that I was a bit scared that evening, but once I made it, it felt &lt;em&gt;so&lt;/em&gt; good. It felt good not just because of the award itself, but rather because that was the recognition that I did &lt;em&gt;something&lt;/em&gt; that &lt;em&gt;mattered&lt;/em&gt;. I did something useful that other people could benefit from. And for me, that meant a lot.&lt;/p&gt;
&lt;p&gt;So much time has passed since then. So many things have changed both in my life and around me, for better or worse. So many that I cannot even &lt;a href="https://en.wikipedia.org/wiki/Cantor%27s_diagonal_argument"&gt;enumerate&lt;/a&gt; all of them. Nonetheless, deep inside of me, I still feel like that young kid: curious, always ready to experiment, full of hopes and uncertain (but never scared) about the future.&lt;/p&gt;
&lt;p&gt;Through the years I received the support of a bunch of people who believed in me, and I thank them all. But if today I feel so hopeful it’s undoubtedly thanks to one person in particular, a person who holds a special place in my life. A big thank you goes to you.&lt;/p&gt;</content><category term="ubuntu"></category><category term="ubuntu"></category></entry><entry><title>Running Docker Swarm inside LXC (outdated)</title><link href="https://andrea.corbellini.name/2016/04/13/docker-swarm-inside-lxc/" rel="alternate"></link><published>2016-04-13T18:00:00+00:00</published><updated>2016-04-13T18:00:00+00:00</updated><author><name>andreacorbellini</name></author><id>tag:andrea.corbellini.name,2016-04-13:/2016/04/13/docker-swarm-inside-lxc/</id><summary type="html">&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; This article was written in 2016 and refers to a version of Docker Swarm that is now known as “legacy Swarm”. The newer Docker Swarm won’t work in LXC as described in this article.&lt;/p&gt;
&lt;p&gt;I’ve been using &lt;a href="https://docs.docker.com/swarm/"&gt;Docker Swarm&lt;/a&gt; inside &lt;a href="https://linuxcontainers.org/lxc/introduction/"&gt;LXC&lt;/a&gt; containers for a while now, and I thought that I could share my experience with you. Due to their nature …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; This article was written in 2016 and refers to a version of Docker Swarm that is now known as “legacy Swarm”. The newer Docker Swarm won’t work in LXC as described in this article.&lt;/p&gt;
&lt;p&gt;I’ve been using &lt;a href="https://docs.docker.com/swarm/"&gt;Docker Swarm&lt;/a&gt; inside &lt;a href="https://linuxcontainers.org/lxc/introduction/"&gt;LXC&lt;/a&gt; containers for a while now, and I thought that I could share my experience with you. Due to their nature, LXC containers are pretty lightweight and require very few resources if compared to virtual machines. This makes LXC ideal for development and simulation purposes. Running Docker Swarm inside LXC requires a few steps that I’m going to show you in this tutorial.&lt;/p&gt;
&lt;p&gt;Before we begin, a quick premise: LXC, Docker and Swarm can be configured in many different ways. Here I’m showing just my preferred setup: LXC with AppArmor disabled, Docker with the OverlayFS storage driver, Swarm with etcd discovery. There exist many other kind of configurations that can work under LXC &amp;mdash; leave a comment if you want to know more.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Overview:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="#step-1"&gt;Create the Swarm Manager container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-2"&gt;Modify configuration for the Swarm Manager container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-3"&gt;Load the OverlayFS module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-4"&gt;Start the container and install Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-5"&gt;Check if Docker is working&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-6"&gt;Set up the Swarm Manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-7"&gt;Create the Swarm Agents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-8"&gt;Play with the Swarm&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Terminology:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;em&gt;host&lt;/em&gt; is the system that will create and start the LXC containers (e.g. your laptop);&lt;/li&gt;
&lt;li&gt;the &lt;em&gt;manager&lt;/em&gt; is the LXC container that will run the Swarm manager (it’ll run the &lt;code&gt;swarm manage&lt;/code&gt; command);&lt;/li&gt;
&lt;li&gt;an &lt;em&gt;agent&lt;/em&gt; is one of the many LXC containers that will run a Swarm agent node (it’ll run the &lt;code&gt;swarm join&lt;/code&gt; command);&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To avoid ambiguity, all commands will be prefixed with a prompt such as &lt;code&gt;root@host:~#&lt;/code&gt;, &lt;code&gt;root@swarm-manager:~#&lt;/code&gt; and &lt;code&gt;root@swarm-agent-1:~#&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This tutorial assumes that you have at least a vague idea of what Docker and Docker Swarm are. You should also be familiar with the shell.&lt;/p&gt;
&lt;p&gt;This tutorial has been successfully tested on Ubuntu 15.10 (that ships with Docker 1.6) and Ubuntu 16.04 LTS (Docker 1.10), but it may work on other distributions and Docker versions as well.&lt;/p&gt;
&lt;h1 id="step-1"&gt;Step 1: Create the Swarm Manager container&lt;/h1&gt;
&lt;p&gt;Create a new LXC container with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;root@host:~# &lt;/span&gt;lxc-create&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;download&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;swarm-manager
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When prompted, choose your favorite distribution and architecture. I chose &lt;code&gt;ubuntu&lt;/code&gt; / &lt;code&gt;xenial&lt;/code&gt; / &lt;code&gt;amd64&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lxc-create&lt;/code&gt; needs to run as root, &lt;a href="https://www.stgraber.org/2014/01/17/lxc-1-0-unprivileged-containers/"&gt;unprivileged containers&lt;/a&gt; won’t work. We could actually make Docker start inside an unprivileged container, the problem is that we wouldn’t be allowed to create block and character devices, and many Docker containers need this ability.&lt;/p&gt;
&lt;h1 id="step-2"&gt;Step 2: Modify the configuration for the Swarm Manager container&lt;/h1&gt;
&lt;p&gt;Before starting the LXC container, open the file &lt;code&gt;/var/lib/lxc/swarm-manager/config&lt;/code&gt; on the host and add the following configuration to the bottom of the file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Distribution configuration&lt;/span&gt;
&lt;span class="c1"&gt;# ...&lt;/span&gt;

&lt;span class="c1"&gt;# Container specific configuration&lt;/span&gt;
&lt;span class="c1"&gt;# ...&lt;/span&gt;

&lt;span class="c1"&gt;# Network configuration&lt;/span&gt;
&lt;span class="c1"&gt;# ...&lt;/span&gt;

&lt;span class="c1"&gt;# Allow running Docker inside LXC&lt;/span&gt;
lxc.aa_profile&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;unconfined
lxc.cap.drop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first rule (&lt;code&gt;lxc.aa_profile = unconfined&lt;/code&gt;) disables AppArmor confinement. The second one (&lt;code&gt;lxc.cap.drop =&lt;/code&gt;) gives all capabilities to the processes in LXC container.&lt;/p&gt;
&lt;p&gt;These two rules may seem harmful from a security standpoint, and in fact they are. However we must remember that we will be running Docker inside the LXC container. Docker already ships with its own AppArmor profile and the two rules above are needed exactly for the purposes of letting Docker talk to AppArmor.&lt;/p&gt;
&lt;p&gt;So, while Docker itself won’t be confined, &lt;strong&gt;Docker containers will be confined&lt;/strong&gt;, and this is an encouraging fact.&lt;/p&gt;
&lt;h1 id="step-3"&gt;Step 3: Load the OverlayFS module&lt;/h1&gt;
&lt;p&gt;OverlayFS is shipped with Ubuntu, but not enabled by default. To enable it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;root@host:~# &lt;/span&gt;modprobe&lt;span class="w"&gt; &lt;/span&gt;overlay
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is important to do this step before installing Docker. Docker supports various storage drivers and when Docker is installed for the first time it tries to detect the most appropriate one for the system. If Docker detects that OverlayFS is not loaded, it’ll fall back to the device mapper. There’s nothing wrong with the device mapper, we can make it work, however, as I said at the beginning, in this tutorial I’m focusing only on OverlayFS.&lt;/p&gt;
&lt;p&gt;If you want to load OverlayFS at boot, instead of doing it manually after every reboot, add it to &lt;code&gt;/etc/modules-load.d/modules.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;root@host:~# &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;overlay&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/etc/modules-load.d/modules.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="step-4"&gt;Step 4: Start the container and install Docker&lt;/h1&gt;
&lt;p&gt;It’s time to see if we did everything right!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;root@host:~# &lt;/span&gt;lxc-start&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;swarm-manager
&lt;span class="gp"&gt;root@host:~# &lt;/span&gt;lxc-attach&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;swarm-manager
&lt;span class="gp"&gt;root@swarm-manager:~# &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;update
&lt;span class="gp"&gt;root@swarm-manager:~# &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;docker.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Installation should complete without any problem. If you get an error like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Job for docker.service failed because the control process exited with error code. See &amp;quot;systemctl status docker.service&amp;quot; and &amp;quot;journalctl -xe&amp;quot; for details.
invoke-rc.d: initscript docker, action &amp;quot;start&amp;quot; failed.
dpkg: error processing package docker.io (--configure):
 subprocess installed post-installation script returned error exit status 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It means that Docker failed to start. Try checking &lt;code&gt;systemctl status docker&lt;/code&gt; as suggested, or run &lt;code&gt;docker daemon&lt;/code&gt; manually. You might get an error like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;root@swarm-manager:~# &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;daemon
&lt;span class="go"&gt;WARN[0000] devmapper: Udev sync is not supported. This will lead to unexpected behavior, data loss and errors. For more information, see https://docs.docker.com/reference/commandline/daemon/#daemon-storage-driver-option&lt;/span&gt;
&lt;span class="go"&gt;ERRO[0000] There are no more loopback devices available.&lt;/span&gt;
&lt;span class="go"&gt;ERRO[0000] [graphdriver] prior storage driver &amp;quot;devicemapper&amp;quot; failed: loopback attach failed&lt;/span&gt;
&lt;span class="go"&gt;FATA[0000] Error starting daemon: error initializing graphdriver: loopback attach failed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this case, Docker is using the devicemapper storage driver and is complaining about the lack of loopback devices. If that’s the case, check whether OverlayFS is loaded and reinstall Docker.&lt;/p&gt;
&lt;p&gt;Or you might get an error like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;root@swarm-manager:~# &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;daemon
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;span class="go"&gt;FATA[0000] Error starting daemon: AppArmor enabled on system but the docker-default profile could not be loaded.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It this other case, Docker is complaining about the fact that it can’t talk to AppArmor. Check the configuration for the LXC container.&lt;/p&gt;
&lt;h1 id="step-5"&gt;Step 5: Check if Docker is working&lt;/h1&gt;
&lt;p&gt;Once you are all set, you should be able to use Docker: try running &lt;code&gt;docker info&lt;/code&gt;, &lt;code&gt;docker ps&lt;/code&gt; or launch a container:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;root@swarm-manager:~# &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;--rm&lt;span class="w"&gt; &lt;/span&gt;docker/whalesay&lt;span class="w"&gt; &lt;/span&gt;cowsay&lt;span class="w"&gt; &lt;/span&gt;burp!
&lt;span class="go"&gt;Unable to find image &amp;#39;docker/whalesay:latest&amp;#39; locally&lt;/span&gt;
&lt;span class="go"&gt;latest: Pulling from docker/whalesay&lt;/span&gt;
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;span class="go"&gt;Status: Downloaded newer image for docker/whalesay:latest&lt;/span&gt;
&lt;span class="go"&gt; _______&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt; burp! &amp;gt;&lt;/span&gt;
&lt;span class="go"&gt; -------&lt;/span&gt;
&lt;span class="go"&gt;    \&lt;/span&gt;
&lt;span class="go"&gt;     \&lt;/span&gt;
&lt;span class="go"&gt;      \&lt;/span&gt;
&lt;span class="gp"&gt;                    #&lt;/span&gt;&lt;span class="c1"&gt;#        .&lt;/span&gt;
&lt;span class="gp"&gt;              #&lt;/span&gt;&lt;span class="c1"&gt;# ## ##       ==&lt;/span&gt;
&lt;span class="gp"&gt;           #&lt;/span&gt;&lt;span class="c1"&gt;# ## ## ##      ===&lt;/span&gt;
&lt;span class="go"&gt;       /&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;___/ ===&lt;/span&gt;
&lt;span class="go"&gt;  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~&lt;/span&gt;
&lt;span class="go"&gt;       \______ o          __/&lt;/span&gt;
&lt;span class="go"&gt;        \    \        __/&lt;/span&gt;
&lt;span class="go"&gt;          \____\______/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It appears to be working. By the way, we can check whether Docker is correctly confining containers. Try running a Docker container and check on the host the output of &lt;code&gt;aa-status&lt;/code&gt;: you should see a process running with the &lt;code&gt;docker-default&lt;/code&gt; profile. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;root@swarm-manager:~# &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;--rm&lt;span class="w"&gt; &lt;/span&gt;ubuntu&lt;span class="w"&gt; &lt;/span&gt;bash&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;while true; do sleep 1; echo -n zZ; done&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;zZzZzZzZzZzZzZzZ...&lt;/span&gt;

&lt;span class="gp"&gt;# &lt;/span&gt;On&lt;span class="w"&gt; &lt;/span&gt;another&lt;span class="w"&gt; &lt;/span&gt;shell
&lt;span class="gp"&gt;root@host:~# &lt;/span&gt;aa-status
&lt;span class="go"&gt;apparmor module is loaded.&lt;/span&gt;
&lt;span class="go"&gt;5 profiles are loaded.&lt;/span&gt;
&lt;span class="go"&gt;5 profiles are in enforce mode.&lt;/span&gt;
&lt;span class="go"&gt;   /sbin/dhclient&lt;/span&gt;
&lt;span class="go"&gt;   /usr/lib/NetworkManager/nm-dhcp-client.action&lt;/span&gt;
&lt;span class="go"&gt;   /usr/lib/NetworkManager/nm-dhcp-helper&lt;/span&gt;
&lt;span class="go"&gt;   /usr/lib/connman/scripts/dhclient-script&lt;/span&gt;
&lt;span class="go"&gt;   docker-default&lt;/span&gt;
&lt;span class="go"&gt;0 profiles are in complain mode.&lt;/span&gt;
&lt;span class="go"&gt;4 processes have profiles defined.&lt;/span&gt;
&lt;span class="go"&gt;4 processes are in enforce mode.&lt;/span&gt;
&lt;span class="go"&gt;   /sbin/dhclient (797)&lt;/span&gt;
&lt;span class="go"&gt;   /sbin/dhclient (2832)&lt;/span&gt;
&lt;span class="go"&gt;   docker-default (6956)&lt;/span&gt;
&lt;span class="go"&gt;   docker-default (6973)&lt;/span&gt;
&lt;span class="go"&gt;0 processes are in complain mode.&lt;/span&gt;
&lt;span class="go"&gt;0 processes are unconfined but have a profile defined.&lt;/span&gt;

&lt;span class="gp"&gt;root@host:~# &lt;/span&gt;ps&lt;span class="w"&gt; &lt;/span&gt;-ef&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;6956&lt;/span&gt;
&lt;span class="go"&gt;root      6956  4982  0 17:17 ?        00:00:00 bash -c while true; do sleep 1; echo -n zZ; done&lt;/span&gt;
&lt;span class="go"&gt;root      6973  6956  0 17:17 ?        00:00:00 sleep 1&lt;/span&gt;
&lt;span class="go"&gt;root      6982  6808  0 17:17 pts/3    00:00:00 grep --color=auto 6956&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yay! Everything is running as expected: we launched a process inside a Docker container, and that process is running with the &lt;code&gt;docker-default&lt;/code&gt; AppArmor profile. Once again: even if LXC is running unconfined, our Docker containers are not.&lt;/p&gt;
&lt;h1 id="step-6"&gt;Step 6: Set up the Swarm Manager&lt;/h1&gt;
&lt;p&gt;That was the hardest part. Now we can proceed setting up Swarm as we would usually do.&lt;/p&gt;
&lt;p&gt;As I said at the beginning, Swarm can be configured in many ways. In this tutorial I’ll show how to set it up with etcd discovery. First of all, we need the IP address of the LXC container:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;root@swarm-manager:~# &lt;/span&gt;ifconfig&lt;span class="w"&gt; &lt;/span&gt;eth0
&lt;span class="go"&gt;eth0      Link encap:Ethernet  HWaddr 00:16:3e:8e:cb:43&lt;/span&gt;
&lt;span class="go"&gt;          inet addr:10.0.3.154  Bcast:10.0.3.255  Mask:255.255.255.0&lt;/span&gt;
&lt;span class="go"&gt;          inet6 addr: fe80::216:3eff:fe8e:cb43/64 Scope:Link&lt;/span&gt;
&lt;span class="go"&gt;          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1&lt;/span&gt;
&lt;span class="go"&gt;          RX packets:23177 errors:0 dropped:0 overruns:0 frame:0&lt;/span&gt;
&lt;span class="go"&gt;          TX packets:20859 errors:0 dropped:0 overruns:0 carrier:0&lt;/span&gt;
&lt;span class="go"&gt;          collisions:0 txqueuelen:1000&lt;/span&gt;
&lt;span class="go"&gt;          RX bytes:147652946 (147.6 MB)  TX bytes:1455613 (1.4 MB)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;10.0.3.154&lt;/code&gt; is my IP address. Let’s start etcd:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;root@swarm-manager:~# &lt;/span&gt;&lt;span class="nv"&gt;SWARM_MANAGER_IP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.0.3.154

&lt;span class="gp"&gt;root@swarm-manager:~# &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;--restart&lt;span class="o"&gt;=&lt;/span&gt;always&lt;span class="w"&gt; &lt;/span&gt;--name&lt;span class="o"&gt;=&lt;/span&gt;etcd&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4001&lt;/span&gt;:4001&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2380&lt;/span&gt;:2380&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2379&lt;/span&gt;:2379&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;quay.io/coreos/etcd&lt;span class="w"&gt; &lt;/span&gt;-name&lt;span class="w"&gt; &lt;/span&gt;etcd0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;-advertise-client-urls&lt;span class="w"&gt; &lt;/span&gt;http://&lt;span class="nv"&gt;$SWARM_MANAGER_IP&lt;/span&gt;:2379,http://&lt;span class="nv"&gt;$SWARM_MANAGER_IP&lt;/span&gt;:4001&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;-listen-client-urls&lt;span class="w"&gt; &lt;/span&gt;http://0.0.0.0:2379,http://0.0.0.0:4001&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;-initial-advertise-peer-urls&lt;span class="w"&gt; &lt;/span&gt;http://&lt;span class="nv"&gt;$SWARM_MANAGER_IP&lt;/span&gt;:2380&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;-listen-peer-urls&lt;span class="w"&gt; &lt;/span&gt;http://0.0.0.0:2380&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;-initial-cluster-token&lt;span class="w"&gt; &lt;/span&gt;etcd-cluster-1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;-initial-cluster&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;etcd0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://&lt;span class="nv"&gt;$SWARM_MANAGER_IP&lt;/span&gt;:2380&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;-initial-cluster-state&lt;span class="w"&gt; &lt;/span&gt;new
&lt;span class="go"&gt;Unable to find image &amp;#39;quay.io/coreos/etcd:latest&amp;#39; locally&lt;/span&gt;
&lt;span class="go"&gt;latest: Pulling from coreos/etcd&lt;/span&gt;
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;span class="go"&gt;Status: Downloaded newer image for quay.io/coreos/etcd:latest&lt;/span&gt;
&lt;span class="go"&gt;e742278a97d2ad3f88658aa871903d20b4094e551969a03aa8332d3876fe5d0d&lt;/span&gt;

&lt;span class="gp"&gt;root@swarm-manager:~# &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;ps
&lt;span class="go"&gt;CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                                                                NAMES&lt;/span&gt;
&lt;span class="go"&gt;e742278a97d2        quay.io/coreos/etcd   &amp;quot;/etcd -name etcd0 -a&amp;quot;   32 seconds ago      Up 31 seconds       0.0.0.0:2379-2380-&amp;gt;2379-2380/tcp, 0.0.0.0:4001-&amp;gt;4001/tcp, 7001/tcp   etcd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Replace &lt;code&gt;10.0.3.154&lt;/code&gt; with the IP address of your LXC container.&lt;/p&gt;
&lt;p&gt;Note that I’ve started etcd with &lt;code&gt;--restart=always&lt;/code&gt;, so that every time etcd is automatically started when the LXC container starts. With this option, etcd will restart even if you explicitly stop it. Drop &lt;code&gt;--restart=always&lt;/code&gt; if that’s not what you want.&lt;/p&gt;
&lt;p&gt;Now we can start the Swarm manager:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;root@swarm-manager:~# &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;--restart&lt;span class="o"&gt;=&lt;/span&gt;always&lt;span class="w"&gt; &lt;/span&gt;--name&lt;span class="o"&gt;=&lt;/span&gt;swarm&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3375&lt;/span&gt;:3375&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;swarm&lt;span class="w"&gt; &lt;/span&gt;manage&lt;span class="w"&gt; &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:3375&lt;span class="w"&gt; &lt;/span&gt;etcd://&lt;span class="nv"&gt;$SWARM_MANAGER_IP&lt;/span&gt;:2379
&lt;span class="go"&gt;Unable to find image &amp;#39;swarm:latest&amp;#39; locally&lt;/span&gt;
&lt;span class="go"&gt;latest: Pulling from library/swarm&lt;/span&gt;
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;span class="go"&gt;Status: Downloaded newer image for swarm:latest&lt;/span&gt;
&lt;span class="go"&gt;8080c93c544ff92cc2cf682ff0bbc82e0d2dfb01e1f98f202c3a0801d3427330&lt;/span&gt;

&lt;span class="gp"&gt;root@swarm-manager:~# &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;ps
&lt;span class="go"&gt;CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                                                                NAMES&lt;/span&gt;
&lt;span class="go"&gt;46b556e73e87        swarm                 &amp;quot;/swarm manage -H 0.0&amp;quot;   3 seconds ago       Up 2 seconds        2375/tcp, 0.0.0.0:3375-&amp;gt;3375/tcp                                     swarm&lt;/span&gt;
&lt;span class="go"&gt;e742278a97d2        quay.io/coreos/etcd   &amp;quot;/etcd -name etcd0 -a&amp;quot;   7 minutes ago       Up 7 minutes        0.0.0.0:2379-2380-&amp;gt;2379-2380/tcp, 0.0.0.0:4001-&amp;gt;4001/tcp, 7001/tcp   etcd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our Swarm manager is up and running. We can connect to it and issue a few commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;root@swarm-manager:~# &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;localhost:3375&lt;span class="w"&gt; &lt;/span&gt;info
&lt;span class="go"&gt;Containers: 0&lt;/span&gt;
&lt;span class="go"&gt; Running: 0&lt;/span&gt;
&lt;span class="go"&gt; Paused: 0&lt;/span&gt;
&lt;span class="go"&gt; Stopped: 0&lt;/span&gt;
&lt;span class="go"&gt;Images: 0&lt;/span&gt;
&lt;span class="go"&gt;Server Version: swarm/1.1.3&lt;/span&gt;
&lt;span class="go"&gt;Role: primary&lt;/span&gt;
&lt;span class="go"&gt;Strategy: spread&lt;/span&gt;
&lt;span class="go"&gt;Filters: health, port, dependency, affinity, constraint&lt;/span&gt;
&lt;span class="go"&gt;Nodes: 0&lt;/span&gt;
&lt;span class="go"&gt;Plugins:&lt;/span&gt;
&lt;span class="go"&gt; Volume:&lt;/span&gt;
&lt;span class="go"&gt; Network:&lt;/span&gt;
&lt;span class="go"&gt;Kernel Version: 4.4.0-15-generic&lt;/span&gt;
&lt;span class="go"&gt;Operating System: linux&lt;/span&gt;
&lt;span class="go"&gt;Architecture: amd64&lt;/span&gt;
&lt;span class="go"&gt;CPUs: 0&lt;/span&gt;
&lt;span class="go"&gt;Total Memory: 0 B&lt;/span&gt;
&lt;span class="go"&gt;Name: d39c33295ef3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see there are no nodes connected, as we would expect. Everything looks good.&lt;/p&gt;
&lt;h1 id="step-7"&gt;Step 7: Create the Swarm Agents&lt;/h1&gt;
&lt;p&gt;Our Swarm manager can’t do anything interesting without agent nodes. Creating new LXC containers for the agents is not much different from what we already did with the manager. To set up new agents in an automatic fashion I’ve created a script, so that you don’t need to repeat the steps manually:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-eu

&lt;span class="nv"&gt;SWARM_MANAGER_IP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.0.3.154
&lt;span class="nv"&gt;DOWNLOAD_DIST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ubuntu
&lt;span class="nv"&gt;DOWNLOAD_RELEASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;xenial
&lt;span class="nv"&gt;DOWNLOAD_ARCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;amd64

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;LXC_NAME&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;LXC_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/var/lib/lxc/&lt;/span&gt;&lt;span class="nv"&gt;$LXC_NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;LXC_ROOTFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LXC_PATH&lt;/span&gt;&lt;span class="s2"&gt;/rootfs&amp;quot;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Create the container.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;lxc-create&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;download&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LXC_NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$DOWNLOAD_DIST&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$DOWNLOAD_RELEASE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$DOWNLOAD_ARCH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;lt;&amp;lt;EOF &amp;gt;&amp;gt; &amp;quot;$LXC_PATH/config&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;# Allow running Docker inside LXC&lt;/span&gt;
&lt;span class="s"&gt;lxc.aa_profile = unconfined&lt;/span&gt;
&lt;span class="s"&gt;lxc.cap.drop =&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Start the container and wait for networking to start.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;lxc-start&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LXC_NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;sleep&lt;span class="w"&gt; &lt;/span&gt;10s

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Install Docker.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;lxc-attach&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LXC_NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;update
&lt;span class="w"&gt;    &lt;/span&gt;lxc-attach&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LXC_NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;docker.io

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Tell Docker to listen on all interfaces.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;sed&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s/^#DOCKER_OPTS=.*$/DOCKER_OPTS=&amp;quot;-H 0.0.0.0:2375&amp;quot;/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LXC_ROOTFS&lt;/span&gt;&lt;span class="s2"&gt;/etc/default/docker&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;lxc-attach&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LXC_NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--&lt;span class="w"&gt; &lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;restart&lt;span class="w"&gt; &lt;/span&gt;docker

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Join the Swarm.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;SWARM_AGENT_IP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;lxc-attach&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LXC_NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--&lt;span class="w"&gt; &lt;/span&gt;ifconfig&lt;span class="w"&gt; &lt;/span&gt;eth0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;-Po&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(?&amp;lt;=inet addr:)\S+&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;lxc-attach&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LXC_NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;--restart&lt;span class="o"&gt;=&lt;/span&gt;always&lt;span class="w"&gt; &lt;/span&gt;--name&lt;span class="o"&gt;=&lt;/span&gt;swarm&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;swarm&lt;span class="w"&gt; &lt;/span&gt;join&lt;span class="w"&gt; &lt;/span&gt;--addr&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SWARM_AGENT_IP&lt;/span&gt;&lt;span class="s2"&gt;:2375&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;etcd://&lt;/span&gt;&lt;span class="nv"&gt;$SWARM_MANAGER_IP&lt;/span&gt;&lt;span class="s2"&gt;:2379&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Be sure to change the values for &lt;code&gt;SWARM_MANAGER_IP&lt;/code&gt;, &lt;code&gt;DOWNLOAD_DIST&lt;/code&gt;, &lt;code&gt;DOWNLOAD_RELEASE&lt;/code&gt; and &lt;code&gt;DOWNLOAD_ARCH&lt;/code&gt; to fit your needs.&lt;/p&gt;
&lt;p&gt;Thanks to this script, creating 10 new agents is as simple as running one command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;root@host:~# &lt;/span&gt;./swarm-agent-create&lt;span class="w"&gt; &lt;/span&gt;swarm-agent-&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;..9&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here’s an explanation of what the script does:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It first sets up a new LXC container following steps 1-5 above, that is: create a new LXC container (with &lt;code&gt;lxc-create&lt;/code&gt;), apply the LXC configuration (&lt;code&gt;lxc.aa_profile&lt;/code&gt; and &lt;code&gt;lxc.cap.drop&lt;/code&gt; rules), start the container and install Docker.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;LXC_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/var/lib/lxc/&lt;/span&gt;&lt;span class="nv"&gt;$LXC_NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;LXC_ROOTFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LXC_PATH&lt;/span&gt;&lt;span class="s2"&gt;/rootfs&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Create the container.&lt;/span&gt;
lxc-create&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;download&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LXC_NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$DOWNLOAD_DIST&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$DOWNLOAD_RELEASE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$DOWNLOAD_ARCH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

cat&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;lt;&amp;lt;EOF &amp;gt;&amp;gt; &amp;quot;$LXC_PATH/config&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;# Allow running Docker inside LXC&lt;/span&gt;
&lt;span class="s"&gt;lxc.aa_profile = unconfined&lt;/span&gt;
&lt;span class="s"&gt;lxc.cap.drop =&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;

&lt;span class="c1"&gt;# Start the container and wait for networking to start.&lt;/span&gt;
lxc-start&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LXC_NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
sleep&lt;span class="w"&gt; &lt;/span&gt;10s

&lt;span class="c1"&gt;# Install Docker.&lt;/span&gt;
lxc-attach&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LXC_NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;update
lxc-attach&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LXC_NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;docker.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our Swarm agents need to be reachable by the manager. For this reason we need to configure them so that they bind to a public interface. To do so, the script adds &lt;code&gt;DOCKER_OPTS="-H 0.0.0.0:2375"&lt;/code&gt; and restarts Docker.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Tell Docker to listen on all interfaces.&lt;/span&gt;
sed&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s/^#DOCKER_OPTS=.*$/DOCKER_OPTS=&amp;quot;-H 0.0.0.0:2375&amp;quot;/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LXC_ROOTFS&lt;/span&gt;&lt;span class="s2"&gt;/etc/default/docker&amp;quot;&lt;/span&gt;
lxc-attach&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LXC_NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--&lt;span class="w"&gt; &lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;restart&lt;span class="w"&gt; &lt;/span&gt;docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lastly, the script checks the IP address for the LXC container and it launches Swarm.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Join the Swarm.&lt;/span&gt;
&lt;span class="nv"&gt;SWARM_AGENT_IP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;lxc-attach&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LXC_NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--&lt;span class="w"&gt; &lt;/span&gt;ifconfig&lt;span class="w"&gt; &lt;/span&gt;eth0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;-Po&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(?&amp;lt;=inet addr:)\S+&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
lxc-attach&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LXC_NAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;--restart&lt;span class="o"&gt;=&lt;/span&gt;always&lt;span class="w"&gt; &lt;/span&gt;--name&lt;span class="o"&gt;=&lt;/span&gt;swarm&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;swarm&lt;span class="w"&gt; &lt;/span&gt;join&lt;span class="w"&gt; &lt;/span&gt;--addr&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SWARM_AGENT_IP&lt;/span&gt;&lt;span class="s2"&gt;:2375&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;etcd://&lt;/span&gt;&lt;span class="nv"&gt;$SWARM_MANAGER_IP&lt;/span&gt;&lt;span class="s2"&gt;:2379&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="step-8"&gt;Step 8: Play with the Swarm&lt;/h1&gt;
&lt;p&gt;Now, if we check &lt;code&gt;docker info&lt;/code&gt; on the Swarm manager, we should see 10 healthy nodes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;root@swarm-manager:~# &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;localhost:3375&lt;span class="w"&gt; &lt;/span&gt;info
&lt;span class="go"&gt;Containers: 10&lt;/span&gt;
&lt;span class="go"&gt; Running: 10&lt;/span&gt;
&lt;span class="go"&gt; Paused: 0&lt;/span&gt;
&lt;span class="go"&gt; Stopped: 0&lt;/span&gt;
&lt;span class="go"&gt;Images: 10&lt;/span&gt;
&lt;span class="go"&gt;Server Version: swarm/1.1.3&lt;/span&gt;
&lt;span class="go"&gt;Role: primary&lt;/span&gt;
&lt;span class="go"&gt;Strategy: spread&lt;/span&gt;
&lt;span class="go"&gt;Filters: health, port, dependency, affinity, constraint&lt;/span&gt;
&lt;span class="go"&gt;Nodes: 10&lt;/span&gt;
&lt;span class="go"&gt; swarm-agent-0: 10.0.3.73:2375&lt;/span&gt;
&lt;span class="go"&gt;  └ Status: Healthy&lt;/span&gt;
&lt;span class="go"&gt;  └ Containers: 1&lt;/span&gt;
&lt;span class="go"&gt;  └ Reserved CPUs: 0 / 4&lt;/span&gt;
&lt;span class="go"&gt;  └ Reserved Memory: 0 B / 4.052 GiB&lt;/span&gt;
&lt;span class="go"&gt;  └ Labels: executiondriver=native-0.2, kernelversion=4.4.0-15-generic, operatingsystem=Ubuntu 16.04, storagedriver=overlay&lt;/span&gt;
&lt;span class="go"&gt;  └ Error: (none)&lt;/span&gt;
&lt;span class="go"&gt;  └ UpdatedAt: 2016-04-13T15:32:35Z&lt;/span&gt;
&lt;span class="go"&gt; swarm-agent-1: 10.0.3.97:2375&lt;/span&gt;
&lt;span class="go"&gt;  └ Status: Healthy&lt;/span&gt;
&lt;span class="go"&gt;  └ Containers: 1&lt;/span&gt;
&lt;span class="go"&gt;  └ Reserved CPUs: 0 / 4&lt;/span&gt;
&lt;span class="go"&gt;  └ Reserved Memory: 0 B / 4.052 GiB&lt;/span&gt;
&lt;span class="go"&gt;  └ Labels: executiondriver=native-0.2, kernelversion=4.4.0-15-generic, operatingsystem=Ubuntu 16.04, storagedriver=overlay&lt;/span&gt;
&lt;span class="go"&gt;  └ Error: (none)&lt;/span&gt;
&lt;span class="go"&gt;  └ UpdatedAt: 2016-04-13T15:31:49Z&lt;/span&gt;
&lt;span class="go"&gt; swarm-agent-2: 10.0.3.58:2375&lt;/span&gt;
&lt;span class="go"&gt;  └ Status: Healthy&lt;/span&gt;
&lt;span class="go"&gt;  └ Containers: 1&lt;/span&gt;
&lt;span class="go"&gt;  └ Reserved CPUs: 0 / 4&lt;/span&gt;
&lt;span class="go"&gt;  └ Reserved Memory: 0 B / 4.052 GiB&lt;/span&gt;
&lt;span class="go"&gt;  └ Labels: executiondriver=native-0.2, kernelversion=4.4.0-15-generic, operatingsystem=Ubuntu 16.04, storagedriver=overlay&lt;/span&gt;
&lt;span class="go"&gt;  └ Error: (none)&lt;/span&gt;
&lt;span class="go"&gt;  └ UpdatedAt: 2016-04-13T15:31:54Z&lt;/span&gt;
&lt;span class="go"&gt; swarm-agent-3: 10.0.3.195:2375&lt;/span&gt;
&lt;span class="go"&gt;  └ Status: Healthy&lt;/span&gt;
&lt;span class="go"&gt;  └ Containers: 1&lt;/span&gt;
&lt;span class="go"&gt;  └ Reserved CPUs: 0 / 4&lt;/span&gt;
&lt;span class="go"&gt;  └ Reserved Memory: 0 B / 4.052 GiB&lt;/span&gt;
&lt;span class="go"&gt;  └ Labels: executiondriver=native-0.2, kernelversion=4.4.0-15-generic, operatingsystem=Ubuntu 16.04, storagedriver=overlay&lt;/span&gt;
&lt;span class="go"&gt;  └ Error: (none)&lt;/span&gt;
&lt;span class="go"&gt;  └ UpdatedAt: 2016-04-13T15:32:03Z&lt;/span&gt;
&lt;span class="go"&gt; swarm-agent-4: 10.0.3.235:2375&lt;/span&gt;
&lt;span class="go"&gt;  └ Status: Healthy&lt;/span&gt;
&lt;span class="go"&gt;  └ Containers: 1&lt;/span&gt;
&lt;span class="go"&gt;  └ Reserved CPUs: 0 / 4&lt;/span&gt;
&lt;span class="go"&gt;  └ Reserved Memory: 0 B / 4.052 GiB&lt;/span&gt;
&lt;span class="go"&gt;  └ Labels: executiondriver=native-0.2, kernelversion=4.4.0-15-generic, operatingsystem=Ubuntu 16.04, storagedriver=overlay&lt;/span&gt;
&lt;span class="go"&gt;  └ Error: (none)&lt;/span&gt;
&lt;span class="go"&gt;  └ UpdatedAt: 2016-04-13T15:32:22Z&lt;/span&gt;
&lt;span class="go"&gt; swarm-agent-5: 10.0.3.174:2375&lt;/span&gt;
&lt;span class="go"&gt;  └ Status: Healthy&lt;/span&gt;
&lt;span class="go"&gt;  └ Containers: 1&lt;/span&gt;
&lt;span class="go"&gt;  └ Reserved CPUs: 0 / 4&lt;/span&gt;
&lt;span class="go"&gt;  └ Reserved Memory: 0 B / 4.052 GiB&lt;/span&gt;
&lt;span class="go"&gt;  └ Labels: executiondriver=native-0.2, kernelversion=4.4.0-15-generic, operatingsystem=Ubuntu 16.04, storagedriver=overlay&lt;/span&gt;
&lt;span class="go"&gt;  └ Error: (none)&lt;/span&gt;
&lt;span class="go"&gt;  └ UpdatedAt: 2016-04-13T15:32:16Z&lt;/span&gt;
&lt;span class="go"&gt; swarm-agent-6: 10.0.3.222:2375&lt;/span&gt;
&lt;span class="go"&gt;  └ Status: Healthy&lt;/span&gt;
&lt;span class="go"&gt;  └ Containers: 1&lt;/span&gt;
&lt;span class="go"&gt;  └ Reserved CPUs: 0 / 4&lt;/span&gt;
&lt;span class="go"&gt;  └ Reserved Memory: 0 B / 4.052 GiB&lt;/span&gt;
&lt;span class="go"&gt;  └ Labels: executiondriver=native-0.2, kernelversion=4.4.0-15-generic, operatingsystem=Ubuntu 16.04, storagedriver=overlay&lt;/span&gt;
&lt;span class="go"&gt;  └ Error: (none)&lt;/span&gt;
&lt;span class="go"&gt;  └ UpdatedAt: 2016-04-13T15:32:21Z&lt;/span&gt;
&lt;span class="go"&gt; swarm-agent-7: 10.0.3.140:2375&lt;/span&gt;
&lt;span class="go"&gt;  └ Status: Healthy&lt;/span&gt;
&lt;span class="go"&gt;  └ Containers: 1&lt;/span&gt;
&lt;span class="go"&gt;  └ Reserved CPUs: 0 / 4&lt;/span&gt;
&lt;span class="go"&gt;  └ Reserved Memory: 0 B / 4.052 GiB&lt;/span&gt;
&lt;span class="go"&gt;  └ Labels: executiondriver=native-0.2, kernelversion=4.4.0-15-generic, operatingsystem=Ubuntu 16.04, storagedriver=overlay&lt;/span&gt;
&lt;span class="go"&gt;  └ Error: (none)&lt;/span&gt;
&lt;span class="go"&gt;  └ UpdatedAt: 2016-04-13T15:31:43Z&lt;/span&gt;
&lt;span class="go"&gt; swarm-agent-8: 10.0.3.95:2375&lt;/span&gt;
&lt;span class="go"&gt;  └ Status: Healthy&lt;/span&gt;
&lt;span class="go"&gt;  └ Containers: 1&lt;/span&gt;
&lt;span class="go"&gt;  └ Reserved CPUs: 0 / 4&lt;/span&gt;
&lt;span class="go"&gt;  └ Reserved Memory: 0 B / 4.052 GiB&lt;/span&gt;
&lt;span class="go"&gt;  └ Labels: executiondriver=native-0.2, kernelversion=4.4.0-15-generic, operatingsystem=Ubuntu 16.04, storagedriver=overlay&lt;/span&gt;
&lt;span class="go"&gt;  └ Error: (none)&lt;/span&gt;
&lt;span class="go"&gt;  └ UpdatedAt: 2016-04-13T15:32:17Z&lt;/span&gt;
&lt;span class="go"&gt; swarm-agent-9: 10.0.3.125:2375&lt;/span&gt;
&lt;span class="go"&gt;  └ Status: Healthy&lt;/span&gt;
&lt;span class="go"&gt;  └ Containers: 1&lt;/span&gt;
&lt;span class="go"&gt;  └ Reserved CPUs: 0 / 4&lt;/span&gt;
&lt;span class="go"&gt;  └ Reserved Memory: 0 B / 4.052 GiB&lt;/span&gt;
&lt;span class="go"&gt;  └ Labels: executiondriver=native-0.2, kernelversion=4.4.0-15-generic, operatingsystem=Ubuntu 16.04, storagedriver=overlay&lt;/span&gt;
&lt;span class="go"&gt;  └ Error: (none)&lt;/span&gt;
&lt;span class="go"&gt;  └ UpdatedAt: 2016-04-13T15:32:30Z&lt;/span&gt;
&lt;span class="go"&gt;Plugins:&lt;/span&gt;
&lt;span class="go"&gt; Volume:&lt;/span&gt;
&lt;span class="go"&gt; Network:&lt;/span&gt;
&lt;span class="go"&gt;Kernel Version: 4.4.0-15-generic&lt;/span&gt;
&lt;span class="go"&gt;Operating System: linux&lt;/span&gt;
&lt;span class="go"&gt;Architecture: amd64&lt;/span&gt;
&lt;span class="go"&gt;CPUs: 40&lt;/span&gt;
&lt;span class="go"&gt;Total Memory: 40.52 GiB&lt;/span&gt;
&lt;span class="go"&gt;Name: d39c33295ef3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let’s try running a command on the Swarm:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;root@swarm-manager:~# &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;localhost:3375&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;--rm&lt;span class="w"&gt; &lt;/span&gt;docker/whalesay&lt;span class="w"&gt; &lt;/span&gt;cowsay&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;It works!&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt; ___________&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt; It works! &amp;gt;&lt;/span&gt;
&lt;span class="go"&gt; -----------&lt;/span&gt;
&lt;span class="go"&gt;    \&lt;/span&gt;
&lt;span class="go"&gt;     \&lt;/span&gt;
&lt;span class="go"&gt;      \&lt;/span&gt;
&lt;span class="gp"&gt;                    #&lt;/span&gt;&lt;span class="c1"&gt;#        .&lt;/span&gt;
&lt;span class="gp"&gt;              #&lt;/span&gt;&lt;span class="c1"&gt;# ## ##       ==&lt;/span&gt;
&lt;span class="gp"&gt;           #&lt;/span&gt;&lt;span class="c1"&gt;# ## ## ##      ===&lt;/span&gt;
&lt;span class="go"&gt;       /&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;___/ ===&lt;/span&gt;
&lt;span class="go"&gt;  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~&lt;/span&gt;
&lt;span class="go"&gt;       \______ o          __/&lt;/span&gt;
&lt;span class="go"&gt;        \    \        __/&lt;/span&gt;
&lt;span class="go"&gt;          \____\______/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;We created a Swarm cluster consisting of one manager and 10 agents, and we kept memory and disk usage low thanks to LXC containers. We also succeeded in confining our Docker containers with AppArmor. Overall, this setup is probably not ideal for use in a production environment, but very useful for simulating clusters on your laptop.&lt;/p&gt;
&lt;p&gt;I hope you enjoyed the tutorial. Feel free to leave a comment if you have questions!&lt;/p&gt;</content><category term="information-technology"></category><category term="docker"></category><category term="swarm"></category><category term="lxc"></category><category term="containers"></category><category term="distributed-computing"></category></entry><entry><title>When bureaucracy hits the web: the cookie law</title><link href="https://andrea.corbellini.name/2015/09/22/cookie-law/" rel="alternate"></link><published>2015-09-22T18:35:00+00:00</published><updated>2015-09-22T18:35:00+00:00</updated><author><name>andreacorbellini</name></author><id>tag:andrea.corbellini.name,2015-09-22:/2015/09/22/cookie-law/</id><summary type="html">&lt;p&gt;For a few years now, every first of April I hoped to read between the news something on the lines of “the cookie law was a joke, sorry for that”. You know, bureaucracy is slow, and it’s reasonable to think that it takes time for them to reveal jokes. Yet, many firsts of April have passed, and no such announcement has been made …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For a few years now, every first of April I hoped to read between the news something on the lines of “the cookie law was a joke, sorry for that”. You know, bureaucracy is slow, and it’s reasonable to think that it takes time for them to reveal jokes. Yet, many firsts of April have passed, and no such announcement has been made. Many missed opportunities for Europe to show their love for progress and their competence with the web.&lt;/p&gt;
&lt;p&gt;Being compliant with the EU cookie law is hard to do. It’s not just a matter of showing a boring banner, it’s a matter of defacing your web pages, writing long privacy policies that nobody will read, implementing ways to prevent certain cookies from being set.&lt;/p&gt;
&lt;p&gt;The truth is: if you, as a webmaster, want to avoid wasting time and avoid headaches, you just have to avoid cookies. This is what I have done with most websites I maintain: &lt;strong&gt;I have removed all analytics, all social sharing buttons, all YouTube videos, all comments&lt;/strong&gt;. This was a sad thing to do, but it was the only thing I could do: I maintain websites for free mainly as a favor for friends and no-profits I’m involved with &amp;mdash; it’s not my day job. Also, I do not want other people being sued because of mistakes from my side: cookies may be set in the most unexpected situations and disabling every feature that could potentially set them seems the safest choice.&lt;/p&gt;
&lt;p&gt;The only exception is this blog. Here, I use cookies for Google Analytics, for social sharing buttons and for Disqus. I may live without Google Analytics (even though it gives useful insights, such as performance statistics and tips), but I can’t really remove social buttons and Disqus: this is a blog and it wouldn’t make any sense to remove social features and comments.&lt;/p&gt;
&lt;p&gt;Being compliant with the EU cookie law has been on my todo list for a while, and I never found the time (nor the desire) to look into it. Today I did. I spent a few hours of my time to discover that &lt;strong&gt;Google Analytics is “OK”&lt;/strong&gt; (in the sense that I do not have to display an ugly banner, nor have to ask for explicit permission from the user before setting the cookies) and to discover that &lt;strong&gt;social buttons and Disqus are “bad”&lt;/strong&gt; (in the sense that I have to display a banner and ask for explicit consent from the user &lt;em&gt;before&lt;/em&gt; setting the cookies). In the end, the only service that I could remove is the less problematic service.&lt;/p&gt;
&lt;p&gt;As I said, I really do not want to remove social buttons, Disqus or whatever third-party content I’ll want to display in the future. Therefore, in order to comply with the cookie law, I’m forced to write code, write a privacy policy, waste another bunch of hours of my time. But not today, as I’ve already had enough sense of sadness and impotence.&lt;/p&gt;
&lt;p&gt;At least for now, I guess that the EU cookie law compliance will stay on my todo list for some more time. Probably if I worked on compliance instead of writing this rant, I could have already finished (but then what’s the point of having a blog if you don’t blog?)&lt;/p&gt;
&lt;p&gt;The cookie law wants to be “on the side of the users,” and it is based on noble principles: it wants users to be well-informed about how their data is used and by whom. However, as it is today, it’s against both users and webmasters. &lt;strong&gt;Webmasters have to lose their time working on compliance, and users receive a degraded experience due to silly regulations.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’d like to do &lt;a href="http://nocookielaw.com/"&gt;what Silktide did&lt;/a&gt;: actively protesting against the law, but I wouldn’t be so happy if I were sued. I’d like to read “the cookie law was a joke” in the news, but I’m starting to believe that it’s not going to happen any time soon. It seems that accepting the sadness of the reality is the only option I’m left with.&lt;/p&gt;
&lt;p&gt;End of rant, let’s move on.&lt;/p&gt;</content><category term="misc"></category><category term="blog"></category><category term="cookie-law"></category></entry><entry><title>Hello Pelican!</title><link href="https://andrea.corbellini.name/2015/08/02/hello-pelican/" rel="alternate"></link><published>2015-08-02T18:55:00+00:00</published><updated>2015-08-02T18:55:00+00:00</updated><author><name>andreacorbellini</name></author><id>tag:andrea.corbellini.name,2015-08-02:/2015/08/02/hello-pelican/</id><summary type="html">&lt;p&gt;Today I switched from WordPress.com to &lt;a href="http://getpelican.com/"&gt;Pelican&lt;/a&gt; and &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First off, let me say: almost all URLs that were previously working should still work. Only the feed URLs are broken, and this is not something I can fix. If you were following my blog via a feed reader, you should update to the new feed. Sorry for the inconvenience.&lt;/p&gt;
&lt;p&gt;Having said that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I switched from WordPress.com to &lt;a href="http://getpelican.com/"&gt;Pelican&lt;/a&gt; and &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First off, let me say: almost all URLs that were previously working should still work. Only the feed URLs are broken, and this is not something I can fix. If you were following my blog via a feed reader, you should update to the new feed. Sorry for the inconvenience.&lt;/p&gt;
&lt;p&gt;Having said that, I’d like to share with you the motivation that made me move and the details of the migration.&lt;/p&gt;
&lt;h1 id="the-bad-things-of-wordpress"&gt;The bad things of WordPress&lt;/h1&gt;
&lt;p&gt;Now, this doesn’t want to be a rant, so I’ll be pretty concise. WordPress, the content management system, is an excellent platform for blogging. Easy to start with, easy to maintain, easy to use. WordPress.com makes things even easier. It also comes with many useful features, like comments and social networks integration.&lt;/p&gt;
&lt;p&gt;The problem is: you can’t customize things or add features without paying. Of course, this is business, and I do not want to discuss business decisions made at WordPress.com. Not only that, but I could live fine with most of the major limitations. Also, I was perfectly conscious of this kind of problems with WordPress.com when I started (after all, this is not &lt;a href="https://andrea.corbellini.name/2015/02/15/new-blog-again/"&gt;the first blog I started&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I actually become upset of WordPress.com when writing the series of blog posts about &lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/"&gt;Elliptic Curve Cryptography&lt;/a&gt;. When writing these articles, I spent a lot of time employing workarounds to overcome WordPress.com limitations. Being used to Vim and its advanced features, I also found the editors (both the old and the new one) as a great obstacle for getting things done quickly. I do not want to enter the details of the problems I’m referring to, what matters is that, eventually, I gave up and I realized it was time to move on and seek for an alternative.&lt;/p&gt;
&lt;h1 id="why-pelican"&gt;Why Pelican&lt;/h1&gt;
&lt;p&gt;Pelican is a static site generator. I’ve always thought that a static site had too many limitations for me. But while seeking an alternative to WordPress.com, I realized that many of those limitations were not affecting me in any way. Actually, with a static site I can do everything I want: edit my articles with Vim, render my equations with MathJax, customize my theme, version control my content, write scripts to post process my content.&lt;/p&gt;
&lt;p&gt;The only bad thing about Pelican is that it does not come with any theme I truly like. I decided to make my own. I’m not entirely satisfied with it, as I feel it is too “anonymous”, but I believe it is fully responsive, fast, readable and offers all the features I want. Perhaps I’ll tweak it a little more to make it more “personal”.&lt;/p&gt;
&lt;p&gt;Setting up Pelican and migrating everything required some time, but at least this time I worked on true solutions, not on ugly hacks and workarounds like I did with WordPress. This implies that when writing articles I will be able to focus more on content than other details.&lt;/p&gt;
&lt;h1 id="why-not-other-static-site-generators"&gt;Why not other static site generators&lt;/h1&gt;
&lt;p&gt;In short: Pelican is written in Python and to my eyes it looked better than the other Python static site generators. I’ll be honest and say that I did not truly evaluate all of the alternatives: I knew &lt;a href="..."&gt;list.org&lt;/a&gt; switched to Pelican and that made me try Pelican before all other solutions.&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In the end I decided to leave WordPress for Pelican hosted on GitHub Pages. I’m pretty satisfied with the result I got. The nature of GitHub Pages prevents me from using HTTP redirects (and therefore the old feed links are broken), however in exchange I’ve got much more freedom, and this is what matters to me.&lt;/p&gt;</content><category term="misc"></category><category term="blog"></category><category term="pelican"></category><category term="wordpress"></category></entry><entry><title>Let's Encrypt is going to start soon</title><link href="https://andrea.corbellini.name/2015/06/16/lets-encrypt-is-going-to-start-soon/" rel="alternate"></link><published>2015-06-16T18:20:00+00:00</published><updated>2015-06-16T18:20:00+00:00</updated><author><name>andreacorbellini</name></author><id>tag:andrea.corbellini.name,2015-06-16:/2015/06/16/lets-encrypt-is-going-to-start-soon/</id><summary type="html">&lt;p&gt;&lt;a href="https://letsencrypt.org/"&gt;Let’s Encrypt&lt;/a&gt; (the free, automated and open certificate authority) has just &lt;a href="https://letsencrypt.org/2015/06/16/lets-encrypt-launch-schedule.html"&gt;announced its launch schedule&lt;/a&gt;. According to it, certificates will be released to the public starting from the &lt;strong&gt;week of September 14, 2015&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Their intermediate certificates, which &lt;a href="https://letsencrypt.org/2015/06/04/isrg-ca-certs.html"&gt;were generated a few days ago&lt;/a&gt;, will be signed by &lt;a href="https://www.identrustssl.com/"&gt;IdenTrust&lt;/a&gt;. What this means is that if you browse a web page secured by Let’s …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://letsencrypt.org/"&gt;Let’s Encrypt&lt;/a&gt; (the free, automated and open certificate authority) has just &lt;a href="https://letsencrypt.org/2015/06/16/lets-encrypt-launch-schedule.html"&gt;announced its launch schedule&lt;/a&gt;. According to it, certificates will be released to the public starting from the &lt;strong&gt;week of September 14, 2015&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Their intermediate certificates, which &lt;a href="https://letsencrypt.org/2015/06/04/isrg-ca-certs.html"&gt;were generated a few days ago&lt;/a&gt;, will be signed by &lt;a href="https://www.identrustssl.com/"&gt;IdenTrust&lt;/a&gt;. What this means is that if you browse a web page secured by Let’s Encrypt, you won’t get any scary message, but the usual green lock.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/green-lock.png" alt="Green lock" width="612" height="188"&gt;
  &lt;figcaption&gt;&lt;strong&gt;You will see this...&lt;/strong&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/red-lock.png" alt="Red lock" width="612" height="300"&gt;
  &lt;figcaption&gt;&lt;strong&gt;... not this.&lt;/strong&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In case you are curious: the root certificate is a 4096-bit RSA key, the two intermediate certificates are both 2048-bit RSA keys. But they are also &lt;a href="https://letsencrypt.org/certificates/"&gt;planning to generate ECDSA keys later this year&lt;/a&gt; as well.&lt;/p&gt;
&lt;p&gt;Technical aspects aside, this will be a great opportunity for the entire web. As I have &lt;a href="https://andrea.corbellini.name/2015/04/12/lets-encrypt-the-road-towards-a-better-web/"&gt;already written&lt;/a&gt;, I always dreamed of an encrypted web, and I truly believe that Let’s Encrypt — or at least its approach to the problem — is the way to go.&lt;/p&gt;
&lt;p&gt;So, will you get a Let’s Encrypt certificate when the time comes? I will do. Not for this blog (I can’t put a certificate without paying), but for other websites I manage.&lt;/p&gt;
&lt;p&gt;Perhaps I’ll also show a “Proudly secured by Let’s Encrypt” badge.&lt;/p&gt;</content><category term="cryptography"></category><category term="ecdsa"></category><category term="let's encrypt"></category><category term="rsa"></category><category term="security"></category><category term="tls"></category></entry><entry><title>Elliptic Curve Cryptography: breaking security and a comparison with RSA</title><link href="https://andrea.corbellini.name/2015/06/08/elliptic-curve-cryptography-breaking-security-and-a-comparison-with-rsa/" rel="alternate"></link><published>2015-06-08T13:28:00+00:00</published><updated>2015-06-08T13:28:00+00:00</updated><author><name>andreacorbellini</name></author><id>tag:andrea.corbellini.name,2015-06-08:/2015/06/08/elliptic-curve-cryptography-breaking-security-and-a-comparison-with-rsa/</id><summary type="html">&lt;p&gt;&lt;strong&gt;This post is the fourth and last in the series &lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/"&gt;ECC: a gentle introduction&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the &lt;a href="https://andrea.corbellini.name/2015/05/30/elliptic-curve-cryptography-ecdh-and-ecdsa/"&gt;last post&lt;/a&gt; we have seen two algorithms, ECDH and ECDSA, and we have seen how the discrete logarithm problem for elliptic curves plays an important role for their security. But, if you remember, we said that &lt;a href="https://andrea.corbellini.name/2015/05/23/elliptic-curve-cryptography-finite-fields-and-discrete-logarithms/#discrete-logarithm"&gt;we have no mathematical proofs&lt;/a&gt; for the complexity of the discrete logarithm …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;This post is the fourth and last in the series &lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/"&gt;ECC: a gentle introduction&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the &lt;a href="https://andrea.corbellini.name/2015/05/30/elliptic-curve-cryptography-ecdh-and-ecdsa/"&gt;last post&lt;/a&gt; we have seen two algorithms, ECDH and ECDSA, and we have seen how the discrete logarithm problem for elliptic curves plays an important role for their security. But, if you remember, we said that &lt;a href="https://andrea.corbellini.name/2015/05/23/elliptic-curve-cryptography-finite-fields-and-discrete-logarithms/#discrete-logarithm"&gt;we have no mathematical proofs&lt;/a&gt; for the complexity of the discrete logarithm problem: we believe it to be “hard”, but we can’t be sure. In the first part of this post, we’ll try to get an idea of how “hard” it is in practice with today’s techniques.&lt;/p&gt;
&lt;p&gt;Then, in the second part, we will try to answer the question: why do we need elliptic curve cryptography if RSA (and the other cryptosystems based on modular arithmetic) work well?&lt;/p&gt;
&lt;h1 id="breaking-the-discrete-logarithm-problem"&gt;Breaking the discrete logarithm problem&lt;/h1&gt;
&lt;p&gt;We will now see the two most efficient algorithms for computing discrete logarithms on elliptic curve: the baby-step, giant-step algorithm, and Pollard’s rho method.&lt;/p&gt;
&lt;p&gt;Before starting, as a reminder, here is what the discrete logarithm problem is about: &lt;strong&gt;given two points $P$ and $Q$ find out the integer $x$ that satisfies the equation $Q = xP$&lt;/strong&gt;. The points belong to a subgroup of an elliptic curve, which has a base point $G$ and which order is $n$.&lt;/p&gt;
&lt;h2 id="baby-step-giant-step"&gt;Baby-step, giant-step&lt;/h2&gt;
&lt;p&gt;Before entering the details of the algorithm, a quick consideration: we can always write any integer $x$ as &lt;strong&gt;$x = am + b$&lt;/strong&gt;, where $a$, $m$ and $b$ are three arbitrary integers. For example, we can write $10 = 2 \cdot 3 + 4$.&lt;/p&gt;
&lt;p&gt;With this in mind, we can rewrite the equation for the discrete logarithm problem as follows:
$$\begin{align*}
  Q &amp;amp; = xP \\
  Q &amp;amp; = (am + b) P \\
  Q &amp;amp; = am P + b P \\
  Q - am P &amp;amp; = b P
\end{align*}$$&lt;/p&gt;
&lt;p&gt;The baby-step giant-step is a “meet in the middle” algorithm. Contrary to the brute-force attack (which forces us to calculate all the points $xP$ for every $x$ until we find $Q$), we will calculate “few” values for $bP$ and “few” values for $Q - amP$ until we find a correspondence. The algorithm works as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Calculate $m = \left\lceil{\sqrt{n}}\right\rceil$&lt;/li&gt;
&lt;li&gt;For every $b$ in ${0, \dots, m}$, calculate $bP$ and store the results in a hash table.&lt;/li&gt;
&lt;li&gt;For every $a$ in ${0, \dots, m}$:&lt;ol&gt;
&lt;li&gt;calculate $amP$;&lt;/li&gt;
&lt;li&gt;calculate $Q - amP$;&lt;/li&gt;
&lt;li&gt;check the hash table and look if there exist a point $bP$ such that $Q - amP = bP$;&lt;/li&gt;
&lt;li&gt;if such point exists, then we have found $x = am + b$.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As you can see, initially we calculate the points $bP$ with little (i.e. &lt;strong&gt;“baby”&lt;/strong&gt;) increments for the coefficient $b$ ($1P$, $2P$, $3P$, …). Then, in the second part of the algorithm, we calculate the points $amP$ with huge (i.e. &lt;strong&gt;“giant”&lt;/strong&gt;) increments for $am$ ($1mP$, $2mP$, $3mP$, …, where $m$ is a huge number).&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/baby-step-giant-step.gif" alt="Baby-step, giant-step" width="310" height="346"&gt;
  &lt;figcaption&gt;The baby-step, giant-step algorithm: initially we calculate few points via small steps and store them in a hash table. Then we perform the giant steps and compare the new points with the points in the hash table. Once a match is found, calculating the discrete logarithm is a matter of rearranging terms.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;To understand why this algorithm works, forget for a moment that the points $bP$ are cached and take the equation $Q = amP + bP$. Consider what follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When $a = 0$ we are checking whether $Q$ is equal to $bP$, where $b$ is one of the integers from 0 to $m$. This way, we are comparing $Q$ against all points from $0P$ to $mP$.&lt;/li&gt;
&lt;li&gt;When $a = 1$ we are checking whether $Q$ is equal to $mP + bP$. We are comparing $Q$ against all points from $mP$ to $2mP$.&lt;/li&gt;
&lt;li&gt;When $a = 2$ we are comparing $Q$ against all the points from $2mP$ to $3mP$.&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;li&gt;When $a = m - 1$, we are comparing $Q$ against all points from $(m - 1)mP$ to $m^2 P = nP$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In conclusion, &lt;strong&gt;we are checking all points from $0P$ to $nP$&lt;/strong&gt; (that is, all the possible points) &lt;strong&gt;performing at most $2m$ additions and multiplications&lt;/strong&gt; (exactly $m$ for the baby steps, at most $m$ for the giant steps).&lt;/p&gt;
&lt;p&gt;If you consider that a lookup on a hash table takes $O(1)$ time, it’s easy to see that this algorithm has both &lt;strong&gt;time and space complexity $O(\sqrt{n})$&lt;/strong&gt; (or &lt;strong&gt;$O(2^{k / 2})$&lt;/strong&gt; if you consider the bit length). It’s still exponential time, but much better than a brute-force attack.&lt;/p&gt;
&lt;h3 id="baby-step-giant-step-in-practice"&gt;Baby-step giant-step in practice&lt;/h3&gt;
&lt;p&gt;It may make sense to see what the complexity $O(\sqrt{n})$ means in practice. Let’s take a standardized curve: &lt;code&gt;prime192v1&lt;/code&gt; (aka &lt;code&gt;secp192r1&lt;/code&gt;, &lt;code&gt;ansiX9p192r1&lt;/code&gt;). This curve has order $n$ = 0xffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831. The square root of $n$ is approximately 7.922816251426434 &amp;middot; 10&lt;sup&gt;28&lt;/sup&gt; (almost &lt;strong&gt;eighty octillions&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Now imagine storing $\sqrt{n}$ points in a hash table. Suppose that each point requires exactly 32 bytes: &lt;strong&gt;our hash table would need approximately 2.5 &amp;middot; 10&lt;sup&gt;30&lt;/sup&gt; bytes of memory&lt;/strong&gt;. &lt;a href="http://www.csc.com/big_data/flxwd/83638-big_data_just_beginning_to_explode_interactive_infographic"&gt;Looking on the web&lt;/a&gt;, it seems that the total world storage capacity is in the order of the zettabyte (10&lt;sup&gt;21&lt;/sup&gt; bytes). This is almost &lt;strong&gt;ten orders of magnitude&lt;/strong&gt; lower than the memory required by our hash table! Even if our points took 1 byte each, we would be still very far from being able to store all of them.&lt;/p&gt;
&lt;p&gt;This is impressive, and is even more impressive if you consider that &lt;code&gt;prime192v1&lt;/code&gt; is one of the curves with the lowest order. The order of &lt;code&gt;secp521r1&lt;/code&gt; (another standard curve from NIST) is approximately 6.9 &amp;middot; 10&lt;sup&gt;156&lt;/sup&gt;!&lt;/p&gt;
&lt;h3 id="playing-with-baby-step-giant-step"&gt;Playing with baby-step giant-step&lt;/h3&gt;
&lt;p&gt;I made &lt;a href="https://github.com/andreacorbellini/ecc/blob/master/logs/babygiantstep.py"&gt;a Python script&lt;/a&gt; that computes discrete logarithms using the baby-step giant-step algorithm. Obviously it only works with curves with small orders: don’t try it with &lt;code&gt;secp521r1&lt;/code&gt;, unless you want to receive a &lt;code&gt;MemoryError&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It should produce an output like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Curve: y^2 = (x^3 + 1x - 1) mod 10177
Curve order: 10331
p = (0x1, 0x1)
q = (0x1a28, 0x8fb)
325 * p = q
log(p, q) = 325
Took 105 steps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="pollards"&gt;Pollard’s &amp;rho;&lt;/h2&gt;
&lt;p&gt;Pollard’s rho is another algorithm for computing discrete logarithms. It has the same asymptotic time complexity $O(\sqrt{n})$ of the baby-step giant-step algorithm, but its space complexity is just $O(1)$. If baby-step giant-step can’t solve discrete logarithms because of the huge memory requirements, will Pollard’s rho make it? Let’s see…&lt;/p&gt;
&lt;p&gt;First of all, another reminder of the discrete logarithm problem: given $P$ and $Q$ find $x$ such that $Q = xP$. With Pollard’s rho, we will solve a sightly different problem: given $P$ and $Q$, &lt;strong&gt;find the integers $a$, $b$, $A$ and $B$ such that $aP + bQ = AP + BQ$&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Once the four integers are found, we can use the equation $Q = xP$ to find out $x$:
$$\begin{align*}
  aP + bQ &amp;amp; = AP + BQ \\
  aP + bxP &amp;amp; = AP + BxP \\
  (a + bx) P &amp;amp; = (A + Bx) P \\
  (a - A) P &amp;amp; = (B - b) xP
\end{align*}$$&lt;/p&gt;
&lt;p&gt;Now we can get rid of $P$. But before doing so, remember that our subgroup is cyclic with order $n$, therefore the coefficients used in point multiplication are modulo $n$:
$$\begin{align*}
  a - A &amp;amp; \equiv (B - b) x \pmod{n} \\
  x &amp;amp; = (a - A)(B - b)^{-1} \bmod{n}
\end{align*}$$&lt;/p&gt;
&lt;p&gt;The principle of operation of Pollard’s rho is simple: &lt;strong&gt;we generate a pseudo-random sequence of points $X_1$, $X_2$, … where each $X = a_i P + b_i Q$&lt;/strong&gt;. The sequence can be generated using a pseudo-random function $f$ like this:
$$(a_{i + 1}, b_{i + 1}) = f(X_i)$$&lt;/p&gt;
&lt;p&gt;That is: the pseudo-random function $f$ takes the latest point $X_i$ in the sequence as the input, and gives the coefficients $a_{i + 1}$ and $b_{i + 1}$ as the output. From there, we can calculate $X_{i + 1} = a_{i + 1} P + b_{i + 1} Q$; we can then input $X_{i + 1}$ into $f$ again and repeat.&lt;/p&gt;
&lt;p&gt;It doesn’t really matter how $f$ works internally (although certain functions may yield results faster than others), what matters is that $f$ determines the next point in the sequence based on the previous one, and that all the $a_i$ and $b_i$ coefficients are known by us.&lt;/p&gt;
&lt;p&gt;By using such $f$, sooner or later we will see a loop in our sequence. That is, we will see a point $X_j = X_i$.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/pollard-rho.png" alt="Pollard's rho cycle visualization" width="300" height="270"&gt;
  &lt;figcaption&gt;A visualization of what a cycle in the sequence might look like: have some initial points ($X_0$, $X_1$, $X_2$), and then the cycle itself, formed by the points $X_3$ to $X_8$. After that, $X_9 = X_3$, $X_{10} = X_4$ and so on.&lt;br&gt;This picture resembles the Greek letter &amp;rho; (rho), hence the name.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The reason why we must see the cycle is simple: the number of points is finite, hence they must repeat sooner or later. Once we see where the cycle is, we can use the equations above to figure out the discrete logarithm.&lt;/p&gt;
&lt;p&gt;The problem now is: how do we detect the cycle in an efficient way?&lt;/p&gt;
&lt;h3 id="tortoise-and-hare"&gt;Tortoise and Hare&lt;/h3&gt;
&lt;p&gt;To detect cycles, we have an efficient method: the &lt;strong&gt;tortoise and hare algorithm&lt;/strong&gt; (also known as Floyd’s cycle-finding algorithm). The picture below shows the principle of operation of the tortoise and hare method, which is at the core of Pollard’s rho.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/tortoise-hare.gif" alt="Tortoise and Hare" width="650" height="101"&gt;
  &lt;figcaption&gt;We have the curve $y^2 \equiv x^3 + 2x + 3 \pmod{97}$ and the points $P = (3, 6)$ and $Q = (80, 87)$. The points belong to a cyclic subgroup of order 5.&lt;br&gt;We walk a sequence of pairs at different speeds until we find two different pairs $(a, b)$ and $(A, B)$ that produce the same point. In this case, we have found the pairs $(3, 3)$ and $(2, 0)$ that allow us to calculate the logarithm as $x = (3 - 2)(0 - 3)^{-1} \bmod{5} = 3$. And in fact we correctly have $Q = 3P$.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;We take two pets, the tortoise and the hare, and make them walk our sequence of points from left to right. &lt;strong&gt;The tortoise&lt;/strong&gt; (the green spot in the picture) is slow and &lt;strong&gt;reads each point one by one&lt;/strong&gt;; &lt;strong&gt;the hare&lt;/strong&gt; (represented in red) is fast and &lt;strong&gt;skips a point at every step&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;After some time both the tortoise and the hare will have found the same point, but with different coefficient pairs. Or, to express that with equations, the tortoise will have found a pair $(a, b)$ and the hare will have found a pair $(A, B)$ such that $aP + bQ = AP + BQ$.&lt;/p&gt;
&lt;p&gt;It’s easy to see that this algorithm requires constant memory (&lt;strong&gt;$O(1)$ space complexity&lt;/strong&gt;). Calculating the asymptotic time complexity is not that easy, but we can build a probabilistic proof that shows how &lt;strong&gt;the time complexity is $O(\sqrt{n})$&lt;/strong&gt;, as we have already said. The proof is based on the “&lt;a href="https://en.wikipedia.org/wiki/Birthday_problem"&gt;birthday paradox&lt;/a&gt;”, which is about the probability of two people having the same birthday, where here we are concerned about the probability of two $(a, b)$ pairs yielding the same point.&lt;/p&gt;
&lt;h3 id="playing-with-pollards"&gt;Playing with Pollard’s &amp;rho;&lt;/h3&gt;
&lt;p&gt;I’ve built &lt;a href="https://github.com/andreacorbellini/ecc/blob/master/logs/pollardsrho.py"&gt;a Python script&lt;/a&gt; that computes discrete logarithms using Pollard’s rho. It is not the implementation of the original Pollard’s rho, but a slight variation of it (I’ve used a more efficient method for generating the pseudo-random sequence of pairs). The script contains some useful comments, so read it if you are interested in the details of the algorithm.&lt;/p&gt;
&lt;p&gt;This script, like the baby-step giant-step one, works on a tiny curve, and produces the same kind of output.&lt;/p&gt;
&lt;h3 id="pollards-in-practice"&gt;Pollard’s &amp;rho; in practice&lt;/h3&gt;
&lt;p&gt;We said that baby-step giant-step can’t be used in practice, because of the huge memory requirements. Pollard’s rho, on the other hand, requires very few memory. So, how practical is it?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Certicom launched a &lt;a href="https://www.certicom.com/index.php/the-certicom-ecc-challenge"&gt;challenge&lt;/a&gt; in 1998&lt;/strong&gt; to compute discrete logarithms on elliptic curves with bit lengths ranging from 109 to 359. As of today, &lt;strong&gt;only 109-bit long curves&lt;/strong&gt; have been successfully broken. The latest successful attempt was made in 2004. Quoting &lt;a href="http://en.wikipedia.org/wiki/Discrete_logarithm_records"&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The prize was awarded on 8 April 2004 to a group of about 2600 people represented by Chris Monico. They also used a version of a parallelized Pollard rho method, taking 17 months of calendar time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As we have already said, &lt;code&gt;prime192v1&lt;/code&gt; is one of the “smallest” elliptic curves. We also said that Pollard’s rho has $O(\sqrt{n})$ time complexity. If we used the same technique as Chris Monico (the same algorithm, on the same hardware, with the same number of machines), how much would it take to compute a logarithm on &lt;code&gt;prime192v1&lt;/code&gt;?
$$17\ \text{months}\ \times \frac{\sqrt{2^{192}}}{\sqrt{2^{109}}} \approx 5 \cdot 10^{13}\ \text{months}$$&lt;/p&gt;
&lt;p&gt;This number is pretty self-explanatory and gives a clear idea of how hard it can be to break a discrete logarithm using such techniques.&lt;/p&gt;
&lt;h2 id="pollards-vs-baby-step-giant-step"&gt;Pollard’s &amp;rho; vs Baby-step giant-step&lt;/h2&gt;
&lt;p&gt;I decided to put the &lt;a href="https://github.com/andreacorbellini/ecc/blob/master/logs/babygiantstep.py"&gt;baby-step giant-step script&lt;/a&gt; and the &lt;a href="https://github.com/andreacorbellini/ecc/blob/master/logs/pollardsrho.py"&gt;Pollard’s rho script&lt;/a&gt; together with a &lt;a href="https://github.com/andreacorbellini/ecc/blob/master/logs/bruteforce.py"&gt;brute-force script&lt;/a&gt; into a &lt;a href="https://github.com/andreacorbellini/ecc/blob/master/logs/comparelogs.py"&gt;fourth script&lt;/a&gt; to compare their performances.&lt;/p&gt;
&lt;p&gt;This fourth script computes all the logarithms for all the points on the “tiny” curve using different algorithms and reports how much time it did take:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Curve order: 10331
Using bruteforce
Computing all logarithms: 100.00% done
Took 2m 31s (5193 steps on average)
Using babygiantstep
Computing all logarithms: 100.00% done
Took 0m 6s (152 steps on average)
Using pollardsrho
Computing all logarithms: 100.00% done
Took 0m 21s (138 steps on average)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As we could expect, the brute-force method is tremendously slow if compared to the others two. Baby-step giant-step is the faster, while Pollard’s rho is more than three times slower than baby-step giant-step (although it uses far less memory and fewer number of steps on average).&lt;/p&gt;
&lt;p&gt;Also look at the number of steps: brute force used 5193 steps on average for computing each logarithm. 5193 is very near to 10331 / 2 (half the curve order). Baby-step giant-steps and Pollard’s rho used 152 steps and 138 steps respectively, two numbers very close to the square root of 10331 (101.64).&lt;/p&gt;
&lt;h2 id="final-consideration"&gt;Final consideration&lt;/h2&gt;
&lt;p&gt;While discussing these algorithms, I have presented many numbers. It’s important to be cautious when reading them: algorithms can be greatly optimized in many ways. Hardware can improve. Specialized hardware can be built.&lt;/p&gt;
&lt;p&gt;The fact that an approach today seems impractical, does not imply that the approach can’t be improved. It also does not imply that other, better approaches exist (remember, once again, that we have no proofs for the complexity of the discrete logarithm problem).&lt;/p&gt;
&lt;h1 id="shors-algorithm"&gt;Shor’s algorithm&lt;/h1&gt;
&lt;p&gt;If today’s techniques are unsuitable, what about tomorrow’s techniques? Well, things are a bit more worrisome: there exist a &lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Quantum_algorithm"&gt;quantum algorithm&lt;/a&gt; capable of computing discrete logarithms in polynomial time: &lt;a href="https://en.wikipedia.org/wiki/Shor%27s_algorithm"&gt;Shor’s algorithm&lt;/a&gt;&lt;/strong&gt;, which has time complexity $O((\log n)^3)$ and space complexity $O(\log n)$.&lt;/p&gt;
&lt;p&gt;Quantum computers are still far from becoming sophisticated enough to run algorithms like Shor’s, still the need for &lt;a href="https://en.wikipedia.org/wiki/Post-quantum_cryptography"&gt;quantum-resistant algorithms&lt;/a&gt; may be something worth investigating now. What we encrypt today might not be safe tomorrow.&lt;/p&gt;
&lt;h1 id="ecc-and-rsa"&gt;ECC and RSA&lt;/h1&gt;
&lt;p&gt;Now let’s forget about quantum computing, which is still far from being a serious problem. The question I’ll answer now is: &lt;strong&gt;why bothering with elliptic curves if RSA works well?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A quick answer is given by NIST, which provides with &lt;a href="https://www.nsa.gov/business/programs/elliptic_curve.shtml"&gt;a table that compares RSA and ECC key sizes&lt;/a&gt; required to achieve the same level of security.&lt;/p&gt;
&lt;table class="table"&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th&gt;RSA key size (bits)&lt;/th&gt;&lt;th&gt;ECC key size (bits)&lt;/th&gt;&lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;1024&lt;/td&gt;&lt;td&gt;160&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;2048&lt;/td&gt;&lt;td&gt;224&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;3072&lt;/td&gt;&lt;td&gt;256&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;7680&lt;/td&gt;&lt;td&gt;384&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;15360&lt;/td&gt;&lt;td&gt;521&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Note that there is no linear relationship between the RSA key sizes and the ECC key sizes (in other words: if we double the RSA key size, we don’t have to double the ECC key size). This table tells us not only that ECC uses less memory, but also that key generation and signing are considerably faster.&lt;/p&gt;
&lt;p&gt;But why is it so? The answer is that the faster algorithms for computing discrete logarithms over elliptic curves are Pollard’s rho and baby-step giant-step, while in the case of RSA we have faster algorithms. One in particular is the &lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/General_number_field_sieve"&gt;general number field sieve&lt;/a&gt;&lt;/strong&gt;: an algorithm for integer factorization that can be used to compute discrete logarithms. The general number field sieve is the fastest algorithm for integer factorization to date.&lt;/p&gt;
&lt;p&gt;All of this applies to other cryptosystems based on modular arithmetic as well, including DSA, D-H and ElGamal.&lt;/p&gt;
&lt;h1 id="hidden-threats-of-nsa"&gt;Hidden threats of NSA&lt;/h1&gt;
&lt;p&gt;An now the hard part. So far we have discussed algorithms and mathematics. Now it’s time to discuss people, and things get more complicated.&lt;/p&gt;
&lt;p&gt;If you remember, in the last post we said that certain classes of elliptic curves are weak, and to solve the problem of trusting curves from dubious sources we added a random seed to our domain parameters. And if we look at standard curves from NIST we can see that they are all verifiably random.&lt;/p&gt;
&lt;p&gt;If we read the Wikipedia page for “&lt;a href="http://en.wikipedia.org/wiki/Nothing_up_my_sleeve_number"&gt;nothing up my sleeve&lt;/a&gt;”, we can see that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The random numbers for MD5 come from the sine of integers.&lt;/li&gt;
&lt;li&gt;The random numbers for Blowfish come from the first digits of $\pi$.&lt;/li&gt;
&lt;li&gt;The random numbers for RC5 come from both $e$ and the golden ratio.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These numbers are random because their digits are uniformly distributed. And they are also unsuspicious, because they have a justification.&lt;/p&gt;
&lt;p&gt;Now the question is: &lt;strong&gt;where do the random seeds for NIST curves come from?&lt;/strong&gt; The answer is, sadly: we don’t know. Those seeds have no justification at all.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Is it possible that NIST has discovered a “sufficiently large” class of weak elliptic curves and has tried many possible seeds until they found a vulnerable curve?&lt;/strong&gt; I can’t answer this question, but this is a legit and important question. We know that NIST has succeeded in standardizing at least a &lt;a href="http://en.wikipedia.org/wiki/Dual_EC_DRBG"&gt;vulnerable random number generator&lt;/a&gt; (a generator which, oddly enough, is based on elliptic curves). Perhaps they also succeeded in standardizing a set of weak elliptic curves. How do we know? We can’t.&lt;/p&gt;
&lt;p&gt;What’s important to understand is that “verifiably random” and “secure” are not synonyms. And it doesn’t matter how hard the logarithm problem is, or how long our keys are, if our algorithms are broken, there’s nothing we can do.&lt;/p&gt;
&lt;p&gt;With respect to this, RSA wins, as it does not require special domain parameters that can be tampered. RSA (as well as other modular arithmetic systems) may be a good alternative if we can’t trust authorities and if we can’t construct our own domain parameters. And in case you are asking: yes, TLS may use NIST curves. If you check &lt;a href="https://google.com/"&gt;https://google.com&lt;/a&gt;, you’ll see that the connection is using ECDHE and ECDSA, with a certificate based on &lt;code&gt;prime256v1&lt;/code&gt; (aka &lt;code&gt;secp256p1&lt;/code&gt;).&lt;/p&gt;
&lt;h1 id="thats-all"&gt;That’s all!&lt;/h1&gt;
&lt;p&gt;I hope you have enjoyed this series. My aim was to give you the basic knowledge, terminology and conventions to understand what elliptic curve cryptography today is. If I reached my aim, you should now be able to understand existing ECC-based cryptosystems and to expand your knowledge by reading “not so gentle” documentation. When writing this series, I could have skipped over many details and use a simpler terminology, but I felt that by doing so you would have not been able to understand what the web has to offer. I believe I have found a good compromise between simplicity and completeness.&lt;/p&gt;
&lt;p&gt;Note though that by reading just this series, you are not able to implement secure ECC cryptosystems: security requires us to know many subtle but important details. Remember the &lt;a href="https://andrea.corbellini.name/2015/05/30/elliptic-curve-cryptography-ecdh-and-ecdsa/#random-curves"&gt;requirements for Smart’s attack&lt;/a&gt; and &lt;a href="https://andrea.corbellini.name/2015/05/30/elliptic-curve-cryptography-ecdh-and-ecdsa/#ecdsa-k"&gt;Sony’s mistake&lt;/a&gt; — these are just two examples that should teach you how easy is to produce insecure algorithms and how easy it is to exploit them.&lt;/p&gt;
&lt;p&gt;So, if you are interested in diving deeper into the world of ECC, where to go from here?&lt;/p&gt;
&lt;p&gt;First off, so far we have seen Weierstrass curves over prime fields, but you must know that there exist other kinds of curve and fields, in particular:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Koblitz curves over binary fields.&lt;/strong&gt; Those are elliptic curves in the form $y^2 + xy = x^3 + ax^2 + 1$ (where $a$ is either 0 or 1) over finite fields containing $2^m$ elements (where $m$ is a prime). They allow particularly efficient point additions and scalar multiplications.
   Examples of standardized Koblitz curves are &lt;code&gt;nistk163&lt;/code&gt;, &lt;code&gt;nistk283&lt;/code&gt; and &lt;code&gt;nistk571&lt;/code&gt; (three curves defined over a field of 163, 283 and 571 bits).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Binary curves.&lt;/strong&gt; They are very similar to Koblitz curves and are in the form $x^2 + xy = x^3 + x^2 + b$ (where $b$ is an integer often generated from a random seed). As the name suggests, binary curves are restricted to binary fields too. Examples of standardized curves are &lt;code&gt;nistb163&lt;/code&gt;, &lt;code&gt;nistb283&lt;/code&gt; and &lt;code&gt;nistb571&lt;/code&gt;.
   It must be said that there are growing concerns that both Koblitz and Binary curves may not be as safe as prime curves.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edwards curves&lt;/strong&gt;, in the form $x^2 + y^2 = 1 + d x^2 y^2$ (where $d$ is either 0 or 1). These are particularly interesting not only because point addition and scalar multiplication are fast, but also because the formula for point addition is always the same, in any case ($P \ne Q$, $P = Q$, $P = -Q$, …). This feature leverages the possibility of side-channel attacks, where you measure the time used for scalar multiplication and try to guess the scalar coefficient based on the time it took to compute.
   Edwards curves are relatively new (they were presented in 2007) and no authority such as Certicom or NIST have yet standardized any of them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Curve25519&lt;/strong&gt; and &lt;strong&gt;Ed25519&lt;/strong&gt; are two particular elliptic curves designed for ECDH and a variant of ECDSA respectively. Like Edwards curves, these two curves are fast and help preventing side-channel attacks. And like Edwards curves, these two curves have not been standardized yet and we can’t find them in any popular software (except OpenSSH, that supports Ed25519 key pairs since 2014).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are interested in the implementation details of ECC, then I suggest you read the sources of &lt;strong&gt;OpenSSL&lt;/strong&gt; and &lt;strong&gt;GnuTLS&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Finally, if you are interested in the mathematical details, rather than the security and efficiency of the algorithms, you must know that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elliptic curves are &lt;strong&gt;algebraic varieties with genus one&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Points at infinity are studied in &lt;strong&gt;projective geometry&lt;/strong&gt; and can be represented using &lt;strong&gt;homogeneous coordinates&lt;/strong&gt; (although most of the features of projective geometry are not needed for elliptic curve cryptography).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And don’t forget to study &lt;strong&gt;finite fields&lt;/strong&gt; and &lt;strong&gt;field theory&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;These are the keywords that you should look up if you’re interested in the topics.&lt;/p&gt;
&lt;p&gt;Now the series is officially concluded. Thank you for all your friendly comments, tweets and mails. Many have asked me if I’m going to write other series on other closely related topics. The answer is: maybe. I accept suggestions, but I can’t promise anything.&lt;/p&gt;
&lt;p&gt;Thanks for reading and see you next time!&lt;/p&gt;</content><category term="cryptography"></category><category term="dh"></category><category term="dsa"></category><category term="ecc"></category><category term="ecdh"></category><category term="ecdhe"></category><category term="ecdsa"></category><category term="rsa"></category><category term="security"></category></entry><entry><title>Elliptic Curve Cryptography: ECDH and ECDSA</title><link href="https://andrea.corbellini.name/2015/05/30/elliptic-curve-cryptography-ecdh-and-ecdsa/" rel="alternate"></link><published>2015-05-30T19:23:00+00:00</published><updated>2015-05-30T19:23:00+00:00</updated><author><name>andreacorbellini</name></author><id>tag:andrea.corbellini.name,2015-05-30:/2015/05/30/elliptic-curve-cryptography-ecdh-and-ecdsa/</id><summary type="html">&lt;p&gt;&lt;strong&gt;This post is the third in the series &lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/"&gt;ECC: a gentle introduction&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the previous posts, we have seen &lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/#elliptic-curves"&gt;what an elliptic curve is&lt;/a&gt; and we have defined a &lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/#group-law"&gt;group law&lt;/a&gt; in order to do some math with the points of elliptic curves. Then we have &lt;a href="https://andrea.corbellini.name/2015/05/23/elliptic-curve-cryptography-finite-fields-and-discrete-logarithms/"&gt;restricted elliptic curves to finite fields of integers modulo a prime&lt;/a&gt;. With this restriction, we have seen that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;This post is the third in the series &lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/"&gt;ECC: a gentle introduction&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the previous posts, we have seen &lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/#elliptic-curves"&gt;what an elliptic curve is&lt;/a&gt; and we have defined a &lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/#group-law"&gt;group law&lt;/a&gt; in order to do some math with the points of elliptic curves. Then we have &lt;a href="https://andrea.corbellini.name/2015/05/23/elliptic-curve-cryptography-finite-fields-and-discrete-logarithms/"&gt;restricted elliptic curves to finite fields of integers modulo a prime&lt;/a&gt;. With this restriction, we have seen that the points of elliptic curves generate &lt;a href="https://andrea.corbellini.name/2015/05/23/elliptic-curve-cryptography-finite-fields-and-discrete-logarithms/#scalar-multiplication"&gt;cyclic subgroups&lt;/a&gt; and we have introduced the terms &lt;a href="https://andrea.corbellini.name/2015/05/23/elliptic-curve-cryptography-finite-fields-and-discrete-logarithms/#base-point"&gt;base point&lt;/a&gt;, &lt;a href="https://andrea.corbellini.name/2015/05/23/elliptic-curve-cryptography-finite-fields-and-discrete-logarithms/#subgroup-order"&gt;order&lt;/a&gt; and &lt;a href="https://andrea.corbellini.name/2015/05/23/elliptic-curve-cryptography-finite-fields-and-discrete-logarithms/#cofactor"&gt;cofactor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, we have seen that &lt;a href="https://andrea.corbellini.name/2015/05/23/elliptic-curve-cryptography-finite-fields-and-discrete-logarithms/#scalar-multiplication"&gt;scalar multiplication in finite fields&lt;/a&gt; is an “easy” problem, while the &lt;a href="https://andrea.corbellini.name/2015/05/23/elliptic-curve-cryptography-finite-fields-and-discrete-logarithms/#discrete-logarithm"&gt;discrete logarithm problem&lt;/a&gt; seems to be “hard”. Now we’ll see how all of this applies to cryptography.&lt;/p&gt;
&lt;h1 id="domain-parameters"&gt;Domain parameters&lt;/h1&gt;
&lt;p&gt;Our elliptic curve algorithms will work in a cyclic subgroup of an elliptic curve over a finite field. Therefore, our algorithms will need the following parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;prime $p$&lt;/strong&gt; that specifies the size of the finite field.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;coefficients $a$ and $b$&lt;/strong&gt; of the elliptic curve equation.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;base point $G$&lt;/strong&gt; that generates our subgroup.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;order $n$&lt;/strong&gt; of the subgroup.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;cofactor $h$&lt;/strong&gt; of the subgroup.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In conclusion, the &lt;strong&gt;domain parameters&lt;/strong&gt; for our algorithms are the &lt;strong&gt;sextuple $(p, a, b, G, n, h)$&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="random-curves"&gt;Random curves&lt;/h2&gt;
&lt;p&gt;When I said that the discrete logarithm problem was “hard”, I wasn’t entirely right. There are &lt;strong&gt;some classes of elliptic curves that are particularly weak&lt;/strong&gt; and allow the use of special purpose algorithms to solve the discrete logarithm problem efficiently. For example, all the curves that have $p = hn$ (that is, the order of the finite field is equal to the order of the elliptic curve) are vulnerable to &lt;a href="http://interact.sagemath.org/edu/2010/414/projects/novotney.pdf"&gt;Smart’s attack&lt;/a&gt;, which can be used to solve discrete logarithms in polynomial time on a classical computer.&lt;/p&gt;
&lt;p&gt;Now, suppose that I give you the domain parameters of a curve. There’s the possibility that I’ve discovered a new class of weak curves that nobody knows, and probably I have built a “fast” algorithm for computing discrete logarithms on the curve I gave you. How can I convince you of the contrary, i.e. that I’m not aware of any vulnerability? &lt;strong&gt;How can I assure you that the curve is “safe” (in the sense that it can’t be used for special purpose attacks by me)?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In an attempt to solve this kind of problem, sometimes we have an additional domain parameter: the &lt;strong&gt;seed $S$&lt;/strong&gt;. This is a random number used to generate the coefficients $a$ and $b$, or the base point $G$, or both. These parameters are generated by computing the hash of the seed $S$. Hashes, as we know, are “easy” to compute, but “hard” to reverse.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/random-parameters-generation.png" alt="Random curve generation" width="500" height="74"&gt;
  &lt;figcaption&gt;A simple sketch of how a random curve is generated from a seed: the hash of a random number is used to calculate different parameters of the curve.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/seed-inversion.png" alt="Building a seed from a hash" width="359" height="76"&gt;
  &lt;figcaption&gt;If we wanted to cheat and try to construct a seed from the domain parameters, we would have to solve a "hard" problem: hash inversion.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;A curve generated through a seed is said to be &lt;strong&gt;verifiably random&lt;/strong&gt;. The principle of using hashes to generate parameters is known as “&lt;a href="http://en.wikipedia.org/wiki/Nothing_up_my_sleeve_number"&gt;nothing up my sleeve&lt;/a&gt;”, and is commonly used in cryptography.&lt;/p&gt;
&lt;p&gt;This trick should give some sort of assurance that &lt;strong&gt;the curve has not been specially crafted to expose vulnerabilities known to the author&lt;/strong&gt;. In fact, if I give you a curve together with a seed, it means I was not free to arbitrarily choose the parameters $a$ and $b$, and you should be relatively sure that the curve cannot be used for special purpose attacks by me. The reason why I say “relatively” will be explained in the next post.&lt;/p&gt;
&lt;p&gt;A standardized algorithm for generating and checking random curves is described in ANSI X9.62 and is based on &lt;a href="https://en.wikipedia.org/wiki/SHA-1"&gt;SHA-1&lt;/a&gt;. If you are curious, you can read the algorithms for generating verifiable random curves on &lt;a href="http://www.secg.org/sec1-v2.pdf"&gt;a specification by SECG&lt;/a&gt; (look for “Verifiably Random Curves and Base Point Generators”).&lt;/p&gt;
&lt;p&gt;I’ve created a &lt;strong&gt;&lt;a href="https://github.com/andreacorbellini/ecc/blob/master/scripts/verifyrandom.py"&gt;tiny Python script&lt;/a&gt; that verifies all the random curves currently &lt;a href="https://github.com/openssl/openssl/blob/81fc390/crypto/ec/ec_curve.c"&gt;shipped with OpenSSL&lt;/a&gt;&lt;/strong&gt;. I strongly recommend you to check it out!&lt;/p&gt;
&lt;h1 id="elliptic-curve-cryptography"&gt;Elliptic Curve Cryptography&lt;/h1&gt;
&lt;p&gt;It took us a long time, but finally here we are! Therefore, pure and simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;strong&gt;private key&lt;/strong&gt; is a random integer $d$ chosen from $\{1, \dots, n - 1\}$ (where $n$ is the order of the subgroup).&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;public key&lt;/strong&gt; is the point $H = dG$ (where $G$ is the base point of the subgroup).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You see? If we know $d$ and $G$ (along with the other domain parameters), finding $H$ is “easy”. But if we know $H$ and $G$, &lt;strong&gt;finding the private key $d$ is “hard”, because it requires us to solve the discrete logarithm problem&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now we are going to describe two public-key algorithms based on that: ECDH (Elliptic curve Diffie-Hellman), which is used for encryption, and ECDSA (Elliptic Curve Digital Signature Algorithm), used for digital signing.&lt;/p&gt;
&lt;h2 id="encryption-with-ecdh"&gt;Encryption with ECDH&lt;/h2&gt;
&lt;p&gt;ECDH is a variant of the &lt;a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange"&gt;Diffie-Hellman algorithm&lt;/a&gt; for elliptic curves. It is actually a &lt;a href="https://en.wikipedia.org/wiki/Key-agreement_protocol"&gt;key-agreement protocol&lt;/a&gt;, more than an encryption algorithm. This basically means that ECDH defines (to some extent) how keys should be generated and exchanged between parties. How to actually encrypt data using such keys is up to us.&lt;/p&gt;
&lt;p&gt;The problem it solves is the following: two parties (the usual &lt;a href="http://en.wikipedia.org/wiki/Alice_and_Bob"&gt;Alice and Bob&lt;/a&gt;) want to exchange information securely, so that a third party (the &lt;a href="http://en.wikipedia.org/wiki/Man-in-the-middle_attack"&gt;Man In the Middle&lt;/a&gt;) may intercept them, but may not decode them. This is one of the principles behind TLS, just to give you an example.&lt;/p&gt;
&lt;p&gt;Here’s how it works:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First, &lt;strong&gt;Alice and Bob generate their own private and public keys&lt;/strong&gt;. We have the private key $d_A$ and the public key $H_A = d_AG$ for Alice, and the keys $d_B$ and $H_B = d_BG$ for Bob. Note that both Alice and Bob are using the same domain parameters: the same base point $G$ on the same elliptic curve on the same finite field.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Alice and Bob exchange their public keys $H_A$ and $H_B$ over an insecure channel&lt;/strong&gt;. The Man In the Middle would intercept $H_A$ and $H_B$, but won’t be able to find out neither $d_A$ nor $d_B$ without solving the discrete logarithm problem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Alice calculates $S = d_A H_B$&lt;/strong&gt; (using her own private key and Bob’s public key), &lt;strong&gt;and Bob calculates $S = d_B H_A$&lt;/strong&gt; (using his own private key and Alice’s public key). Note that $S$ is the same for both Alice and Bob, in fact:
   $$S = d_A H_B = d_A (d_B G) = d_B (d_A G) = d_B H_A$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The Man In the Middle, however, only knows $H_A$ and $H_B$ (together with the other domain parameters) and would not be able to find out the &lt;strong&gt;shared secret $S$&lt;/strong&gt;. This is known as the Diffie-Hellman problem, which can be stated as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given three points $P$, $aP$ and $bP$, what is the result of $abP$?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or, equivalently:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given three integers $k$, $k^x$ and $k^y$, what is the result of $k^{xy}$?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(The latter form is used in the original Diffie-Hellman algorithm, based on modular arithmetic.)&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/ecdh.png" alt="ECDH" width="468" height="196"&gt;
  &lt;figcaption&gt;The Diffie-Hellman key exchange: Alice and Bob can "easily" calculate the shared secret, the Man in the Middle has to solve a "hard" problem.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The principle behind the Diffie-Hellman problem is also explained in a great &lt;a href="https://www.youtube.com/watch?v=YEBfamv-_do#t=02m37s"&gt;YouTube video by Khan Academy&lt;/a&gt;, which later explains the Diffie-Hellman algorithm applied to modular arithmetic (not to elliptic curves).&lt;/p&gt;
&lt;p&gt;The Diffie-Hellman problem for elliptic curves is assumed to be a “hard” problem. It is believed to be as “hard” as the discrete logarithm problem, although no mathematical proofs are available. What we can tell for sure is that it can’t be “harder”, because solving the logarithm problem is a way of solving the Diffie-Hellman problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Now that Alice and Bob have obtained the shared secret, they can exchange data with symmetric encryption.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For example, they can use the $x$ coordinate of $S$ as the key to encrypt messages using secure ciphers like &lt;a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard"&gt;AES&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Triple_DES"&gt;3DES&lt;/a&gt;. This is more or less what TLS does, the difference is that TLS concatenates the $x$ coordinate with other numbers relative to the connection and then computes a hash of the resulting byte string.&lt;/p&gt;
&lt;h3 id="playing-with-ecdh"&gt;Playing with ECDH&lt;/h3&gt;
&lt;p&gt;I’ve created &lt;strong&gt;&lt;a href="https://github.com/andreacorbellini/ecc/blob/master/scripts/ecdhe.py"&gt;another Python script&lt;/a&gt; for computing public/private keys and shared secrets over an elliptic curve&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Unlike all the examples we have seen till now, this script makes use of a standardized curve, rather than a simple curve on a small field. The curve I’ve chosen is &lt;code&gt;secp256k1&lt;/code&gt;, from &lt;a href="http://www.secg.org/"&gt;SECG&lt;/a&gt; (the “Standards for Efficient Cryptography Group”, founded by &lt;a href="https://www.certicom.com/"&gt;Certicom&lt;/a&gt;). &lt;a href="https://en.bitcoin.it/wiki/Secp256k1"&gt;This same curve is also used by Bitcoin&lt;/a&gt; for digital signatures. Here are the domain parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$p$ = 0xffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f&lt;/li&gt;
&lt;li&gt;$a$ = 0&lt;/li&gt;
&lt;li&gt;$b$ = 7&lt;/li&gt;
&lt;li&gt;$x_G$ = 0x79be667e f9dcbbac 55a06295 ce870b07 029bfcdb 2dce28d9 59f2815b 16f81798&lt;/li&gt;
&lt;li&gt;$y_G$ = 0x483ada77 26a3c465 5da4fbfc 0e1108a8 fd17b448 a6855419 9c47d08f fb10d4b8&lt;/li&gt;
&lt;li&gt;$n$ = 0xffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141&lt;/li&gt;
&lt;li&gt;$h$ = 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(These numbers were taken from &lt;a href="https://github.com/openssl/openssl/blob/81fc390/crypto/ec/ec_curve.c#L766"&gt;OpenSSL source code&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Of course, you are free to modify the script to use other curves and domain parameters, just be sure to use prime fields and curves Weierstrass normal form, otherwise the script won’t work.&lt;/p&gt;
&lt;p&gt;The script is really simple and includes some of the algorithms we have described so far: point addition, double and add, ECDH. I recommend you to read and run it. It will produce an output like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Curve: secp256k1
Alice&amp;#39;s private key: 0xe32868331fa8ef0138de0de85478346aec5e3912b6029ae71691c384237a3eeb
Alice&amp;#39;s public key: (0x86b1aa5120f079594348c67647679e7ac4c365b2c01330db782b0ba611c1d677, 0x5f4376a23eed633657a90f385ba21068ed7e29859a7fab09e953cc5b3e89beba)
Bob&amp;#39;s private key: 0xcef147652aa90162e1fff9cf07f2605ea05529ca215a04350a98ecc24aa34342
Bob&amp;#39;s public key: (0x4034127647bb7fdab7f1526c7d10be8b28174e2bba35b06ffd8a26fc2c20134a, 0x9e773199edc1ea792b150270ea3317689286c9fe239dd5b9c5cfd9e81b4b632)
Shared secret: (0x3e2ffbc3aa8a2836c1689e55cd169ba638b58a3a18803fcf7de153525b28c3cd, 0x43ca148c92af58ebdb525542488a4fe6397809200fe8c61b41a105449507083)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="ephemeral-ecdh"&gt;Ephemeral ECDH&lt;/h3&gt;
&lt;p&gt;Some of you may have heard of ECDHE instead of ECDH. The “E” in ECDHE stands for “Ephemeral” and refers to the fact that the &lt;strong&gt;keys exchanged are temporary&lt;/strong&gt;, rather than static.&lt;/p&gt;
&lt;p&gt;ECDHE is used, for example, in TLS, where both the client and the server generate their public-private key pair on the fly, when the connection is established. The keys are then signed with the TLS certificate (for authentication) and exchanged between the parties.&lt;/p&gt;
&lt;h2 id="signing-with-ecdsa"&gt;Signing with ECDSA&lt;/h2&gt;
&lt;p&gt;The scenario is the following: &lt;strong&gt;Alice wants to sign a message with her private key&lt;/strong&gt; ($d_A$), and &lt;strong&gt;Bob wants to validate the signature using Alice’s public key&lt;/strong&gt; ($H_A$). Nobody but Alice should be able to produce valid signatures. Everyone should be able to check signatures.&lt;/p&gt;
&lt;p&gt;Again, Alice and Bob are using the same domain parameters. The algorithm we are going to see is ECDSA, a variant of the &lt;a href="https://en.wikipedia.org/wiki/Digital_Signature_Algorithm"&gt;Digital Signature Algorithm&lt;/a&gt; applied to elliptic curves.&lt;/p&gt;
&lt;p&gt;ECDSA works on the hash of the message, rather than on the message itself. The choice of the hash function is up to us, but it should be obvious that a &lt;a href="http://en.wikipedia.org/wiki/Cryptographic_hash_function"&gt;cryptographically-secure hash function&lt;/a&gt; should be chosen. &lt;strong&gt;The hash of the message ought to be truncated&lt;/strong&gt; so that the bit length of the hash is the same as the bit length of $n$ (the order of the subgroup). &lt;strong&gt;The truncated hash is an integer and will be denoted as $z$.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The algorithm performed by Alice to sign the message works as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Take a &lt;strong&gt;random integer $k$&lt;/strong&gt; chosen from $\{1, \dots, n - 1\}$ (where $n$ is still the subgroup order).&lt;/li&gt;
&lt;li&gt;Calculate the point &lt;strong&gt;$P = kG$&lt;/strong&gt; (where $G$ is the base point of the subgroup).&lt;/li&gt;
&lt;li&gt;Calculate the number &lt;strong&gt;$r = x_P \bmod{n}$&lt;/strong&gt; (where $x_P$ is the $x$ coordinate of $P$).&lt;/li&gt;
&lt;li&gt;If $r = 0$, then choose another $k$ and try again.&lt;/li&gt;
&lt;li&gt;Calculate &lt;strong&gt;$s = k^{-1} (z + rd_A) \bmod{n}$&lt;/strong&gt; (where $d_A$ is Alice’s private key and $k^{-1}$ is the multiplicative inverse of $k$ modulo $n$).&lt;/li&gt;
&lt;li&gt;If $s = 0$, then choose another $k$ and try again.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The pair &lt;strong&gt;$(r, s)$ is the signature&lt;/strong&gt;.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/ecdsa.png" alt="ECDSA" width="514" height="255"&gt;
  &lt;figcaption&gt;Alice signs the hash $z$ using her private key $d_A$ and a random $k$. Bob verifies that the message has been correctly signed using Alice's public key $H_A$.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In plain words, this algorithm first generates a secret ($k$). This secret is hidden in $r$ thanks to point multiplication (that, as we know, is “easy” one way, and “hard” the other way round). $r$ is then bound to the message hash by the equation $s = k^{-1} (z + rd_A) \bmod{n}$.&lt;/p&gt;
&lt;p&gt;Note that in order to calculate $s$, we have computed the inverse of $k$ modulo $n$. We have &lt;a href="https://andrea.corbellini.name/2015/05/23/elliptic-curve-cryptography-finite-fields-and-discrete-logarithms/#p-must-be-prime"&gt;already said in the previous post&lt;/a&gt; that this is guaranteed to work only if $n$ is a prime number. &lt;strong&gt;If a subgroup has a non-prime order, ECDSA can’t be used.&lt;/strong&gt; It’s not by chance that almost all standardized curves have a prime order, and those that have a non-prime order are unsuitable for ECDSA.&lt;/p&gt;
&lt;h3 id="verifying-signatures"&gt;Verifying signatures&lt;/h3&gt;
&lt;p&gt;In order to verify the signature we’ll need Alice’s public key $H_A$, the (truncated) hash $z$ and, obviously, the signature $(r, s)$.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Calculate the integer $u_1 = s^{-1} z \bmod{n}$.&lt;/li&gt;
&lt;li&gt;Calculate the integer $u_2 = s^{-1} r \bmod{n}$.&lt;/li&gt;
&lt;li&gt;Calculate the point $P = u_1 G + u_2 H_A$.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The signature is valid only if $r = x_P \bmod{n}$.&lt;/p&gt;
&lt;h2 id="correctness-of-the-algorithm"&gt;Correctness of the algorithm&lt;/h2&gt;
&lt;p&gt;The logic behind this algorithm may not seem obvious at a first sight, however if we put together all the equations we have written so far, things will be clearer.&lt;/p&gt;
&lt;p&gt;Let’s start from $P = u_1 G + u_2 H_A$. We know, from the definition of public key, that $H_A = d_A G$ (where $d_A$ is the private key). We can write:
$$\begin{align*}
  P &amp;amp; = u_1 G + u_2 H_A \\
    &amp;amp; = u_1 G + u_2 d_A G \\
    &amp;amp; = (u_1 + u_2 d_A) G
\end{align*}$$&lt;/p&gt;
&lt;p&gt;Using the definitions of $u_1$ and $u_2$, we can write:
$$\begin{align*}
  P &amp;amp; = (u_1 + u_2 d_A) G \\
    &amp;amp; = (s^{-1} z + s^{-1} r d_A) G \\
    &amp;amp; = s^{-1} (z + r d_A) G
\end{align*}$$&lt;/p&gt;
&lt;p&gt;Here we have omitted “$\text{mod}\ n$” both for brevity, and because the cyclic subgroup generated by $G$ has order $n$, hence “$\text{mod}\ n$” is superfluous.&lt;/p&gt;
&lt;p&gt;Previously, we defined $s = k^{-1} (z + rd_A) \bmod{n}$. Multiplying each side of the equation by $k$ and dividing by $s$, we get: $k = s^{-1} (z + rd_A) \bmod{n}$. Substituting this result in our equation for $P$, we get:
$$\begin{align*}
  P &amp;amp; = s^{-1} (z + r d_A) G \\
    &amp;amp; = k G
\end{align*}$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is the same equation for $P$ we had at step 2 of the signature generation algorithm!&lt;/strong&gt; When generating signatures and when verifying them, we are calculating the same point $P$, just with a different set of equations. This is why the algorithm works.&lt;/p&gt;
&lt;h3 id="playing-with-ecdsa"&gt;Playing with ECDSA&lt;/h3&gt;
&lt;p&gt;Of course, I’ve created &lt;strong&gt;&lt;a href="https://github.com/andreacorbellini/ecc/blob/master/scripts/ecdsa.py"&gt;a Python script&lt;/a&gt; for signature generation and verification&lt;/strong&gt;. The code shares some parts with the ECDH script, in particular the domain parameters and the public/private key pair generation algorithm.&lt;/p&gt;
&lt;p&gt;Here is the kind of output produced by the script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Curve: secp256k1
Private key: 0x9f4c9eb899bd86e0e83ecca659602a15b2edb648e2ae4ee4a256b17bb29a1a1e
Public key: (0xabd9791437093d377ca25ea974ddc099eafa3d97c7250d2ea32af6a1556f92a, 0x3fe60f6150b6d87ae8d64b78199b13f26977407c801f233288c97ddc4acca326)

Message: b&amp;#39;Hello!&amp;#39;
Signature: (0xddcb8b5abfe46902f2ac54ab9cd5cf205e359c03fdf66ead1130826f79d45478, 0x551a5b2cd8465db43254df998ba577cb28e1ee73c5530430395e4fba96610151)
Verification: signature matches

Message: b&amp;#39;Hi there!&amp;#39;
Verification: invalid signature

Message: b&amp;#39;Hello!&amp;#39;
Public key: (0xc40572bb38dec72b82b3efb1efc8552588b8774149a32e546fb703021cf3b78a, 0x8c6e5c5a9c1ea4cad778072fe955ed1c6a2a92f516f02cab57e0ba7d0765f8bb)
Verification: invalid signature
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the script first signs a message (the byte string “Hello!”), then verifies the signature. Afterwards, it tries to verify the same signature against another message (“Hi there!”) and verification fails. Lastly, it tries to verify the signature against the correct message, but using another random public key and verification fails again.&lt;/p&gt;
&lt;h2 id="ecdsa-k"&gt;The importance of &lt;em&gt;k&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;When generating ECDSA signatures, it is important to keep the secret $k$ really secret. If we used the same $k$ for all signatures, or if our random number generator were somewhat predictable, &lt;strong&gt;an attacker would be able to find out the private key&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.bbc.com/news/technology-12116051"&gt;This is the kind of mistake made by Sony a few years ago.&lt;/a&gt; Basically, the PlayStation 3 game console can run only games signed by Sony with ECDSA. This way, if I wanted to create a new game for PlayStation 3, I couldn’t distribute it to the public without a signature from Sony. The problem is: all the signatures made by Sony were generated using a static $k$.&lt;/p&gt;
&lt;p&gt;(Apparently, Sony’s random number generator was inspired by either &lt;a href="http://xkcd.com/221/"&gt;XKCD&lt;/a&gt; or &lt;a href="http://dilbert.com/strip/2001-10-25"&gt;Dilbert&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;In this situation, we could easily recover Sony’s private key $d_S$ by buying just two signed games, extracting their hashes ($z_1$ and $z_2$) and their signatures ($(r_1, s_1)$ and $(r_2, s_2)$), together with the domain parameters. Here’s how:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First off, note that $r_1 = r_2$ (because $r = x_P \bmod{n}$ and $P = kG$ is the same for both signatures).&lt;/li&gt;
&lt;li&gt;Consider that $(s_1 - s_2) \bmod{n} = k^{-1} (z_1 - z_2) \bmod{n}$ (this result comes directly from the equation for $s$).&lt;/li&gt;
&lt;li&gt;Now multiply each side of the equation by $k$: $k (s_1 - s_2) \bmod{n} = (z_1 - z_2) \bmod{n}$.&lt;/li&gt;
&lt;li&gt;Divide by $(s_1 - s_2)$ to get $k = (z_1 - z_2)(s_1 - s_2)^{-1} \bmod{n}$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last equation lets us calculate $k$ using only two hashes and their corresponding signatures. Now we can extract the private key using the equation for $s$:
$$s = k^{-1}(z + rd_S) \bmod{n}\ \ \Rightarrow\ \ d_S = r^{-1} (sk - z) \bmod{n}$$&lt;/p&gt;
&lt;p&gt;Similar techniques may be employed if $k$ is not static but predictable in some way.&lt;/p&gt;
&lt;h1 id="have-a-great-weekend"&gt;Have a great weekend&lt;/h1&gt;
&lt;p&gt;I really hope you enjoyed what I’ve written here. As usual, don’t hesitate to leave a comment or send me a poke if you need help with something.&lt;/p&gt;
&lt;p&gt;Next week I’ll publish the fourth and last article of this series. It’ll be about techniques for solving discrete logarithms, some important problems of Elliptic Curve cryptography, and how ECC compares with RSA. Don’t miss it!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://andrea.corbellini.name/2015/06/08/elliptic-curve-cryptography-breaking-security-and-a-comparison-with-rsa/"&gt;Read the next post of the series &amp;raquo;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content><category term="cryptography"></category><category term="dh"></category><category term="dsa"></category><category term="ecc"></category><category term="ecdh"></category><category term="ecdhe"></category><category term="ecdsa"></category><category term="security"></category><category term="tls"></category></entry><entry><title>Elliptic Curve Cryptography: finite fields and discrete logarithms</title><link href="https://andrea.corbellini.name/2015/05/23/elliptic-curve-cryptography-finite-fields-and-discrete-logarithms/" rel="alternate"></link><published>2015-05-23T14:08:00+00:00</published><updated>2015-05-23T14:08:00+00:00</updated><author><name>andreacorbellini</name></author><id>tag:andrea.corbellini.name,2015-05-23:/2015/05/23/elliptic-curve-cryptography-finite-fields-and-discrete-logarithms/</id><summary type="html">&lt;p&gt;&lt;strong&gt;This post is the second in the series &lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/"&gt;ECC: a gentle introduction&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the &lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/"&gt;previous post&lt;/a&gt;, we have seen how elliptic curves over the real numbers can be used to define a group. Specifically, we have defined a rule for &lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/#group-law"&gt;point addition&lt;/a&gt;: given three aligned points, their sum is zero ($P + Q + R = 0$). We have derived a &lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/#geometric-addition"&gt;geometric method&lt;/a&gt; and an &lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/#algebraic-addition"&gt;algebraic method …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;This post is the second in the series &lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/"&gt;ECC: a gentle introduction&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the &lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/"&gt;previous post&lt;/a&gt;, we have seen how elliptic curves over the real numbers can be used to define a group. Specifically, we have defined a rule for &lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/#group-law"&gt;point addition&lt;/a&gt;: given three aligned points, their sum is zero ($P + Q + R = 0$). We have derived a &lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/#geometric-addition"&gt;geometric method&lt;/a&gt; and an &lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/#algebraic-addition"&gt;algebraic method&lt;/a&gt; for computing point additions.&lt;/p&gt;
&lt;p&gt;We then introduced &lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/#scalar-multiplication"&gt;scalar multiplication&lt;/a&gt; ($nP = P + P + \cdots + P$) and we found out an “easy” algorithm for computing scalar multiplication: &lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/#double-and-add"&gt;double and add&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Now we will restrict our elliptic curves to finite fields&lt;/strong&gt;, rather than the set of real numbers, and see how things change.&lt;/p&gt;
&lt;h1 id="the-field-of-integers-modulo-p"&gt;The field of integers modulo &lt;em&gt;p&lt;/em&gt;&lt;/h1&gt;
&lt;p&gt;A finite field is, first of all, a set with a finite number of elements. An example of finite field is the set of integers modulo $p$, where $p$ is a prime number. It is generally denoted as $\mathbb{Z}/p$, $GF(p)$ or $\mathbb{F}_p$. We will use the latter notation.&lt;/p&gt;
&lt;p&gt;In fields we have two binary operations: addition (+) and multiplication (&amp;middot;). Both are closed, associative and commutative. For both operations, there exist a unique identity element, and for every element there’s a unique inverse element. Finally, multiplication is distributive over the addition: $x \cdot (y + z) = x \cdot y + x \cdot z$.&lt;/p&gt;
&lt;p&gt;The set of &lt;strong&gt;integers modulo $p$ consists of all the integers from 0 to $p - 1$&lt;/strong&gt;. Addition and multiplication work as in &lt;a href="http://en.wikipedia.org/wiki/Modular_arithmetic"&gt;modular arithmetic&lt;/a&gt; (also known as “clock arithmetic”). Here are a few examples of operations in $\mathbb{F}_{23}$:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Addition: $(18 + 9) \bmod{23} = 4$&lt;/li&gt;
&lt;li&gt;Subtraction: $(7 - 14) \bmod{23} = 16$&lt;/li&gt;
&lt;li&gt;Multiplication: $4 \cdot 7 \bmod{23} = 5$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Additive inverse: $-5 \bmod{23} = 18$&lt;/p&gt;
&lt;p&gt;Indeed: $(5 + (-5)) \bmod{23} = (5 + 18) \bmod{23} = 0$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multiplicative inverse: $9^{-1} \bmod{23} = 18$&lt;/p&gt;
&lt;p&gt;Indeed: $9 \cdot 9^{-1} \bmod{23} = 9 \cdot 18 \bmod{23} = 1$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If these equations don’t look familiar to you and you need a primer on modular arithmetic, check out &lt;a href="https://www.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic"&gt;Khan Academy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As we already said, the integers modulo $p$ are a field, and therefore all the properties listed above hold. &lt;span id="p-must-be-prime"&gt;Note that the requirement for $p$ to be prime is important!&lt;/span&gt; The set of integers modulo 4 is not a field: 2 has no multiplicative inverse (i.e. the equation $2 \cdot x \bmod{4} = 1$ has no solutions).&lt;/p&gt;
&lt;h2 id="division-modulo-p"&gt;Division modulo &lt;em&gt;p&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;We will soon define elliptic curves over $\mathbb{F}_p$, but before doing so we need a clear idea of what $x / y$ means in $\mathbb{F}_p$. Simply put: $x / y = x \cdot y^{-1}$, or, in plain words, $x$ over $y$ is equal to $x$ times the multiplicative inverse of $y$. This fact is not surprising, but gives us a basic method to perform division: &lt;strong&gt;find the multiplicative inverse of a number and then perform a single multiplication&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Computing the multiplicative inverse can be “easily” done with the &lt;strong&gt;&lt;a href="http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm"&gt;extended Euclidean algorithm&lt;/a&gt;&lt;/strong&gt;, which is $O(\log p)$ (or $O(k)$ if we consider the bit length) in the worst case.&lt;/p&gt;
&lt;p&gt;We won’t enter the details of the extended Euclidean algorithm, as it is off-topic, however here’s a working Python implementation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extended_euclidean_algorithm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Returns a three-tuple (gcd, x, y) such that&lt;/span&gt;
&lt;span class="sd"&gt;    a * x + b * y == gcd, where gcd is the greatest&lt;/span&gt;
&lt;span class="sd"&gt;    common divisor of a and b.&lt;/span&gt;

&lt;span class="sd"&gt;    This function implements the extended Euclidean&lt;/span&gt;
&lt;span class="sd"&gt;    algorithm and runs in O(log b) in the worst case.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;old_s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;old_t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;old_r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;quotient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;old_r&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;
        &lt;span class="n"&gt;old_r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;old_r&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;quotient&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;
        &lt;span class="n"&gt;old_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;old_s&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;quotient&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
        &lt;span class="n"&gt;old_t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;old_t&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;quotient&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;old_r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;old_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;old_t&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inverse_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Returns the multiplicative inverse of&lt;/span&gt;
&lt;span class="sd"&gt;    n modulo p.&lt;/span&gt;

&lt;span class="sd"&gt;    This function returns an integer m such that&lt;/span&gt;
&lt;span class="sd"&gt;    (n * m) % p == 1.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;gcd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;extended_euclidean_algorithm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;gcd&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;gcd&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Either n is 0, or p is not a prime number.&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; has no multiplicative inverse &amp;#39;&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;modulo &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="elliptic-curves-in-mathbbf_p"&gt;Elliptic curves in $\mathbb{F}_p$&lt;/h1&gt;
&lt;p&gt;Now we have all the necessary elements to restrict elliptic curves over $\mathbb{F}_p$. The set of points, that in the &lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/#elliptic-curves"&gt;previous post&lt;/a&gt; was:
$$\begin{array}{rcl}
  \left\{(x, y) \in \mathbb{R}^2 \right. &amp;amp; \left. | \right. &amp;amp; \left. y^2 = x^3 + ax + b, \right. \\
  &amp;amp; &amp;amp; \left. 4a^3 + 27b^2 \ne 0\right\}\ \cup\ \left\{0\right\}
\end{array}$$
now becomes:
$$\begin{array}{rcl}
  \left\{(x, y) \in (\mathbb{F}_p)^2 \right. &amp;amp; \left. | \right. &amp;amp; \left. y^2 \equiv x^3 + ax + b \pmod{p}, \right. \\
  &amp;amp; &amp;amp; \left. 4a^3 + 27b^2 \not\equiv 0 \pmod{p}\right\}\ \cup\ \left\{0\right\}
\end{array}$$&lt;/p&gt;
&lt;p&gt;where 0 is still the point at infinity, and $a$ and $b$ are two integers in $\mathbb{F}_p$.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/elliptic-curves-mod-p.png" alt="Elliptic curves in Fp" width="608" height="608"&gt;
  &lt;figcaption&gt;The curve $y^2 \equiv x^3 - 7x + 10 \pmod{p}$ with $p = 19, 97, 127, 487$. Note that, for every $x$, there are at most two points. Also note the symmetry about $y = p / 2$.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/singular-mod-p.png" alt="Singular curve in Fp" width="300" height="300"&gt;
  &lt;figcaption&gt;The curve $y^2 \equiv x^3 \pmod{29}$ is singular and has a triple point in $(0, 0)$. It is not a valid elliptic curve.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;What previously was a continuous curve is now a set of disjoint points in the $xy$-plane. But we can prove that, even if we have restricted our domain, &lt;strong&gt;elliptic curves in $\mathbb{F}_p$ still form an abelian group&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id="point-addition"&gt;Point addition&lt;/h1&gt;
&lt;p&gt;Clearly, we need to change a bit our definition of addition in order to make it work in $\mathbb{F}_p$. With reals, we said that the sum of three aligned points was zero ($P + Q + R = 0$). We can keep this definition, but what does it mean for three points to be aligned in $\mathbb{F}_p$?&lt;/p&gt;
&lt;p&gt;We can say that &lt;strong&gt;three points are aligned if there’s a line that connects all of them&lt;/strong&gt;. Now, of course, lines in $\mathbb{F}_p$ are not the same as lines in $\mathbb{R}$. We can say, informally, that a line in $\mathbb{F}_p$ is the set of points $(x, y)$ that satisfy the equation $ax + by + c \equiv 0 \pmod{p}$ (this is the standard line equation, with the addition of “$(\text{mod}\ p)$”).&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/point-addition-mod-p.png" alt="Point addition for elliptic curves in Z/p" width="523" height="528"&gt;
  &lt;figcaption&gt;Point addition over the curve $y^2 \equiv x^3 - x + 3 \pmod{127}$, with $P = (16, 20)$ and $Q = (41, 120)$. Note how the line $y \equiv 4x + 83 \pmod{127}$ that connects the points "repeats" itself in the plane.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Given that we are in a group, point addition retains the properties we already know:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$Q + 0 = 0 + Q = Q$ (from the definition of identity element).&lt;/li&gt;
&lt;li&gt;Given a non-zero point $Q$, the inverse $-Q$ is the point having the same abscissa but opposite ordinate. Or, if you prefer, $-Q = (x_Q, -y_Q \bmod{p})$.
  For example, if a curve in $\mathbb{F}_{29}$ has a point $Q = (2, 5)$, the inverse is $-Q = (2, -5 \bmod{29}) = (2, 24)$.&lt;/li&gt;
&lt;li&gt;Also, $P + (-P) = 0$ (from the definition of inverse element).&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="algebraic-sum"&gt;Algebraic sum&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;The equations for calculating point additions are exactly the same as in the previous post&lt;/strong&gt;, except for the fact that we need to add “$\text{mod}\ p$” at the end of every expression. Therefore, given $P = (x_P, y_P)$, $Q = (x_Q, y_Q)$ and $R = (x_R, y_R)$, we can calculate $P + Q = -R$ as follows:
$$\begin{align*}
  x_R &amp;amp; = (m^2 - x_P - x_Q) \bmod{p} \\
  y_R &amp;amp; = [y_P + m(x_R - x_P)] \bmod{p} \\
      &amp;amp; = [y_Q + m(x_R - x_Q)] \bmod{p}
\end{align*}$$&lt;/p&gt;
&lt;p&gt;If $P \ne Q$, the the slope $m$ assumes the form:
$$m = (y_P - y_Q)(x_P - x_Q)^{-1} \bmod{p}$$&lt;/p&gt;
&lt;p&gt;Else, if $P = Q$, we have:
$$m = (3 x_P^2 + a)(2 y_P)^{-1} \bmod{p}$$&lt;/p&gt;
&lt;p&gt;It’s not a coincidence that the equations have not changed: in fact, these equations work in every field, finite or infinite (with the exception of $\mathbb{F}_2$ and $\mathbb{F}_3$, which are special cased). Now I feel I have to provide a justification for this fact. The problem is: proofs for the group law generally involve complex mathematical concepts. However, I found a &lt;a href="https://arxiv.org/pdf/1710.00214"&gt;proof from Stefan Friedl&lt;/a&gt; that uses only elementary concepts. Read it if you are interested in why these equations work in (almost) every field.&lt;/p&gt;
&lt;p&gt;Back to us — we won’t define a geometric method: in fact, there are a few problems with that. For example, in the previous post, we said that to compute $P + P$ we needed to take the tangent to the curve in $P$. But without continuity, the word “tangent” does not make any sense. We can workaround this and other problems, however a pure geometric method would just be too complicated and not practical at all.&lt;/p&gt;
&lt;p&gt;Instead, you can play with the &lt;strong&gt;&lt;a href="https://andrea.corbellini.name/ecc/interactive/modk-add.html"&gt;interactive tool&lt;/a&gt; I’ve written for computing point additions&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id="the-order-of-an-elliptic-curve-group"&gt;The order of an elliptic curve group&lt;/h1&gt;
&lt;p&gt;We said that an elliptic curve defined over a finite field has a finite number of points. An important question that we need to answer is: &lt;strong&gt;how many points are there exactly?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Firstly, let’s say that the number of points in a group is called the &lt;strong&gt;order of the group&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Trying all the possible values for $x$ from 0 to $p - 1$ is not a feasible way to count the points, as it would require $O(p)$ steps, and this is “hard” if $p$ is a large prime.&lt;/p&gt;
&lt;p&gt;Luckily, there’s a faster algorithm for computing the order: &lt;a href="https://en.wikipedia.org/wiki/Schoof%27s_algorithm"&gt;Schoof’s algorithm&lt;/a&gt;. I won’t enter the details of the algorithm — what matters is that it runs in polynomial time, and this is what we need.&lt;/p&gt;
&lt;h1 id="scalar-multiplication"&gt;Scalar multiplication and cyclic subgroups&lt;/h1&gt;
&lt;p&gt;As with reals, multiplication can be defined as:
$$n P = \underbrace{P + P + \cdots + P}_{n\ \text{times}}$$&lt;/p&gt;
&lt;p&gt;And, again, we can use the &lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/#double-and-add"&gt;double and add algorithm&lt;/a&gt; to perform multiplication in $O(\log n)$ steps (or $O(k)$, where $k$ is the number of bits of $n$). I’ve written an &lt;strong&gt;&lt;a href="https://andrea.corbellini.name/ecc/interactive/modk-mul.html"&gt;interactive tool&lt;/a&gt; for scalar multiplication&lt;/strong&gt; too.&lt;/p&gt;
&lt;p&gt;Multiplication over points for elliptic curves in $\mathbb{F}_p$ has an interesting property. Take the curve $y^2 \equiv x^3 + 2x + 3 \pmod{97}$ and the point $P = (3, 6)$. Now &lt;a href="https://andrea.corbellini.name/ecc/interactive/modk-mul.html"&gt;calculate&lt;/a&gt; all the multiples of $P$:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/cyclic-subgroup.png" alt="Cyclic subgroup" width="322" height="255"&gt;
  &lt;figcaption&gt;The multiples of $P = (3, 6)$ are just five distinct points ($0$, $P$, $2P$, $3P$, $4P$) and they are repeating cyclically. It's easy to spot the similarity between scalar multiplication on elliptic curves and addition in modular arithmetic.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;$0P = 0$&lt;/li&gt;
&lt;li&gt;$1P = (3, 6)$&lt;/li&gt;
&lt;li&gt;$2P = (80, 10)$&lt;/li&gt;
&lt;li&gt;$3P = (80, 87)$&lt;/li&gt;
&lt;li&gt;$4P = (3, 91)$&lt;/li&gt;
&lt;li&gt;$5P = 0$&lt;/li&gt;
&lt;li&gt;$6P = (3, 6)$&lt;/li&gt;
&lt;li&gt;$7P = (80, 10)$&lt;/li&gt;
&lt;li&gt;$8P = (80, 87)$&lt;/li&gt;
&lt;li&gt;$9P = (3, 91)$&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here we can immediately spot two things: firstly, the multiples of $P$ are just five: the other points of the elliptic curve never appear. Secondly, they are &lt;strong&gt;repeating cyclically&lt;/strong&gt;. We can write:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$5kP = 0$&lt;/li&gt;
&lt;li&gt;$(5k + 1)P = P$&lt;/li&gt;
&lt;li&gt;$(5k + 2)P = 2P$&lt;/li&gt;
&lt;li&gt;$(5k + 3)P = 3P$&lt;/li&gt;
&lt;li&gt;$(5k + 4)P = 4P$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;for every integer $k$. Note that these five equations can be “compressed” into a single one, thanks to the modulo operator: $kP = (k \bmod{5})P$.&lt;/p&gt;
&lt;p&gt;Not only that, but we can immediately verify that &lt;strong&gt;these five points are closed under addition&lt;/strong&gt;. Which means: however I add $0$, $P$, $2P$, $3P$ or $4P$, the result is always one of these five points. Again, the other points of the elliptic curve never appear in the results.&lt;/p&gt;
&lt;p&gt;The same holds for every point, not just for $P = (3, 6)$. In fact, if we take a generic $P$:
$$nP + mP = \underbrace{P + \cdots + P}_{n\ \text{times}} + \underbrace{P + \cdots + P}_{m\ \text{times}} = (n + m)P$$&lt;/p&gt;
&lt;p&gt;Which means: &lt;strong&gt;if we add two multiples of $P$, we obtain a multiple of $P$&lt;/strong&gt; (i.e. multiples of $P$ are closed under addition). This is enough to &lt;a href="https://en.wikipedia.org/wiki/Subgroup#Basic_properties_of_subgroups"&gt;prove&lt;/a&gt; that &lt;strong&gt;the set of the multiples of $P$ is a cyclic subgroup&lt;/strong&gt; of the group formed by the elliptic curve.&lt;/p&gt;
&lt;p&gt;A “subgroup” is a group which is a subset of another group. A “cyclic subgroup” is a subgroup which elements are repeating cyclically, like we have shown in the previous example. &lt;span id="base-point"&gt;The point $P$ is called &lt;strong&gt;generator&lt;/strong&gt; or &lt;strong&gt;base point&lt;/strong&gt; of the cyclic subgroup&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Cyclic subgroups are the foundations of ECC and other cryptosystems. We will see why in the next post.&lt;/p&gt;
&lt;h2 id="subgroup-order"&gt;Subgroup order&lt;/h2&gt;
&lt;p&gt;We can ask ourselves &lt;strong&gt;what the order of a subgroup generated by a point $P$ is&lt;/strong&gt; (or, equivalently, what the order of $P$ is). To answer this question we can’t use Schoof’s algorithm, because that algorithm only works on whole elliptic curves, not on subgroups. Before approaching the problem, we need a few more bits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;So far, we have the defined the order as the number of points of a group. This definition is still valid, but within a cyclic subgroup we can give a new, equivalent definition: &lt;strong&gt;the order of $P$ is the smallest positive integer $n$ such that $nP = 0$&lt;/strong&gt;.
  In fact, if you look at the previous example, our subgroup contained five points, and we had $5P = 0$.&lt;/li&gt;
&lt;li&gt;The order of $P$ is linked to the order of the elliptic curve by &lt;a href="https://en.wikipedia.org/wiki/Lagrange%27s_theorem_(group_theory)"&gt;Lagrange’s theorem&lt;/a&gt;, which states that &lt;strong&gt;the order of a subgroup is a divisor of the order of the parent group&lt;/strong&gt;.
  In other words, if an elliptic curve contains $N$ points and one of its subgroups contains $n$ points, then $n$ is a divisor of $N$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These two information together give us a way to find out the order of a subgroup with base point $P$:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Calculate the elliptic curve’s order $N$ using Schoof’s algorithm.&lt;/li&gt;
&lt;li&gt;Find out all the divisors of $N$.&lt;/li&gt;
&lt;li&gt;For every divisor $n$ of $N$, compute $nP$.&lt;/li&gt;
&lt;li&gt;The smallest $n$ such that $nP = 0$ is the order of the subgroup.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, the curve $y^2 = x^3 - x + 3$ over the field $\mathbb{F}_{37}$ has order $N = 42$. Its subgroups may have order $n = 1$, $2$, $3$, $6$, $7$, $14$, $21$ or $42$. If &lt;a href="https://andrea.corbellini.name/ecc/interactive/modk-mul.html?a=-1&amp;amp;b=3&amp;amp;p=37&amp;amp;px=2&amp;amp;py=3"&gt;we try $P = (2, 3)$&lt;/a&gt; we can see that $P \ne 0$, $2P \ne 0$, …, $7P = 0$, hence the order of $P$ is $n = 7$.&lt;/p&gt;
&lt;p&gt;Note that &lt;strong&gt;it’s important to take the smallest divisor, not a random one&lt;/strong&gt;. If we proceeded randomly, we could have taken $n = 14$, which is not the order of the subgroup, but one of its multiples.&lt;/p&gt;
&lt;p&gt;Another example: the elliptic curve defined by the equation $y^2 = x^3 - x + 1$ over the field $\mathbb{F}_{29}$ has order $N = 37$, which is a prime. Its subgroups may only have order $n = 1$ or $37$. As you can easily guess, when $n = 1$, the subgroup contains only the point at infinity; when $n = N$, the subgroup contains all the points of the elliptic curve.&lt;/p&gt;
&lt;h2 id="finding-a-base-point"&gt;Finding a base point&lt;/h2&gt;
&lt;p&gt;For our ECC algorithms, we want subgroups with a high order. So in general we will choose an elliptic curve, calculate its order ($N$), choose a high divisor as the subgroup order ($n$) and eventually find a suitable base point. That is: we won’t choose a base point and then calculate its order, but we’ll do the opposite: we will first choose an order that looks good enough and then we will hunt for a suitable base point. How do we do that?&lt;/p&gt;
&lt;p&gt;&lt;span id="cofactor"&gt;Firstly, we need to introduce one more term. Lagrange’s theorem implies that the number &lt;strong&gt;$h = N / n$ is always an integer&lt;/strong&gt; (because $n$ is a divisor of $N$). The number $h$ has a name: it’s the &lt;strong&gt;cofactor of the subgroup&lt;/strong&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Now consider that for every point of an elliptic curve we have $NP = 0$. This happens because $N$ is a multiple of any candidate $n$. Using the definition of cofactor, we can write:
$$n(hP) = 0$$&lt;/p&gt;
&lt;p&gt;Now suppose that $n$ is a prime number (for reason that will be explained in the next post, we prefer prime orders). This equation, written in this form, is telling us that the point $G = hP$ generates a subgroup of order $n$ (except when $G = hP = 0$, in which case the subgroup has order 1).&lt;/p&gt;
&lt;p&gt;In the light of this, we can outline the following algorithm:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Calculate the order $N$ of the elliptic curve.&lt;/li&gt;
&lt;li&gt;Choose the order $n$ of the subgroup. For the algorithm to work, this number must be prime and must be a divisor of $N$.&lt;/li&gt;
&lt;li&gt;Compute the cofactor $h = N / n$.&lt;/li&gt;
&lt;li&gt;Choose a random point $P$ on the curve.&lt;/li&gt;
&lt;li&gt;Compute $G = hP$.&lt;/li&gt;
&lt;li&gt;If $G$ is 0, then go back to step 4. Otherwise we have found a generator of a subgroup with order $n$ and cofactor $h$.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that this algorithm only works if $n$ is a prime. If $n$ wasn’t a prime, then the order of $G$ could be one of the divisors of $n$.&lt;/p&gt;
&lt;h1 id="discrete-logarithm"&gt;Discrete logarithm&lt;/h1&gt;
&lt;p&gt;As we did when working with continuous elliptic curves, we are now going to discuss the question: &lt;strong&gt;if we know $P$ and $Q$, what is $k$ such that $Q = kP$?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This problem, which is known as the &lt;strong&gt;discrete logarithm problem&lt;/strong&gt; for elliptic curves, is believed to be a “hard” problem, in that there is no known polynomial time algorithm that can run on a classical computer. There are, however, no mathematical proofs for this belief.&lt;/p&gt;
&lt;p&gt;This problem is also analogous to the discrete logarithm problem used with other cryptosystems such as the Digital Signature Algorithm (DSA), the Diffie-Hellman key exchange (D-H) and the ElGamal algorithm — it’s not a coincidence that they have the same name. The difference is that, with those algorithms, we use modulo exponentiation instead of scalar multiplication. Their discrete logarithm problem can be stated as follows: if we know $a$ and $b$, what’s $k$ such that $b = a^k \bmod{p}$?&lt;/p&gt;
&lt;p&gt;Both these problems are “discrete” because they involve finite sets (more precisely, cyclic subgroups). And they are “logarithms” because they are analogous to ordinary logarithms.&lt;/p&gt;
&lt;p&gt;What makes ECC interesting is that, as of today, the discrete logarithm problem for elliptic curves seems to be “harder” if compared to other similar problems used in cryptography. This implies that we need fewer bits for the integer $k$ in order to achieve the same level of security as with other cryptosystems, as we will see in details in the fourth and last post of this series.&lt;/p&gt;
&lt;h1 id="more-next-week"&gt;More next week!&lt;/h1&gt;
&lt;p&gt;Enough for today! I really hope you enjoyed this post. Leave a comment if you didn’t.&lt;/p&gt;
&lt;p&gt;Next week’s post will be the third in this series and will be about ECC algorithms: key pair generation, ECDH and ECDSA. That will be one of the most interesting parts of this series. Don’t miss it!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://andrea.corbellini.name/2015/05/30/elliptic-curve-cryptography-ecdh-and-ecdsa/"&gt;Read the next post of the series &amp;raquo;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content><category term="cryptography"></category><category term="ecc"></category><category term="math"></category><category term="security"></category></entry><entry><title>Elliptic Curve Cryptography: a gentle introduction</title><link href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/" rel="alternate"></link><published>2015-05-17T11:24:00+00:00</published><updated>2015-05-17T11:24:00+00:00</updated><author><name>andreacorbellini</name></author><id>tag:andrea.corbellini.name,2015-05-17:/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/</id><summary type="html">&lt;p&gt;Those of you who know what public-key cryptography is may have already heard of &lt;strong&gt;ECC&lt;/strong&gt;, &lt;strong&gt;ECDH&lt;/strong&gt; or &lt;strong&gt;ECDSA&lt;/strong&gt;. The first is an acronym for Elliptic Curve Cryptography, the others are names for algorithms based on it.&lt;/p&gt;
&lt;p&gt;Today, we can find elliptic curves cryptosystems in &lt;a href="https://tools.ietf.org/html/rfc4492"&gt;TLS&lt;/a&gt;, &lt;a href="https://tools.ietf.org/html/rfc6637"&gt;PGP&lt;/a&gt; and &lt;a href="https://tools.ietf.org/html/rfc5656"&gt;SSH&lt;/a&gt;, which are just three of the main technologies on which the modern web and IT world …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Those of you who know what public-key cryptography is may have already heard of &lt;strong&gt;ECC&lt;/strong&gt;, &lt;strong&gt;ECDH&lt;/strong&gt; or &lt;strong&gt;ECDSA&lt;/strong&gt;. The first is an acronym for Elliptic Curve Cryptography, the others are names for algorithms based on it.&lt;/p&gt;
&lt;p&gt;Today, we can find elliptic curves cryptosystems in &lt;a href="https://tools.ietf.org/html/rfc4492"&gt;TLS&lt;/a&gt;, &lt;a href="https://tools.ietf.org/html/rfc6637"&gt;PGP&lt;/a&gt; and &lt;a href="https://tools.ietf.org/html/rfc5656"&gt;SSH&lt;/a&gt;, which are just three of the main technologies on which the modern web and IT world are based. Not to mention &lt;a href="https://en.bitcoin.it/wiki/Secp256k1"&gt;Bitcoin&lt;/a&gt; and other cryptocurrencies.&lt;/p&gt;
&lt;p&gt;Before ECC become popular, almost all public-key algorithms were based on RSA, DSA, and DH, alternative cryptosystems based on modular arithmetic. RSA and friends are still very important today, and often are used alongside ECC. However, while the magic behind RSA and friends can be easily explained, is widely understood, and &lt;a href="http://code.activestate.com/recipes/578838-rsa-a-simple-and-easy-to-read-implementation/"&gt;rough implementations can be written quite easily&lt;/a&gt;, the foundations of ECC are still a mystery to most.&lt;/p&gt;
&lt;p&gt;With a series of blog posts I’m going to give you a gentle introduction to the world of elliptic curve cryptography. My aim is not to provide a complete and detailed guide to ECC (the web is full of information on the subject), but to provide &lt;strong&gt;a simple overview of what ECC is and why it is considered secure&lt;/strong&gt;, without losing time on long mathematical proofs or boring implementation details. I will also give &lt;strong&gt;helpful examples together with visual interactive tools and scripts to play with&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Specifically, here are the topics I’ll touch:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/"&gt;Elliptic curves over real numbers and the group law&lt;/a&gt;&lt;/strong&gt; (covered in this blog post)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://andrea.corbellini.name/2015/05/23/elliptic-curve-cryptography-finite-fields-and-discrete-logarithms/"&gt;Elliptic curves over finite fields and the discrete logarithm problem&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://andrea.corbellini.name/2015/05/30/elliptic-curve-cryptography-ecdh-and-ecdsa/"&gt;Key pair generation and two ECC algorithms: ECDH and ECDSA&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://andrea.corbellini.name/2015/06/08/elliptic-curve-cryptography-breaking-security-and-a-comparison-with-rsa/"&gt;Algorithms for breaking ECC security, and a comparison with RSA&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In order to understand what’s written here, you’ll need to know some basic stuff of set theory, geometry and modular arithmetic, and have familiarity with symmetric and asymmetric cryptography. Lastly, you need to have a clear idea of what an “easy” problem is, what a “hard” problem is, and their roles in cryptography.&lt;/p&gt;
&lt;p&gt;Ready? Let’s start!&lt;/p&gt;
&lt;h1 id="elliptic-curves"&gt;Elliptic Curves&lt;/h1&gt;
&lt;p&gt;First of all: what is an elliptic curve? Wolfram MathWorld gives an excellent and complete &lt;a href="http://mathworld.wolfram.com/EllipticCurve.html"&gt;definition&lt;/a&gt;. But for our aims, an elliptic curve will simply be &lt;strong&gt;the set of points described by the equation&lt;/strong&gt;:
$$y^2 = x^3 + ax + b$$&lt;/p&gt;
&lt;p&gt;where $4a^3 + 27b^2 \ne 0$ (this is required to exclude &lt;a href="https://en.wikipedia.org/wiki/Singularity_(mathematics)"&gt;singular curves&lt;/a&gt;). The equation above is what is called &lt;em&gt;Weierstrass normal form&lt;/em&gt; for elliptic curves.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/curves.png" alt="Different shapes for different elliptic curves" width="440" height="450"&gt;
  &lt;figcaption&gt;Different shapes for different elliptic curves ($b = 1$, $a$ varying from 2 to -3).&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/singularities.png" alt="Types of singularities" width="300" height="220"&gt;
  &lt;figcaption&gt;Types of singularities: on the left, a curve with a cusp ($y^2 = x^3$). On the right, a curve with a self-intersection ($y^2 = x^3 - 3x + 2$). None of them is a valid elliptic curve.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Depending on the value of $a$ and $b$, elliptic curves may assume different shapes on the plane. As it can be easily seen and verified, elliptic curves are symmetric about the $x$-axis.&lt;/p&gt;
&lt;p&gt;For our aims, &lt;strong&gt;we will also need a &lt;a href="https://en.wikipedia.org/wiki/Point_at_infinity"&gt;point at infinity&lt;/a&gt;&lt;/strong&gt; (also known as ideal point) to be part of our curve. From now on, we will denote our point at infinity with the symbol 0 (zero).&lt;/p&gt;
&lt;p&gt;If we want to explicitly take into account the point at infinity, we can refine our definition of elliptic curve as follows:
$$\left\{ (x, y) \in \mathbb{R}^2\ |\ y^2 = x^3 + ax + b,\ 4 a^3 + 27 b^2 \ne 0 \right\}\ \cup\ \left\{ 0 \right\}$$&lt;/p&gt;
&lt;h1 id="groups"&gt;Groups&lt;/h1&gt;
&lt;p&gt;A group in mathematics is a set for which we have defined a binary operation that we call “addition” and indicate with the symbol +. In order for the set $\mathbb{G}$ to be a group, addition must defined so that it respects the following four properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;closure:&lt;/strong&gt; if $a$ and $b$ are members of $\mathbb{G}$, then $a + b$ is a member of $\mathbb{G}$;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;associativity:&lt;/strong&gt; $(a + b) + c = a + (b + c)$;&lt;/li&gt;
&lt;li&gt;there exists an &lt;strong&gt;identity element&lt;/strong&gt; 0 such that $a + 0 = 0 + a = a$;&lt;/li&gt;
&lt;li&gt;every element has an &lt;strong&gt;inverse&lt;/strong&gt;, that is: for every $a$ there exists $b$ such that $a + b = 0$.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If we add a fifth requirement:&lt;/p&gt;
&lt;ol start="5"&gt;
  &lt;li&gt;&lt;strong&gt;commutativity:&lt;/strong&gt; $a + b = b + a$,&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;then the group is called &lt;em&gt;abelian group&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;With the usual notion of addition, the set of integer numbers $\mathbb{Z}$ is a group (moreover, it’s an abelian group). The set of natural numbers $\mathbb{N}$ however is not a group, as the fourth property can’t be satisfied.&lt;/p&gt;
&lt;p&gt;Groups are nice because, if we can demonstrate that those four properties hold, we get some other properties for free. For example: &lt;strong&gt;the identity element is unique&lt;/strong&gt;; also the &lt;strong&gt;inverses are unique&lt;/strong&gt;, that is: for every $a$ there exists only one $b$ such that $a + b = 0$ (and we can write $b$ as $-a$). Either directly or indirectly, these and other facts about groups will be very important for us later.&lt;/p&gt;
&lt;h1 id="group-law"&gt;The group law for elliptic curves&lt;/h1&gt;
&lt;p&gt;We can define a group over elliptic curves. Specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the elements of the group are the points of an elliptic curve;&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;identity element&lt;/strong&gt; is the point at infinity 0;&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;inverse&lt;/strong&gt; of a point $P$ is the one symmetric about the $x$-axis;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;addition&lt;/strong&gt; is given by the following rule: &lt;strong&gt;given three aligned, non-zero points $P$, $Q$ and $R$, their sum is $P + Q + R = 0$&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/three-aligned-points.png" alt="Three aligned points" width="300" height="300"&gt;
  &lt;figcaption&gt;The sum of three aligned point is 0.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Note that with the last rule, we only require three aligned points, and three points are aligned without respect to order. This means that, if $P$, $Q$ and $R$ are aligned, then $P + (Q + R) = Q + (P + R) = R + (P + Q) = \cdots = 0$. This way, we have intuitively proved that &lt;strong&gt;our + operator is both associative and commutative: we are in an abelian group&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So far, so great. But how do we actually compute the sum of two arbitrary points?&lt;/p&gt;
&lt;h1 id="geometric-addition"&gt;Geometric addition&lt;/h1&gt;
&lt;p&gt;Thanks to the fact that we are in an abelian group, we can write $P + Q + R = 0$ as $P + Q = -R$. This equation, in this form, lets us derive a geometric method to compute the sum between two points $P$ and $Q$: &lt;strong&gt;if we draw a line passing through $P$ and $Q$, this line will intersect a third point on the curve, $R$&lt;/strong&gt; (this is implied by the fact that $P$, $Q$ and $R$ are aligned). &lt;strong&gt;If we take the inverse of this point, $-R$, we have found the result of $P + Q$&lt;/strong&gt;.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/point-addition.png" alt="Point addition" width="287" height="300"&gt;
  &lt;figcaption&gt;Draw the line through $P$ and $Q$. The line intersects a third point $R$. The point symmetric to it, $-R$, is the result of $P + Q$.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This geometric method works but needs some refinement. Particularly, we need to answer a few questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What if $P = 0$ or $Q = 0$?&lt;/strong&gt; Certainly, we can’t draw any line (0 is not on the $xy$-plane). But given that we have defined 0 as the identity element, $P + 0 = P$ and $0 + Q = Q$, for any $P$ and for any $Q$.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What if $P = -Q$?&lt;/strong&gt; In this case, the line going through the two points is vertical, and does not intersect any third point. But if $P$ is the inverse of $Q$, then we have $P + Q = P + (-P) = 0$ from the definition of inverse.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What if $P = Q$?&lt;/strong&gt; In this case, there are infinitely many lines passing through the point. Here things start getting a bit more complicated. But consider a point $Q’ \ne P$. What happens if we make $Q’$ approach $P$, getting closer and closer to it?
 &lt;br&gt;
&lt;figure&gt;
     &lt;img src="https://andrea.corbellini.name/images/animation-point-doubling.gif" width="300" height="300" alt="The result of P + Q as Q is approaching P"&gt;
     &lt;figcaption&gt;As the two points become closer together, the line passing through them becomes tangent to the curve.&lt;/figcaption&gt;
   &lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As $Q’$ tends towards $P$, the line passing through $P$ and $Q’$ becomes tangent to the curve. In the light of this we can say that $P + P = -R$, where $R$ is the point of intersection between the curve and the line tangent to the curve in $P$.
* &lt;strong&gt;What if $P \ne Q$, but there is no third point $R$?&lt;/strong&gt; We are in a case very similar to the previous one. In fact, we are in the case where the line passing through $P$ and $Q$ is tangent to the curve.
 &lt;br&gt;
&lt;figure&gt;
     &lt;img src="https://andrea.corbellini.name/images/animation-tangent-line.gif" alt="The result of P + Q as Q is approaching P" width="300" height="300"&gt;
     &lt;figcaption&gt;If our line intersects just two points, then it means that it's tangent to the curve. It's easy to see how the result of the sum becomes symmetric to one of the two points.&lt;/figcaption&gt;
   &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Let’s assume that $P$ is the tangency point. In the previous case, we would have written $P + P = -Q$. That equation now becomes $P + Q = -P$. If, on the other hand, $Q$ were the tangency point, the correct equation would have been $P + Q = -Q$.&lt;/p&gt;
&lt;p&gt;The geometric method is now complete and covers all cases. With a pencil and a ruler we are able to perform addition involving every point of any elliptic curve. If you want to try, &lt;strong&gt;take a look at the &lt;a href="https://andrea.corbellini.name/ecc/interactive/reals-add.html"&gt;HTML5/JavaScript visual tool&lt;/a&gt; I’ve built for computing sums on elliptic curves!&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id="algebraic-addition"&gt;Algebraic addition&lt;/h1&gt;
&lt;p&gt;If we want a computer to perform point addition, we need to turn the geometric method into an algebraic method. Transforming the rules described above into a set of equations may seem straightforward, but actually it can be really tedious because it requires solving cubic equations. For this reason, here I will report only the results.&lt;/p&gt;
&lt;p&gt;First, let’s get get rid of the most annoying corner cases. We already know that $P + (-P) = 0$, and we also know that $P + 0 = 0 + P = P$. So, in our equations, we will avoid these two cases and we will only consider &lt;strong&gt;two non-zero, non-symmetric points $P = (x_P, y_P)$ and $Q = (x_Q, y_Q)$&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If $P$ and $Q$ are distinct&lt;/strong&gt; ($x_P \ne x_Q$), the line through them has &lt;strong&gt;slope&lt;/strong&gt;:
$$m = \frac{y_P - y_Q}{x_P - x_Q}$$&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;intersection&lt;/strong&gt; of this line with the elliptic curve is a third point $R = (x_R, y_R)$:
$$\begin{align*}
    x_R &amp;amp; = m^2 - x_P - x_Q \\
    y_R &amp;amp; = y_P + m(x_R - x_P)
\end{align*}$$&lt;/p&gt;
&lt;p&gt;or, equivalently:
$$y_R = y_Q + m(x_R - x_Q)$$&lt;/p&gt;
&lt;p&gt;Hence $(x_P, y_P) + (x_Q, y_Q) = (x_R, -y_R)$ (pay attention at the signs and remember that $P + Q = -R$).&lt;/p&gt;
&lt;p&gt;If we wanted to check whether this result is right, we would have had to check whether $R$ belongs to the curve and whether $P$, $Q$ and $R$ are aligned. Checking whether the points are aligned is trivial, checking that $R$ belongs to the curve is not, as we would need to solve a cubic equation, which is not fun at all.&lt;/p&gt;
&lt;p&gt;Instead, let’s play with an example: according to our &lt;a href="https://andrea.corbellini.name/ecc/interactive/reals-add.html"&gt;visual tool&lt;/a&gt;, given $P = (1, 2)$ and $Q = (3, 4)$ over the curve $y^2 = x^3 - 7x + 10$, their sum is $P + Q = -R = (-3, 2)$. Let’s see if our equations agree:
$$\begin{align*}
    m &amp;amp; = \frac{y_P - y_Q}{x_P - x_Q} = \frac{2 - 4}{1 - 3} = 1 \\
    x_R &amp;amp; = m^2 - x_P - x_Q = 1^2 - 1 - 3 = -3 \\
    y_R &amp;amp; = y_P + m(x_R - x_P) = 2 + 1 \cdot (-3 - 1) = -2 \\
        &amp;amp; = y_Q + m(x_R - x_Q) = 4 + 1 \cdot (-3 - 3) = -2
\end{align*}$$&lt;/p&gt;
&lt;p&gt;Yes, this is correct!&lt;/p&gt;
&lt;p&gt;Note that these equations work even if &lt;strong&gt;one of $P$ or $Q$ is a tangency point&lt;/strong&gt;. Let’s try with $P = (-1, 4)$ and $Q = (1, 2)$.
$$\begin{align*}
    m &amp;amp; = \frac{y_P - y_Q}{x_P - x_Q} = \frac{4 - 2}{-1 - 1} = -1 \\
    x_R &amp;amp; = m^2 - x_P - x_Q = (-1)^2 - (-1) - 1 = 1 \\
    y_R &amp;amp; = y_P + m(x_R - x_P) = 4 + -1 \cdot (1 - (-1)) = 2
\end{align*}$$&lt;/p&gt;
&lt;p&gt;We get the result $P + Q = (1, -2)$, which is the same result given by the &lt;a href="https://andrea.corbellini.name/ecc/interactive/reals-add.html?px=-1&amp;amp;py=4&amp;amp;qx=1&amp;amp;qy=2"&gt;visual tool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The case $P = Q$ needs to be treated a bit differently&lt;/strong&gt;: the equations for $x_R$ and $y_R$ are the same, but given that $x_P = x_Q$, we must use a different equation for the &lt;strong&gt;slope&lt;/strong&gt;:
$$m = \frac{3 x_P^2 + a}{2 y_P}$$&lt;/p&gt;
&lt;p&gt;Note that, as we would expect, this expression for $m$ is the first derivative of:
$$y_P = \pm \sqrt{x_P^3 + ax_P + b}$$&lt;/p&gt;
&lt;p&gt;To prove the validity of this result it is enough to check that $R$ belongs to the curve and that the line passing through $P$ and $R$ has only two intersections with the curve. But again, we don’t prove this fact, and instead try with an example: $P = Q = (1, 2)$.
$$\begin{align*}
    m &amp;amp; = \frac{3x_P^2 + a}{2 y_P} = \frac{3 \cdot 1^2 - 7}{2 \cdot 2} = -1 \\
    x_R &amp;amp; = m^2 - x_P - x_Q = (-1)^2 - 1 - 1 = -1 \\
    y_R &amp;amp; = y_P + m(x_R - x_P) = 2 + (-1) \cdot (-1 - 1) = 4
\end{align*}$$&lt;/p&gt;
&lt;p&gt;Which gives us $P + P = -R = (-1, -4)$. &lt;a href="https://andrea.corbellini.name/ecc/interactive/reals-add.html?px=1&amp;amp;py=2&amp;amp;qx=1&amp;amp;qy=2"&gt;Correct&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Although the procedure to derive them can be really tedious, our equations are pretty compact. This is thanks to Weierstrass normal form: without it, these equations could have been really long and complicated!&lt;/p&gt;
&lt;h1 id="scalar-multiplication"&gt;Scalar multiplication&lt;/h1&gt;
&lt;p&gt;Other than addition, we can define another operation: &lt;strong&gt;scalar multiplication&lt;/strong&gt;, that is:
$$nP = \underbrace{P + P + \cdots + P}_{n\ \text{times}}$$&lt;/p&gt;
&lt;p&gt;where $n$ is a natural number. I’ve written a &lt;strong&gt;&lt;a href="https://andrea.corbellini.name/ecc/interactive/reals-mul.html"&gt;visual tool&lt;/a&gt; for scalar multiplication&lt;/strong&gt; too, if you want to play with that.&lt;/p&gt;
&lt;p&gt;Written in that form, it may seem that computing $nP$ requires $n$ additions. If $n$ has $k$ binary digits, then our algorithm would be $O(2^k)$, which is not really good. But there exist faster algorithms.&lt;/p&gt;
&lt;p&gt;One of them is the &lt;span id="double-and-add"&gt;&lt;strong&gt;double and add&lt;/strong&gt;&lt;/span&gt; algorithm. Its principle of operation can be better explained with an example. Take $n = 151$. Its binary representation is $10010111_2$. This binary representation can be turned into a sum of powers of two:
$$\begin{align*}
    151 &amp;amp; = 1 \cdot 2^7 + 0 \cdot 2^6 + 0 \cdot 2^5 + 1 \cdot 2^4 + 0 \cdot 2^3 + 1 \cdot 2^2 + 1 \cdot 2^1 + 1 \cdot 2^0 \\
        &amp;amp; = 2^7 + 2^4 + 2^2 + 2^1 + 2^0
\end{align*}$$&lt;/p&gt;
&lt;p&gt;(We have taken each binary digit of $n$ and multiplied it by a power of two.)&lt;/p&gt;
&lt;p&gt;In view of this, we can write:
$$151 \cdot P = 2^7 P + 2^4 P + 2^2 P + 2^1 P + 2^0 P$$&lt;/p&gt;
&lt;p&gt;What the double and add algorithm tells us to do is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Take $P$.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Double&lt;/em&gt; it, so that we get $2P$.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Add&lt;/em&gt; $2P$ to $P$ (in order to get the result of $2^1P + 2^0P$).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Double&lt;/em&gt; $2P$, so that we get $2^2P$.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Add&lt;/em&gt; it to our result (so that we get $2^2P + 2^1P + 2^0P$).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Double&lt;/em&gt; $2^2P$ to get $2^3P$.&lt;/li&gt;
&lt;li&gt;Don’t perform any addition involving $2^3P$.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Double&lt;/em&gt; $2^3P$ to get $2^4P$.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Add&lt;/em&gt; it to our result (so that we get $2^4P + 2^2P + 2^1P + 2^0P$).&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the end, we can compute $151 \cdot P$ performing just seven doublings and four additions.&lt;/p&gt;
&lt;p&gt;If this is not clear enough, here’s a Python script that implements the algorithm:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Generates the binary digits of n, starting&lt;/span&gt;
&lt;span class="sd"&gt;    from the least significant bit.&lt;/span&gt;

&lt;span class="sd"&gt;    bits(151) -&amp;gt; 1, 1, 1, 0, 1, 0, 0, 1&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;double_and_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Returns the result of n * x, computed using&lt;/span&gt;
&lt;span class="sd"&gt;    the double and add algorithm.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;addend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;addend&lt;/span&gt;
        &lt;span class="n"&gt;addend&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If doubling and adding are both $O(1)$ operations, then &lt;strong&gt;this algorithm is $O(\log n)$&lt;/strong&gt; (or $O(k)$ if we consider the bit length), which is pretty good. Surely much better than the initial $O(n)$ algorithm!&lt;/p&gt;
&lt;h1 id="logarithm"&gt;Logarithm&lt;/h1&gt;
&lt;p&gt;Given $n$ and $P$, we now have at least one polynomial time algorithm for computing $Q = nP$. But what about the other way round? &lt;strong&gt;What if we know $Q$ and $P$ and need to find out $n$&lt;/strong&gt;? This problem is known as the &lt;strong&gt;logarithm problem&lt;/strong&gt;. We call it “logarithm” instead of “division” for conformity with other cryptosystems (where instead of multiplication we have exponentiation).&lt;/p&gt;
&lt;p&gt;I don’t know of any “easy” algorithm for the logarithm problem, however &lt;a href="https://andrea.corbellini.name/ecc/interactive/reals-mul.html?a=-3&amp;amp;b=1&amp;amp;px=0&amp;amp;py=1"&gt;playing with multiplication&lt;/a&gt; it’s easy to see some patterns. For example, take the curve $y^2 = x^3 - 3x + 1$ and the point $P = (0, 1)$. We can immediately verify that, if $n$ is odd, $nP$ is on the curve on the left semiplane; if $n$ is even, $nP$ is on the curve on the right semiplane. If we experimented more, we could probably find more patterns that eventually could lead us to write an algorithm for computing the logarithm on that curve efficiently.&lt;/p&gt;
&lt;p&gt;But there’s a variant of the logarithm problem: the &lt;em&gt;discrete&lt;/em&gt; logarithm problem. As we will see in the next post, if we reduce the domain of our elliptic curves, &lt;strong&gt;scalar multiplication remains “easy”, while the discrete logarithm becomes a “hard” problem&lt;/strong&gt;. This duality is the key brick of elliptic curve cryptography.&lt;/p&gt;
&lt;h1 id="see-you-next-week"&gt;See you next week&lt;/h1&gt;
&lt;p&gt;That’s all for today, I hope you enjoyed this post! Next week we will discover &lt;strong&gt;finite fields&lt;/strong&gt; and the &lt;strong&gt;&lt;em&gt;discrete&lt;/em&gt; logarithm problem&lt;/strong&gt;, along with examples and tools to play with. If this stuff sounds interesting to you, then stay tuned!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://andrea.corbellini.name/2015/05/23/elliptic-curve-cryptography-finite-fields-and-discrete-logarithms/"&gt;Read the next post of the series &amp;raquo;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content><category term="cryptography"></category><category term="bitcoin"></category><category term="dh"></category><category term="dsa"></category><category term="ecc"></category><category term="math"></category><category term="pgp"></category><category term="rsa"></category><category term="security"></category><category term="ssh"></category><category term="tls"></category><category term="web"></category></entry><entry><title>Let's Encrypt: the road towards a better web?</title><link href="https://andrea.corbellini.name/2015/04/12/lets-encrypt-the-road-towards-a-better-web/" rel="alternate"></link><published>2015-04-12T16:07:00+00:00</published><updated>2015-04-12T16:07:00+00:00</updated><author><name>andreacorbellini</name></author><id>tag:andrea.corbellini.name,2015-04-12:/2015/04/12/lets-encrypt-the-road-towards-a-better-web/</id><summary type="html">&lt;p&gt;I’ve always dreamed of a encrypted web, where HTTPS is the standard and plain HTTP is no more. A web where eavesdropping or manipulating information is not possible, or at least much harder than today.&lt;/p&gt;
&lt;p&gt;I remember that I got excited when I first heard of &lt;strong&gt;&lt;a href="http://www.cacert.org/"&gt;CAcert&lt;/a&gt;: “a community-driven Certificate Authority that issues certificates to the public at large for free”&lt;/strong&gt;. Unfortunately, CAcert …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’ve always dreamed of a encrypted web, where HTTPS is the standard and plain HTTP is no more. A web where eavesdropping or manipulating information is not possible, or at least much harder than today.&lt;/p&gt;
&lt;p&gt;I remember that I got excited when I first heard of &lt;strong&gt;&lt;a href="http://www.cacert.org/"&gt;CAcert&lt;/a&gt;: “a community-driven Certificate Authority that issues certificates to the public at large for free”&lt;/strong&gt;. Unfortunately, CAcert’s root certificate never made it into the major web browsers and operating systems. Whatever the reasons, the result is that visiting a HTTPS website with a certificate released by CAcert produces nothing but a &lt;a href="https://cacert.org/"&gt;scary warning with a call to leave the site&lt;/a&gt;, making CAcert unsuitable for most.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.startssl.com/"&gt;StarCom&lt;/a&gt;, on the other hand, has made it into the major browsers. But despite its certificates are released for free, it has never become much widespread. Also, StarCom &lt;a href="https://news.ycombinator.com/item?id=7557764"&gt;has&lt;/a&gt; &lt;a href="https://www.techdirt.com/articles/20140409/11442426859/shameful-security-startcom-charges-people-to-revoke-ssl-certs-vulnerable-to-heartbleed.shtml"&gt;been&lt;/a&gt; &lt;a href="https://twitter.com/startssl/status/453631038883758080"&gt;heavily&lt;/a&gt; &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=994033"&gt;criticized&lt;/a&gt; for how the Heartbleed vulnerability was handled, and AFAIK this has led many customers away.&lt;/p&gt;
&lt;h1 id="lets-encrypt"&gt;Let’s Encrypt&lt;/h1&gt;
&lt;p&gt;Recently, I learned about &lt;strong&gt;&lt;a href="https://letsencrypt.org/"&gt;Let’s Encrypt&lt;/a&gt;: a “free, automated, and open” Certificate Authority&lt;/strong&gt; arriving in mid-2015. There are many important facts that make Let’s Encrypt different and better from all the other Certificate Authorities out there. I’ll let you discover all of them. Probably, the most important fact is that Let’s Encrypt has &lt;strong&gt;&lt;a href="https://letsencrypt.org/sponsors/"&gt;important sponsors&lt;/a&gt;, including Mozilla&lt;/strong&gt;. And this is what matters today, because it gives Let’s Encrypt a chance to be included in at least one major browser.&lt;/p&gt;
&lt;figure&gt;
  &lt;a href="https://letsencrypt.org/"&gt;&lt;img src="https://andrea.corbellini.name/images/letsencrypt-logo-horizontal.png" alt="Let&amp;#039;s Encrypt" width="519" height="124"&gt;&lt;/a&gt;
  &lt;figcaption&gt;Let's Encrypt logo.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Another interesting fact about Let’s Encrypt is that its &lt;strong&gt;certificates are released in &lt;a href="https://letsencrypt.org/howitworks/technology/"&gt;a way that is both secure and automated&lt;/a&gt; at the same time&lt;/strong&gt;. This gives the opportunity for other (potential) Certificate Authorities to adopt the same automated system.&lt;/p&gt;
&lt;p&gt;If Let’s Encrypt wins, then everyone will have an easy way to obtain a free HTTPS certificate for their website. The next big step would be making Let’s Encrypt increase in adoption and the final step would be deprecating plain HTTP. There are however a few open questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What will be the answer from Google, Apple, Microsoft and other major browser/operating systems makers?&lt;/li&gt;
&lt;li&gt;What will be the reaction of Verisign and Comodo? (That together hold &lt;a href="http://w3techs.com/technologies/overview/ssl_certificate/all"&gt;more than 50%&lt;/a&gt; of all the certificates currently used on the web.)&lt;/li&gt;
&lt;li&gt;Will they declare war to Let’s Encrypt or will they consolidate their efforts on customer services and Extended Validation?&lt;/li&gt;
&lt;li&gt;Will the technology behind Let’s Encrypt allow the creation of a new model for certificate management? Will we see web servers and providers with built-in support for it?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I do not have an answer to these questions, time will tell. However I really hope my dream to become a reality soon. If you, like me, want Let’s Encrypt to be a success, then please &lt;strong&gt;share and discuss&lt;/strong&gt; about it. Perhaps, one day, we will find ourselves teaching juniors that HTTPS has not always been the standard… :)&lt;/p&gt;</content><category term="information-technology"></category><category term="security"></category><category term="tls"></category><category term="web"></category><category term="let's encrypt"></category></entry><entry><title>Running Ubuntu Snappy inside Docker</title><link href="https://andrea.corbellini.name/2015/03/25/running-ubuntu-snappy-inside-docker/" rel="alternate"></link><published>2015-03-25T20:46:00+00:00</published><updated>2015-03-25T20:46:00+00:00</updated><author><name>andreacorbellini</name></author><id>tag:andrea.corbellini.name,2015-03-25:/2015/03/25/running-ubuntu-snappy-inside-docker/</id><summary type="html">&lt;p&gt;Many of you may have already heard of &lt;a href="https://developer.ubuntu.com/en/snappy/"&gt;Ubuntu Core&lt;/a&gt;. For those who haven’t, it’s a minimal Ubuntu version, running only a few essential services and ships with a new package manager (snappy) that provides &lt;em&gt;transactional&lt;/em&gt; updates. Ubuntu Core provides a lightweight base operating system which is fast to deploy and easy to maintain up to date. It also uses a nice …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Many of you may have already heard of &lt;a href="https://developer.ubuntu.com/en/snappy/"&gt;Ubuntu Core&lt;/a&gt;. For those who haven’t, it’s a minimal Ubuntu version, running only a few essential services and ships with a new package manager (snappy) that provides &lt;em&gt;transactional&lt;/em&gt; updates. Ubuntu Core provides a lightweight base operating system which is fast to deploy and easy to maintain up to date. It also uses a nice &lt;a href="https://wiki.ubuntu.com/SecurityTeam/Specifications/SnappyConfinement"&gt;security model&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All these characteristics make it particularly appealing for the cloud. And, in fact, people are starting considering it for building their (micro)services architectures. Some weeks ago, a user on Ask Ubuntu asked: &lt;a href="http://askubuntu.com/questions/566736/can-i-run-snappy-ubuntu-core-as-a-guest-inside-docker/577248"&gt;Can I run Snappy Ubuntu Core as a guest inside Docker?&lt;/a&gt; The problem is that Ubuntu Core does not ship with an official Docker image that we can pull, so we are forced to set it up manually. Here’s how.&lt;/p&gt;
&lt;h1 id="creating-the-docker-image"&gt;Creating the Docker image&lt;/h1&gt;
&lt;h2 id="step-1-get-the-latest-ubuntu-core"&gt;Step 1: get the latest Ubuntu Core&lt;/h2&gt;
&lt;p&gt;As of writing, the latest Ubuntu Core image is alpha 3 and can be downloaded with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;wget&lt;span class="w"&gt; &lt;/span&gt;http://cdimage.ubuntu.com/ubuntu-core/releases/alpha-3/ubuntu-core-WEBDM-alpha-03_amd64-generic.img.xz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(If you browse to &lt;a href="http://cdimage.ubuntu.com/ubuntu-core/releases/alpha-3/"&gt;cdimage.ubuntu.com&lt;/a&gt;, you can also find the signed hashsums.)&lt;/p&gt;
&lt;p&gt;The downloaded image is XZ-compressed and we need to extract it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;unxz&lt;span class="w"&gt; &lt;/span&gt;ubuntu-core-WEBDM-alpha-03_amd64-generic.img.xz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="step-2-connect-the-image-using-qemu-nbd"&gt;Step 2: connect the image using qemu-nbd&lt;/h2&gt;
&lt;p&gt;The file we have just downloaded and extracted is a filesystem dump. The previous version of the image (Alpha 2) was a QCOW2 image (the format used by QEMU). In order to access its contents, we have a few options. Here I’ll show one that works with both filesystem dumps and QCOW2 images. The trick consists in using &lt;code&gt;qemu-nbd&lt;/code&gt; (a tool from the &lt;a href="https://apps.ubuntu.com/cat/applications/qemu-utils/"&gt;qemu-utils&lt;/a&gt; package):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;qemu-nbd&lt;span class="w"&gt; &lt;/span&gt;-rc&lt;span class="w"&gt; &lt;/span&gt;/dev/nbd0&lt;span class="w"&gt; &lt;/span&gt;ubuntu-core-WEBDM-alpha-03_amd64-generic.img
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This command will create a virtual device named &lt;code&gt;/dev/nbd0&lt;/code&gt;, with virtual partitions named &lt;code&gt;/dev/nbd0p1&lt;/code&gt;, &lt;code&gt;/dev/nbd0p2&lt;/code&gt;, … Use &lt;code&gt;fdisk -l /dev/nbd0&lt;/code&gt; to get an idea of what partitions are inside the QCOW2 image.&lt;/p&gt;
&lt;h2 id="step-3-mount-the-filesystem"&gt;Step 3: mount the filesystem&lt;/h2&gt;
&lt;p&gt;The partition we are interested in is &lt;code&gt;/dev/nbd0p3&lt;/code&gt;, so we need to mount it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;nbd0p3
&lt;span class="gp"&gt;# &lt;/span&gt;mount&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;/dev/nbd0p3&lt;span class="w"&gt; &lt;/span&gt;nbd0p3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="step-4-create-a-base-docker-image"&gt;Step 4: create a base Docker image&lt;/h2&gt;
&lt;p&gt;As suggested on the &lt;a href="https://docs.docker.com/articles/baseimages/"&gt;Docker documentation&lt;/a&gt;, creating a base Docker image from a directory is pretty straightforward:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;tar&lt;span class="w"&gt; &lt;/span&gt;-C&lt;span class="w"&gt; &lt;/span&gt;nbd0p3&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;import&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;ubuntu-core&lt;span class="w"&gt; &lt;/span&gt;alpha-3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our newly created image will now appear when running &lt;code&gt;docker images&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;images
&lt;span class="go"&gt;REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE&lt;/span&gt;
&lt;span class="go"&gt;ubuntu-core         alpha-3             f6df3c0e2d74        5 seconds ago       543.5 MB&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let’s verify if we did a good job:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;ubuntu-core:alpha-3&lt;span class="w"&gt; &lt;/span&gt;snappy
&lt;span class="go"&gt;Usage:snappy [-h] [-v]&lt;/span&gt;
&lt;span class="go"&gt;             {info,versions,search,update-versions,update,rollback,install,uninstall,tags,config,build,booted,chroot,framework,fake-version,nap}&lt;/span&gt;
&lt;span class="go"&gt;             ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yes! We have successfully added Ubuntu Core to the available Docker images and we have run our first snappy container!&lt;/p&gt;
&lt;h1 id="installing-and-running-software"&gt;Installing and running software&lt;/h1&gt;
&lt;p&gt;Without wasting too many words, here’s how to install and run the &lt;code&gt;xkcd-webserver&lt;/code&gt; snappy package inside docker:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8000&lt;/span&gt;:80&lt;span class="w"&gt; &lt;/span&gt;ubuntu-core:alpha-3&lt;span class="w"&gt; &lt;/span&gt;/bin/sh&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;snappy install xkcd-webserver &amp;amp;&amp;amp; cd /apps/xkcd-webserver/0.3.1 &amp;amp;&amp;amp; ./bin/xkcd-webserver&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;WARN: AppArmor not available when processing AppArmor hook&lt;/span&gt;
&lt;span class="go"&gt;Failed to get D-Bus connection: Operation not permitted&lt;/span&gt;
&lt;span class="go"&gt;Failed to get D-Bus connection: Operation not permitted&lt;/span&gt;

&lt;span class="go"&gt;** (process:13): WARNING **: user.vala:637: Can not connect to logind&lt;/span&gt;
&lt;span class="go"&gt;xkcd-webserver     21 kB     [======================================]    OK&lt;/span&gt;
&lt;span class="go"&gt;WARNING: failed to connect to dbus: org.freedesktop.DBus.Error.FileNotFound: Failed to connect to socket /var/run/dbus/system_bus_socket: No such file or directory&lt;/span&gt;
&lt;span class="go"&gt;Part            Tag   Installed  Available  Fingerprint     Active&lt;/span&gt;
&lt;span class="go"&gt;xkcd-webserver  edge  0.3.1      -          3a9152b8bff494  *&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, if you visit http://localhost:8000/ you should see a random XKCD comic.&lt;/p&gt;
&lt;p&gt;If you have payed attention, you may have noticed a few warnings about AppArmor, DBus and logind. The reason why you are seeing these warnings is pretty simple: we did not start neither AppArmor nor DBus nor logind. Now, generally speaking, we could run init inside Docker and fix these and other warnings. However that’s not what Docker is meant for. So if you want to run AppArmor or similar stuff &lt;em&gt;from inside&lt;/em&gt; Docker or LXC, then probably you should consider virtualization.&lt;/p&gt;
&lt;h1 id="dockerfile"&gt;Dockerfile&lt;/h1&gt;
&lt;p&gt;Once you have created the base Docker image, you can start creating some &lt;code&gt;Dockerfile&lt;/code&gt;s, if you need to. Here’s an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;ubuntu-core:alpha-3&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;snappy&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;xkcd-webserver
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;8000:80&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/apps/xkcd-webserver/0.3.1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;./bin/xkcd-webserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This &lt;code&gt;Dockerfile&lt;/code&gt; does the same job as the previous command: it installs and runs &lt;code&gt;xkcd-webserver&lt;/code&gt; on port 8000. In order to use it, first build it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;xkcd-webserver&lt;span class="w"&gt; &lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check that it has been correctly installed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;images
&lt;span class="go"&gt;REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE&lt;/span&gt;
&lt;span class="go"&gt;xkcd-webserver      latest              260e0116e9e3        3 minutes ago       543.5 MB&lt;/span&gt;
&lt;span class="go"&gt;ubuntu-core         alpha-3             f6df3c0e2d74        About an hour ago   543.5 MB&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then run it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;xkcd-webserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, you should see a random XKCD comic on &lt;a href="http://localhost:8000/"&gt;http://localhost:8000/&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;That’s all folks! I hope you enjoyed this tiny guide, and if you need help, please ask a question on Ask Ubuntu with the &lt;a href="http://askubuntu.com/questions/tagged/ubuntu-core"&gt;ubuntu-core tag&lt;/a&gt;, which I’m subscribed to.&lt;/p&gt;</content><category term="cloud"></category><category term="docker"></category><category term="snappy"></category><category term="ubuntu"></category><category term="ubuntu core"></category><category term="xkcd"></category></entry><entry><title>Are LXC and Docker secure?</title><link href="https://andrea.corbellini.name/2015/02/20/are-lxc-and-docker-secure/" rel="alternate"></link><published>2015-02-20T16:36:00+00:00</published><updated>2015-02-20T16:36:00+00:00</updated><author><name>andreacorbellini</name></author><id>tag:andrea.corbellini.name,2015-02-20:/2015/02/20/are-lxc-and-docker-secure/</id><summary type="html">&lt;p&gt;Since its initial release in 2008, LXC has become widespread among servers. Today, it is becoming the preferred deployment strategy in many contexts, also thanks to Docker and, more recently, LXD.&lt;/p&gt;
&lt;p&gt;LXC and Docker are used not only to achieve modular architecture design, but also as a way to run untrusted code in an isolated environment.&lt;/p&gt;
&lt;p&gt;We can agree that the LXC and Docker …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since its initial release in 2008, LXC has become widespread among servers. Today, it is becoming the preferred deployment strategy in many contexts, also thanks to Docker and, more recently, LXD.&lt;/p&gt;
&lt;p&gt;LXC and Docker are used not only to achieve modular architecture design, but also as a way to run untrusted code in an isolated environment.&lt;/p&gt;
&lt;p&gt;We can agree that the LXC and Docker ecosystems are great and work well, but there’s an important question that I believe everyone should ask, but too few people are asking: &lt;strong&gt;are LXC and Docker secure?&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/broken-chain.jpg" alt="Broken Chain"&gt;
  &lt;figcaption&gt;A system is as safe as its weakest component.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In order to answer this question, I won’t go deep into the details of what LXC and Docker are. The web is full of information on &lt;a href="http://en.wikipedia.org/wiki/Cgroups#NAMESPACE-ISOLATION"&gt;namespaces&lt;/a&gt; and &lt;a href="http://en.wikipedia.org/wiki/Cgroups"&gt;cgroups&lt;/a&gt;. Rather, I’d like to show what LXC and Docker can do, what they cannot do, and what their default configuration allows them to do. My hope is to provide a quick checklist for those who want to go with LXC/Docker, but are unsure on what they need to pay attention to.&lt;/p&gt;
&lt;h1 id="what-lxc-and-docker-can-do"&gt;What LXC and Docker can do&lt;/h1&gt;
&lt;p&gt;As we all know, LXC confines processes mainly thanks to two Linux kernel features: namespaces and cgroups. These provide ways to control and limit access to resource such as memory or filesystem. So, for example, you can limit the bandwidth used by processes inside a container, you can limit the priority of the CPU scheduler, and so on.&lt;/p&gt;
&lt;p&gt;As it is well known, processes inside a LXC guest cannot:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;directly interact with the host processes, or with other LXC containers;&lt;/li&gt;
&lt;li&gt;access the root filesystem, unless configured otherwise;&lt;/li&gt;
&lt;li&gt;access special devices (block devices, network interfaces, …), unless configured otherwise;&lt;/li&gt;
&lt;li&gt;mount arbitrary filesystems;&lt;/li&gt;
&lt;li&gt;execute special &lt;code&gt;ioctl&lt;/code&gt;s, special syscalls or special interrupts, that would affect the behavior host.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And at the same time, processes inside an LXC guest can find an environment that is perfectly suitable to run a working operating system: I can run init, I can read from &lt;code&gt;/proc&lt;/code&gt;, I can access the internet.&lt;/p&gt;
&lt;p&gt;This is most of what LXC can do, and it’s also what you get by default. Docker (when used with the LXC backend) is a wrapper around LXC that provides utilities for easy deployment and management of the containers, so &lt;strong&gt;everything that applies to LXC, applies to Docker too&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If this sounds great, then beware that there are the things you should know…&lt;/p&gt;
&lt;h1 id="you-need-a-security-context"&gt;You need a security context&lt;/h1&gt;
&lt;p&gt;LXC is somewhat incomplete. What I mean is that some parts of special filesystems like procfs or sysfs are not faked. For example, as of now, I can successfully change the value of host’s &lt;code&gt;/proc/sys/kernel/panic&lt;/code&gt; or &lt;code&gt;/sys/class/thermal/cooling_device0/cur_state&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The reason why LXC is “incomplete” doesn’t really matter (it’s actually the kernel to be incomplete, but anyhow…). What matters is that certain nasty actions can be forbade, not by LXC itself, but by an AppArmor/SELinux profile that blocks read and write access certain &lt;code&gt;/proc&lt;/code&gt; and &lt;code&gt;/sys&lt;/code&gt; components. The AppArmor rules were shipped in Ubuntu since 12.10 (Quantal), and have been included upstream since early 2014, together with the SELinux rules.&lt;/p&gt;
&lt;p&gt;Therefore, &lt;strong&gt;a security context like AppArmor or SELinux is required to run LXC safely&lt;/strong&gt;. Without it, the root user inside a guest can take control of the host.&lt;/p&gt;
&lt;p&gt;Check that AppArmor or SELinux are running and are configured properly. If you want to go with Grsecurity, then remember to configure it manually.&lt;/p&gt;
&lt;h1 id="limit-resource-consumption"&gt;Limit resource consumption&lt;/h1&gt;
&lt;p&gt;LXC offers ways to limit resource usage, but no special restrictions are put in place by default. &lt;strong&gt;You have to configure them by yourself.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With the default configuration, I can run fork-bombs, request huge memory maps, keep all CPUs busy, doing high loads of I/O. All of this without special privileges. Remember this when running untrusted code.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://andrea.corbellini.name/images/memory-usage.png" alt="Uncontrolled memory consumption"&gt;
&lt;/figure&gt;

&lt;p&gt;To limit resource consumption in LXC, open the configuration file for your container and set the &lt;code&gt;lxc.cgroup.&amp;lt;system&amp;gt;&lt;/code&gt; values you need.&lt;/p&gt;
&lt;p&gt;For example, if you want to limit the container memory usage to 512 MiB, set &lt;code&gt;lxc.cgroup.memory.limit_in_bytes = 512M&lt;/code&gt;. Note that the container with that option, once it exceeds the 512 MiB cap, will start using the swap without limits. If this is not what you want, then set &lt;code&gt;lxc.cgroup.memory.memsw.max_usage_in_bytes = 512M&lt;/code&gt;. Note that to use both options you may need to add &lt;code&gt;cgroup_enable=memory&lt;/code&gt; and &lt;code&gt;swapaccount=1&lt;/code&gt; to the kernel command line.&lt;/p&gt;
&lt;p&gt;To have an overview of all possible options, check out &lt;a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Resource_Management_Guide/ch-Subsystems_and_Tunable_Parameters.html"&gt;Red Hat’s documentation&lt;/a&gt; or the &lt;a href="https://www.kernel.org/doc/Documentation/cgroups/"&gt;Kernel documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With Docker, the story is similar: just use &lt;code&gt;--lxc-conf&lt;/code&gt; from the command line to set LXC’s options.&lt;/p&gt;
&lt;h1 id="limit-disk-usage"&gt;Limit disk usage&lt;/h1&gt;
&lt;p&gt;Something that LXC cannot do is limiting mass storage usage. Luckily, &lt;strong&gt;&lt;a href="https://www.stgraber.org/2013/12/27/lxc-1-0-container-storage/"&gt;LXC integrates nicely with LVM&lt;/a&gt;&lt;/strong&gt; (and brtfs, and zfs, and overlayfs), and you can use that for easily limiting disk usage. You can, for example, create a logical volume for each of your guests, and give that volume a limited size, so that space usage inside a guest cannot grow indefinitely.&lt;/p&gt;
&lt;p&gt;The same &lt;a href="http://developerblog.redhat.com/2014/09/30/overview-storage-scalability-docker/"&gt;holds for Docker&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="pay-attention-at-devrandom"&gt;Pay attention at &lt;code&gt;/dev/random&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Processes inside LXC guests&lt;/strong&gt;, by default, can read from &lt;code&gt;/dev/random&lt;/code&gt; and &lt;strong&gt;can consume the entropy of the host&lt;/strong&gt;. This may cause troubles if you need big amounts of randomness (to generate keys or whatever).&lt;/p&gt;
&lt;p&gt;If this is something that you don’t want, then configure LXC so that it &lt;a href="https://wiki.archlinux.org/index.php/Linux_Containers#Cgroups_device_configuration"&gt;denies access to the character devices&lt;/a&gt; &lt;code&gt;1:8&lt;/code&gt; (random) and &lt;code&gt;1:9&lt;/code&gt; (urandom). Denying access to the path &lt;code&gt;/dev/random&lt;/code&gt; is not enough, as &lt;code&gt;mknod&lt;/code&gt; is allowed inside guests.&lt;/p&gt;
&lt;p&gt;Note however that doing so may break many applications inside the LXC guest that need randomness. Maybe consider using a different machine for processes that require randomness for security purposes.&lt;/p&gt;
&lt;h1 id="use-unprivileged-containers"&gt;Use unprivileged containers&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Containers can be &lt;a href="https://www.stgraber.org/2014/01/17/lxc-1-0-unprivileged-containers/"&gt;run from an unprivileged user&lt;/a&gt;&lt;/strong&gt;. This means UID 0 of the guest can’t match UID 0 of the host, and many potential security holes can’t simply be exploited. Unfortunately, &lt;a href="https://github.com/docker/docker/issues/2918"&gt;Docker has not support for unprivileged containers&lt;/a&gt; yet.&lt;/p&gt;
&lt;p&gt;However, if Docker is not a requirement and you can do well with LXC, start experimenting with unprivileged containers and consider using them in production.&lt;/p&gt;
&lt;p&gt;Programs like Apache will complain that it’s unable to change its ulimit (because setting the ulimit is a privilege of the real root user). If you need to run programs that require special privileges, either configure them so that they do not complain, or consider using &lt;a href="http://linux.die.net/man/7/capabilities"&gt;capabilities&lt;/a&gt; (but do not abuse them, and be cautious, or you risk introducing more problems than the ones your are trying to solve!)&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;LXC, Docker and the entire ecosystem around them can be considered quite mature and stable. They’re surely production ready, and, if the right configuration is put in place, it can be pretty difficult to cause troubles to the host.&lt;/p&gt;
&lt;p&gt;However, whether they can be considered secure or not is up to you: &lt;strong&gt;what are you using containers for? Who are you giving access to? What privileges are you giving, what actions are you restricting?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Always remember what LXC and Docker do by default, and what they do not do, especially when you use them to run untrusted code. Those that I have listed may only be a few of the problems that LXC, Docker and friends may expose. Remember to carefully review your configuration before opening the doors to others.&lt;/p&gt;
&lt;h1 id="further-reading"&gt;Further reading&lt;/h1&gt;
&lt;p&gt;If you liked this article, you’ll find these ones interesting too:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.docker.com/2013/08/containers-docker-how-secure-are-they/"&gt;Containers &amp;amp; Docker: how secure are they?&lt;/a&gt;, from the Docker blog.&lt;/li&gt;
&lt;li&gt;Stéphane Graber’s &lt;a href="https://www.stgraber.org/2014/01/01/lxc-1-0-security-features/"&gt;Security features&lt;/a&gt; from his &lt;a href="https://www.stgraber.org/2013/12/20/lxc-1-0-blog-post-series/"&gt;LXC 1.0: Blog post series&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><category term="cloud"></category><category term="docker"></category><category term="lxc"></category><category term="security"></category></entry><entry><title>Prime numbers and universe factories</title><link href="https://andrea.corbellini.name/2015/02/15/prime-numbers-and-universe-factories/" rel="alternate"></link><published>2015-02-15T16:54:00+00:00</published><updated>2015-02-15T16:54:00+00:00</updated><author><name>andreacorbellini</name></author><id>tag:andrea.corbellini.name,2015-02-15:/2015/02/15/prime-numbers-and-universe-factories/</id><summary type="html">&lt;p&gt;I’m a XKCD fan, and I look it up regularly. There’s a comic that I particularly enjoyed: &lt;a href="http://xkcd.com/10/"&gt;Pi Equals&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;
  &lt;a href="http://xkcd.com/10/"&gt;&lt;img src="http://imgs.xkcd.com/comics/pi.jpg" width="469" height="247" alt="Pi Equals"&gt;&lt;/a&gt;
  &lt;figcaption&gt;The comic &lt;a href="http://xkcd.com/10/" title="Pi Equals"&gt;Pi Equals&lt;/a&gt;, from XKCD.com (CC-BY-NC 2.5).&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Well, it appears that Randall was right in that there’s a help message hidden somewhere. And I just found it in a prime number:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;245178888024581899558766786108789912235672909204719666025638877624752119760547413887830514281649480308707369249
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That number corresponds to the ASCII encoding …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’m a XKCD fan, and I look it up regularly. There’s a comic that I particularly enjoyed: &lt;a href="http://xkcd.com/10/"&gt;Pi Equals&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;
  &lt;a href="http://xkcd.com/10/"&gt;&lt;img src="http://imgs.xkcd.com/comics/pi.jpg" width="469" height="247" alt="Pi Equals"&gt;&lt;/a&gt;
  &lt;figcaption&gt;The comic &lt;a href="http://xkcd.com/10/" title="Pi Equals"&gt;Pi Equals&lt;/a&gt;, from XKCD.com (CC-BY-NC 2.5).&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Well, it appears that Randall was right in that there’s a help message hidden somewhere. And I just found it in a prime number:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;245178888024581899558766786108789912235672909204719666025638877624752119760547413887830514281649480308707369249
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That number corresponds to the ASCII encoding of this message:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;help!! i&amp;#39;m trapped in a universe factory!!!!!!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Apparently, universe factory workers speak English and write ASCII. Nice coincidence, huh?&lt;/p&gt;
&lt;h1 id="the-discovery"&gt;The discovery&lt;/h1&gt;
&lt;p&gt;Yesterday I was playing with the two &lt;a href="https://en.wikipedia.org/wiki/Illegal_prime"&gt;illegal primes&lt;/a&gt; listed on Wikipedia. I was already aware of them, but I had never decoded them till yesterday. While doing so I wondered: how many prime numbers can be directly mapped to an executable file? Also, how many prime numbers can be directly mapped to plain English texts? Perhaps, while digging prime numbers, could we find something like the Iliad or a fully working operating system?&lt;/p&gt;
&lt;p&gt;Well, while asking myself those highly philosophical questions, Randall’s comic quickly came to my mind, and I decided to start looking for help requests hidden in primes. You can’t imagine how many of them I found!&lt;/p&gt;
&lt;p&gt;At first I tried looking for all prime numbers corresponding to strings starting with &lt;code&gt;HELP! I'M TRAPPED IN A UNIVERSE FACTORY!&lt;/code&gt;, with an arbitrary suffix. I found many of them, but I wasn’t satisfied with the result: I wanted something that was purely English/ASCII, without any garbage. Therefore I tried appending hashtags like &lt;code&gt;#help&lt;/code&gt; or &lt;code&gt;#universe&lt;/code&gt;, but could not find any interesting combination that was also a prime number (apparently, use of Twitter is forbidden inside universe factories).&lt;/p&gt;
&lt;p&gt;So I decided to change approach: I looked for all primes corresponding to &lt;code&gt;HELP&lt;/code&gt;, followed by a variable number of exclamation marks, followed by &lt;code&gt;I'M TRAPPED IN A UNIVERSE FACTORY&lt;/code&gt;, followed by other exclamation marks. I could not find anything.&lt;/p&gt;
&lt;p&gt;But then I tried with a lower case string, and… I found lots of such primes!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;help i&amp;#39;m trapped in a universe factory!!!!!!!
help! i&amp;#39;m trapped in a universe factory!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
help!! i&amp;#39;m trapped in a universe factory!!!!!!
help!!! i&amp;#39;m trapped in a universe factory!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
help!!!!!! i&amp;#39;m trapped in a universe factory!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
help!!!!!!!!! i&amp;#39;m trapped in a universe factory!!!!
help!!!!!!!!!! i&amp;#39;m trapped in a universe factory!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
help!!!!!!!!!!!!! i&amp;#39;m trapped in a universe factory!
help!!!!!!!!!!!!!!! i&amp;#39;m trapped in a universe factory!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
help!!!!!!!!!!!!!!!! i&amp;#39;m trapped in a universe factory!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
help!!!!!!!!!!!!!!!!! i&amp;#39;m trapped in a universe factory!!!!!!!!!!
help!!!!!!!!!!!!!!!!!!! i&amp;#39;m trapped in a universe factory!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
help!!!!!!!!!!!!!!!!!!!! i&amp;#39;m trapped in a universe factory!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
help!!!!!!!!!!!!!!!!!!!!! i&amp;#39;m trapped in a universe factory!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
help!!!!!!!!!!!!!!!!!!!!!! i&amp;#39;m trapped in a universe factory!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
help!!!!!!!!!!!!!!!!!!!!!!!!! i&amp;#39;m trapped in a universe factory!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
help!!!!!!!!!!!!!!!!!!!!!!!!!! i&amp;#39;m trapped in a universe factory!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
help!!!!!!!!!!!!!!!!!!!!!!!!!!! i&amp;#39;m trapped in a universe factory!!!!!!!
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I picked the one I liked most and verified its primality with &lt;a href="http://www.wolframalpha.com/input/?i=is+245178888024581899558766786108789912235672909204719666025638877624752119760547413887830514281649480308707369249+prime%3F"&gt;Wolfram|Alpha&lt;/a&gt; and &lt;a href="http://www.numberempire.com/primenumbers.php"&gt;numberempire.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’m not 100% sure that all the others are primes, as I used &lt;a href="https://en.wikipedia.org/wiki/Fermat_primality_test"&gt;Fermat primality test&lt;/a&gt;. However I’m impressed by what I found. Now I can’t stop wondering how much literature, physics or technology could be hidden in prime numbers, in plain English and UTF-8 encoded. :D&lt;/p&gt;
&lt;p&gt;(Obviously, I’m perfectly conscious on what’s happening here, but I though this was a nice fact to share. It could also be a nice number to print on a shirt.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dear universe factory worker, I’m going to rescue you, sooner or later. Just tell me how.&lt;/strong&gt;&lt;/p&gt;</content><category term="fun"></category><category term="fun"></category><category term="math"></category></entry><entry><title>New blog, again</title><link href="https://andrea.corbellini.name/2015/02/15/new-blog-again/" rel="alternate"></link><published>2015-02-15T12:23:00+00:00</published><updated>2015-02-15T12:23:00+00:00</updated><author><name>andreacorbellini</name></author><id>tag:andrea.corbellini.name,2015-02-15:/2015/02/15/new-blog-again/</id><content type="html">&lt;p&gt;This must be the third blog I start from scratch. But this time, I’m taking a serious commitment: I’m going to write here regularly.&lt;/p&gt;
&lt;p&gt;Wish me luck!&lt;/p&gt;</content><category term="misc"></category><category term="misc"></category><category term="blog"></category></entry></feed>